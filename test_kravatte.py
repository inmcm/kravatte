import pytest
from kravatte import compute_kravatte


# Official Test Vectors
class TestOfficialTestVectors:
    """
    Official Test Vector From
    """
    def test_kravatte_k_0_msg_512_out_1024(self):
        my_key = b''
        my_message = bytes([0xad, 0x8e, 0x6f, 0x50, 0x31, 0x12, 0xf3, 0xd4, 0xb4, 0x95, 0x76, 0x57, 0x38, 0x19, 0xfa,
                           0xdb, 0xbb, 0x9c, 0x7d, 0x5e, 0x3f, 0x20, 0x01, 0xe2, 0xc2, 0xa3, 0x84, 0x65, 0x46, 0x27,
                           0x08, 0xe9, 0xc9, 0xaa, 0x8b, 0x6c, 0x4d, 0x2e, 0x0f, 0xf0, 0xd0, 0xb1, 0x92, 0x73, 0x54,
                           0x35, 0x16, 0xf7, 0xd7, 0xb8, 0x99, 0x7a, 0x5b, 0x3c, 0x1d, 0xfe, 0xde, 0xbf, 0xa0, 0x81,
                           0x62, 0x43, 0x24, 0x05])
        my_kra = compute_kravatte(my_key, my_message, 128)
        real_output = bytes([0xf2, 0xd8, 0xef, 0xe3, 0x55, 0x0e, 0x3f, 0xa1, 0xe5, 0x9e, 0x92, 0xc8, 0x77, 0x8c,
                             0xac, 0x67, 0xf2, 0x18, 0x31, 0xfc, 0x5a, 0x6a, 0x65, 0x83, 0xa1, 0xb4, 0xb0, 0xd9,
                             0x2c, 0xd6, 0x5f, 0x87, 0x86, 0xbc, 0x27, 0x31, 0x00, 0x5c, 0xd6, 0x61, 0x9d, 0x11,
                             0x1f, 0xa4, 0x36, 0x43, 0x61, 0xa5, 0xe4, 0x1a, 0xc8, 0xd9, 0xd1, 0x22, 0x8a, 0xcb,
                             0x0c, 0x94, 0xf2, 0x39, 0x17, 0x8b, 0x98, 0xa5, 0x51, 0x61, 0x41, 0x1d, 0x96, 0x15,
                             0x9c, 0xfc, 0x6c, 0x44, 0xf6, 0x95, 0x97, 0xd9, 0x6e, 0x77, 0x6f, 0x66, 0x9d, 0x5e,
                             0xc9, 0x6d, 0x0b, 0x35, 0xbb, 0x47, 0x36, 0x8b, 0x0a, 0xf1, 0x25, 0x9b, 0xff, 0x06,
                             0x9a, 0x18, 0x7c, 0x8b, 0x14, 0x87, 0x41, 0x28, 0x58, 0x66, 0x50, 0x6b, 0xed, 0x98,
                             0xd5, 0x94, 0x5a, 0x79, 0x60, 0x8b, 0xbe, 0xfc, 0x4f, 0xa3, 0x4a, 0xc6, 0x02, 0x41,
                             0x5e, 0xd4])
        assert my_kra == real_output

    def test_kravatte_k_8_msg_512_out_1024(self):
        my_key = b'\xb3'
        my_message = bytes([0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x02, 0xf3, 0xe4,
                           0xd5, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x02,
                           0xf3, 0xe4, 0xd4, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20,
                           0x11, 0x02, 0xf3, 0xe3, 0xd4, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e,
                           0x2f, 0x20, 0x11, 0x02])
        my_kra = compute_kravatte(my_key, my_message, 128)
        real_output = bytes([0x64, 0xf0, 0xeb, 0x6a, 0x3a, 0x51, 0x3e, 0xab, 0x86, 0x3a, 0xc8, 0x71, 0x89, 0xfb, 0xd2,
                             0xf6, 0x10, 0x2f, 0xc3, 0x37, 0xe6, 0x1c, 0x67, 0x21, 0x9f, 0x9f, 0xd1, 0x5b, 0x78, 0x27,
                             0x9b, 0xda, 0x0b, 0xc1, 0x1a, 0xd6, 0x1e, 0x93, 0x16, 0x00, 0xa1, 0x6c, 0x88, 0xa4, 0xe0,
                             0xe5, 0x83, 0xe0, 0x5e, 0xff, 0xe7, 0x39, 0xfa, 0x7a, 0x6e, 0x24, 0xdf, 0xee, 0x74, 0xbd,
                             0x56, 0xb8, 0xf2, 0x6a, 0x09, 0xeb, 0x53, 0xe9, 0x91, 0xf6, 0x88, 0xd8, 0x08, 0xfc, 0x48,
                             0xd7, 0x0b, 0xe4, 0x7e, 0xbe, 0x83, 0xcc, 0x9a, 0x3f, 0x4d, 0x32, 0x32, 0x95, 0xe8, 0xf0,
                             0x1e, 0x1f, 0xc8, 0xb5, 0x48, 0x77, 0xd3, 0xcd, 0x87, 0x45, 0x20, 0x39, 0x04, 0xf4, 0x5b,
                             0xd8, 0xaa, 0xf7, 0x29, 0xbf, 0x5b, 0xd5, 0x07, 0xeb, 0x50, 0x25, 0x2b, 0xe5, 0xc8, 0x22,
                             0xff, 0x58, 0x13, 0x01, 0x26, 0x1c, 0x4e, 0xbc])
        assert my_kra == real_output

    def test_kravatte_3(self):
        my_key= bytes([0x5d, 0xde])
        my_message = bytes([0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05])
        real_output = bytes([0x4a, 0x0d, 0xc4, 0x80, 0xc3, 0x34, 0x18, 0x08, 0xa6, 0x6f, 0xe8, 0x04, 0x4b, 0x1b, 0x8d, 0xfc, 0xaa, 0x01, 0xb0, 0xb9, 0xbf, 0x60, 0x00, 0xc1, 0x30, 0x34, 0xd9, 0x56, 0x5e, 0xb1, 0xe8, 0x8a, 0x59, 0x74, 0x2f, 0xa8, 0x89, 0x2b, 0x16, 0x05, 0xe4, 0xe9, 0xc4, 0x09, 0xe0, 0x8b, 0x37, 0x86, 0x40, 0xf6, 0xd2, 0x27, 0x09, 0xe2, 0x4b, 0x37, 0x68, 0xce, 0xfa, 0x4c, 0xab, 0x89, 0x9b, 0xe2, 0x71, 0xf1, 0xaf, 0x93, 0x95, 0x96, 0x71, 0x01, 0xed, 0xdd, 0x96, 0xde, 0xa5, 0x05, 0x42, 0xf6, 0xe0, 0x25, 0xa1, 0xbe, 0x21, 0x52, 0x8c, 0xcc, 0x5f, 0x96, 0x7c, 0xec, 0x99, 0xcc, 0x36, 0x30, 0x26, 0xca, 0x59, 0x08, 0x6a, 0x6b, 0x7c, 0x23, 0xd0, 0x1e, 0xdf, 0x5f, 0x33, 0x27, 0x51, 0x37, 0x8e, 0x4e, 0xa2, 0x58, 0xbd, 0xde, 0x53, 0x5d, 0xf1, 0x64, 0xed, 0xd0, 0x2f, 0x4c, 0x28, 0xab])
        my_kra = compute_kravatte(my_key, my_message, 128)
        assert my_kra == real_output


    def test_kravatte_4(self):
        my_key = bytes([0x07, 0xc8, 0x89])
        my_message = bytes([0xc8, 0xc5, 0xc2, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3, 0xb0, 0xad, 0xaa, 0xa7, 0xa4, 0xa1, 0x9e, 0x9b, 0x98, 0x95, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83, 0x80, 0x7d, 0x7a, 0x77, 0x74, 0x71, 0x6e, 0x6b, 0x68, 0x65, 0x62, 0x5f, 0x5c, 0x59, 0x56, 0x53, 0x50, 0x4d, 0x4a, 0x47, 0x44, 0x41, 0x3e, 0x3b, 0x38, 0x35, 0x32, 0x2f, 0x2c, 0x29, 0x26, 0x23, 0x20, 0x1d, 0x1a, 0x17, 0x14, 0x11, 0x0e, 0x0b])
        real_output = bytes([0xb1, 0x1a, 0x72, 0x75, 0xf3, 0x5b, 0xb2, 0xa3, 0x43, 0xf0, 0x5e, 0x46, 0x71, 0x8a, 0x67, 0xf2, 0x0d, 0x22, 0x51, 0xa6, 0x58, 0xe9, 0xc9, 0x7e, 0xf1, 0xa8, 0xa7, 0x0a, 0xd1, 0x15, 0x95, 0x03, 0x5d, 0x14, 0x1d, 0xcb, 0xc1, 0xf9, 0x9d, 0xb8, 0x8a, 0x96, 0x8a, 0x74, 0x03, 0x72, 0xb5, 0x64, 0x47, 0x72, 0xc9, 0xda, 0x79, 0xff, 0x0e, 0xa7, 0xe3, 0x8b, 0x39, 0x92, 0x4a, 0xb8, 0x65, 0x02, 0xfd, 0x04, 0xcd, 0xa3, 0x37, 0x51, 0x1d, 0x46, 0xb3, 0xbb, 0xeb, 0xc1, 0x2e, 0xa1, 0xc9, 0xe6, 0x76, 0x99, 0xac, 0x7c, 0xad, 0xca, 0xcd, 0xeb, 0xf2, 0x39, 0x26, 0x13, 0x2e, 0x91, 0x33, 0xb7, 0xf0, 0xda, 0xb7, 0xcb, 0x8b, 0x78, 0x90, 0x75, 0xb5, 0xc1, 0x72, 0x39, 0xbf, 0xd5, 0x11, 0x15, 0x1e, 0x8b, 0x68, 0x92, 0x43, 0x1c, 0x7f, 0x0e, 0x86, 0xa9, 0x10, 0x3f, 0x02, 0xd4, 0x66, 0xff])
        my_kra = compute_kravatte(my_key, my_message, 128)
        assert my_kra == real_output

    def test_kravatte_5(self):
        my_key = bytes([0xb1, 0x92, 0x73, 0x54])
        my_message = bytes([0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3,
                            0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92])
        real_output = bytes([0xa4, 0xb3, 0xa7, 0xdb, 0xa8, 0xbb, 0x3f, 0xd6, 0x14, 0x2b, 0x24, 0x58, 0x07, 0xca, 0xed, 0xc0, 0x97, 0x19, 0xab, 0xd0, 0x5d, 0x9b, 0x76, 0xa3, 0xfb, 0x00, 0x75, 0x6b, 0x4d, 0xab, 0x72, 0xc7, 0xf7, 0x6d, 0x95, 0xad, 0x3f, 0xbe, 0x2f, 0x8e, 0x2e, 0x78, 0xe6, 0x2c, 0x14, 0x30, 0x45, 0xe3, 0x2f, 0x2d, 0x78, 0x93, 0x40, 0x04, 0x85, 0x28, 0x45, 0x71, 0x97, 0xb3, 0x8f, 0x9c, 0x7b, 0x65, 0xd1, 0x47, 0x81, 0x1b, 0x6f, 0x9e, 0xbb, 0x7c, 0x31, 0x09, 0xaa, 0x9e, 0xb1, 0xd1, 0x47, 0xf0, 0x44, 0x3c, 0x1f, 0x3e, 0x73, 0xbb, 0x8c, 0x0a, 0x40, 0x63, 0xec, 0x0a, 0x66, 0xf8, 0x14, 0xdb, 0x81, 0xbd, 0x55, 0xa5, 0x92, 0xeb, 0xea, 0x9e, 0xbf, 0x77, 0x0f, 0x86, 0x89, 0x5e, 0x32, 0x06, 0xd3, 0x16, 0x29, 0x6a, 0xfe, 0x85, 0xf6, 0xa7, 0xc9, 0x72, 0x87, 0x6a, 0xd3, 0x51, 0xec, 0xd1])
        my_kra = compute_kravatte(my_key, my_message, 128)
        assert my_kra == real_output

    def test_kravatte_6(self):
        my_key = bytes([0x5b, 0x4c, 0x3d, 0x2e, 0x1f])
        my_message = bytes([0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda,
                            0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda, 0xda])
        real_output = bytes([0xbb, 0xcf, 0x88, 0x31, 0x84, 0x98, 0x32, 0x4b, 0x0b, 0x09, 0x7b, 0xaa, 0xc9, 0x72, 0x15, 0xba, 0x70, 0x2c, 0xdb, 0xd4, 0xcb, 0xdb, 0xf0, 0xd3, 0x31, 0xf4, 0x8b, 0x06, 0xdf, 0x33, 0x35, 0xc9, 0x3e, 0x79, 0x15, 0x6a, 0x66, 0xa1, 0x2e, 0xd2, 0x1d, 0xa1, 0xa9, 0x92, 0x01, 0x65, 0x53, 0x58, 0xaf, 0x9f, 0x7e, 0xd2, 0xed, 0xcc, 0xe5, 0x30, 0xab, 0x4e, 0xdd, 0x05, 0x73, 0xfd, 0xda, 0xf7, 0x63, 0x55, 0x9c, 0x52, 0xe9, 0xed, 0xbe, 0x6a, 0x1b, 0x2f, 0x38, 0x92, 0x4e, 0xef, 0x3d, 0x04, 0x01, 0x64, 0xe8, 0xd2, 0x01, 0xad, 0xdd, 0xe3, 0x9a, 0xc8, 0xee, 0x6d, 0x24, 0x91, 0x69, 0x02, 0x42, 0x8a, 0x38, 0xb9, 0x36, 0x6f, 0x42, 0xe5, 0xbc, 0x7e, 0xc3, 0xd6, 0x8e, 0xac, 0x24, 0xb5, 0xed, 0xd7, 0x14, 0xfd, 0xe4, 0x5d, 0xfc, 0xf4, 0x41, 0x97, 0x9f, 0xc8, 0xb4, 0xfc, 0xd1, 0x2e])
        my_kra = compute_kravatte(my_key, my_message, 128)
        assert my_kra == real_output

    def test_kravatte_7(self):
        my_key = bytes([0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6])
        my_message = bytes([0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0,
                            0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28,
                            0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b, 0xab, 0x2c, 0xac, 0x2d, 0xad, 0x2e, 0xae, 0x2f, 0xaf,
                            0x30, 0xb0, 0x31, 0xb1, 0x32, 0xb2, 0x33, 0xb3, 0x34, 0xb4, 0x35, 0xb5, 0x36, 0xb6, 0x37,
                            0xb7, 0x38, 0xb8, 0x39, 0xb9, 0x3a, 0xba, 0x3b, 0xbb, 0x3c, 0xbc, 0x3d, 0xbd, 0x3e, 0xbe,
                            0x3f, 0xbf, 0x40, 0xc0, 0x41, 0xc1, 0x42, 0xc2, 0x43, 0xc3, 0x44, 0xc4, 0x45, 0xc5, 0x46,
                            0xc6, 0x47, 0xc7, 0x48, 0xc8, 0x49, 0xc9, 0x4a, 0xca, 0x4b, 0xcb, 0x4c, 0xcc, 0x4d, 0xcd,
                            0x4e, 0xce, 0x4f, 0xcf, 0x50, 0xd0, 0x51, 0xd1, 0x52, 0xd2, 0x53, 0xd3, 0x54, 0xd4, 0x55,
                            0xd5, 0x56, 0xd6, 0x57, 0xd7, 0x58, 0xd8, 0x59, 0xd9, 0x5a, 0xda, 0x5b, 0xdb, 0x5c, 0xdc,
                            0x5d, 0xdd, 0x5e, 0xde, 0x5f, 0xdf, 0x60, 0xe0, 0x61, 0xe1, 0x62, 0xe2, 0x63, 0xe3, 0x64,
                            0xe4, 0x65, 0xe5, 0x66, 0xe6, 0x67, 0xe7, 0x68, 0xe8, 0x69, 0xe9, 0x6a, 0xea, 0x6b, 0xeb,
                            0x6c, 0xec, 0x6d, 0xed, 0x6e, 0xee, 0x6f, 0xef, 0x70, 0xf0, 0x71, 0xf1, 0x72, 0xf2, 0x73,
                            0xf3, 0x74, 0xf4, 0x75, 0xf5, 0x76, 0xf6, 0x77, 0xf7, 0x78, 0xf8, 0x79, 0xf9, 0x7a, 0xfa,
                            0x7b, 0xfb, 0x7c, 0xfc, 0x7d, 0xfd, 0x7e, 0xfe, 0x7f, 0xff, 0x80, 0x00, 0x81, 0x01, 0x82,
                            0x02, 0x83, 0x03, 0x84, 0x04, 0x85, 0x05, 0x86, 0x06, 0x87, 0x07, 0x88, 0x08, 0x89, 0x09,
                            0x8a, 0x0a, 0x8b, 0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91,
                            0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97, 0x17, 0x98, 0x18,
                            0x99, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20,
                            0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7,
                            0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b, 0xab, 0x2c, 0xac, 0x2d, 0xad, 0x2e, 0xae, 0x2f,
                            0xaf, 0x30, 0xb0, 0x31, 0xb1, 0x32, 0xb2, 0x33, 0xb3, 0x34])

        real_output = bytes([0xce, 0xdc, 0x72, 0xae, 0x93, 0xd9, 0xd9, 0x56, 0x0d, 0x9c, 0x2e, 0xfa, 0x7c, 0x18, 0xe2,
                             0xb1, 0x58, 0x75, 0x6f, 0x08, 0x2a, 0x72, 0xfa, 0x76, 0xc8, 0x42, 0x11, 0x6f, 0xf3, 0xd7,
                             0x6b, 0xef, 0xf6, 0x74, 0xc8, 0x13, 0xc1, 0x62, 0x5e, 0x3d, 0x22, 0xdb, 0xb6, 0x5e, 0x89,
                             0x65, 0x62, 0xf4, 0xed, 0x28, 0x82, 0xb3, 0x1f, 0x31, 0x9e, 0x49, 0x46, 0x40, 0x22, 0x6e,
                             0x7b, 0x14, 0x51, 0x8a, 0xd2, 0xf2, 0x23, 0x7e, 0x2a, 0xd2, 0xf5, 0x48, 0x6c, 0x2d, 0x51,
                             0xb1, 0x7f, 0x81, 0x58, 0xa7, 0x7c, 0xed, 0xff, 0x27, 0x69, 0xf8, 0x48, 0x1a, 0xc1, 0x16,
                             0x74, 0x2f, 0x12, 0x5c, 0xcb, 0x4e, 0x1f, 0x8a, 0x30, 0xa0, 0x8c, 0x0a, 0x82, 0x1c, 0xaf,
                             0xdb, 0x01, 0x1b, 0x07, 0x27, 0xfb, 0xf0, 0x66, 0xf2, 0x02, 0xe9, 0xef, 0x3d, 0xca, 0x2e,
                             0xcb, 0x71, 0xe5, 0x02, 0xf9, 0x58, 0xd2, 0xc5])
        my_kra = compute_kravatte(my_key, my_message, 128)
        assert my_kra == real_output



    def test_kravatte_8(self):
        my_key = bytes([0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc,
                        0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae,
                        0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0,
                        0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92,
                        0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84,
                        0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76,
                        0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68,
                        0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a,
                        0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c,
                        0x4b, 0x4a, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d,
                        0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f,
                        0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21,
                        0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13,
                        0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05,
                        0x04, 0x03, 0x02, 0x81])
        my_message = bytes([0xa5, 0x86, 0x67, 0x48, 0x29, 0x0a, 0xeb, 0xcc, 0xac, 0x8d, 0x6e, 0x4f, 0x30,
                            0x11, 0xf2, 0xd3, 0xb3, 0x94, 0x75, 0x56, 0x37, 0x18, 0xf9, 0xda, 0xba, 0x9b,
                            0x7c, 0x5d, 0x3e, 0x1f, 0x00, 0xe1, 0xc1, 0xa2, 0x83, 0x64, 0x45, 0x26, 0x07,
                            0xe8, 0xc8, 0xa9, 0x8a, 0x6b, 0x4c, 0x2d, 0x0e, 0xef, 0xcf, 0xb0, 0x91, 0x72,
                            0x53, 0x34, 0x15, 0xf6, 0xd6, 0xb7, 0x98, 0x79, 0x5a, 0x3b, 0x1c, 0xfd])
        real_output = bytes([0x11, 0x52, 0x11, 0x59, 0x6a, 0x43, 0x40, 0xff, 0xa3, 0x3e, 0xa7, 0xba, 0xf9,
                             0x81, 0x74, 0xc0, 0xe6, 0x41, 0xb0, 0x86, 0x46, 0x93, 0x53, 0x6c, 0x76, 0x9f,
                             0x70, 0xec, 0xbf, 0x21, 0xc5, 0x2a, 0x9f, 0xd6, 0x90, 0x7d, 0x6b, 0x8a, 0xcb,
                             0x68, 0x95, 0x92, 0x63, 0xad, 0x65, 0x06, 0x77, 0x52, 0x6d, 0x55, 0xaf, 0x90,
                             0x74, 0x65, 0x3e, 0xe4, 0x75, 0xc6, 0x39, 0xa6, 0xc9, 0xd2, 0x39, 0x94, 0xf0,
                             0x8e, 0xe7, 0x8d, 0xd1, 0xbd, 0x03, 0x8a, 0x18, 0xe3, 0x9a, 0x57, 0x5b, 0x73,
                             0x50, 0x28, 0x38, 0x93, 0x81, 0xc5, 0x6a, 0xad, 0xde, 0x73, 0x0a, 0x3a, 0xc8,
                             0xec, 0xae, 0x10, 0x21, 0xa2, 0xb4, 0xbf, 0x67, 0x21, 0x0c, 0xc4, 0x67, 0x9e,
                             0xbb, 0x04, 0x8a, 0x80, 0xe5, 0x09, 0x46, 0x41, 0x61, 0x4e, 0x0a, 0x4d, 0x2e,
                             0x76, 0x2d, 0x5e, 0x35, 0xb0, 0x8f, 0x06, 0x66, 0xea, 0xf4, 0x07])
        my_kra = compute_kravatte(my_key, my_message, 128)
        assert my_kra == real_output



    def test_kravatte_9(self):
        my_key = bytes([0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a])
        my_message = bytes([0x7d, 0x5e, 0x3f, 0x20, 0x01, 0xe2, 0xc3, 0xa4, 0x84, 0x65, 0x46, 0x27, 0x08, 0xe9, 0xca, 0xab, 0x8b, 0x6c, 0x4d, 0x2e, 0x0f, 0xf0, 0xd1, 0xb2, 0x92, 0x73, 0x54, 0x35, 0x16, 0xf7, 0xd8, 0xb9, 0x99, 0x7a, 0x5b, 0x3c, 0x1d, 0xfe, 0xdf, 0xc0, 0xa0, 0x81, 0x62, 0x43, 0x24, 0x05, 0xe6, 0xc7, 0xa7, 0x88, 0x69, 0x4a, 0x2b, 0x0c, 0xed, 0xce, 0xae, 0x8f, 0x70, 0x51, 0x32, 0x13, 0xf4, 0xd5, 0xb5, 0x96, 0x77, 0x58, 0x39, 0x1a, 0xfb, 0xdc, 0xbc, 0x9d, 0x7e, 0x5f, 0x40, 0x21, 0x02, 0xe3, 0xc3, 0xa4, 0x85, 0x66, 0x47, 0x28, 0x09, 0xea, 0xca, 0xab, 0x8c, 0x6d, 0x4e, 0x2f, 0x10, 0xf1, 0xd1, 0xb2, 0x93, 0x74, 0x55, 0x36, 0x17, 0xf8, 0xd8, 0xb9, 0x9a, 0x7b, 0x5c, 0x3d, 0x1e, 0xff, 0xdf, 0xc0, 0xa1, 0x82, 0x63, 0x44, 0x25, 0x06, 0xe6, 0xc7, 0xa8, 0x89, 0x6a, 0x4b, 0x2c, 0x0d, 0xed, 0xce, 0xaf, 0x90, 0x71, 0x52, 0x33, 0x14, 0xf4, 0xd5, 0xb6, 0x97, 0x78, 0x59, 0x3a, 0x1b, 0xfb, 0xdc, 0xbd, 0x9e, 0x7f, 0x60, 0x41, 0x22, 0x02, 0xe3, 0xc4, 0xa5, 0x86, 0x67, 0x48, 0x29, 0x09, 0xea, 0xcb, 0xac, 0x8d, 0x6e, 0x4f, 0x30, 0x10, 0xf1, 0xd2, 0xb3, 0x94, 0x75, 0x56, 0x37, 0x17, 0xf8, 0xd9, 0xba, 0x9b, 0x7c, 0x5d, 0x3e, 0x1e, 0xff, 0xe0, 0xc1, 0xa2, 0x83, 0x64, 0x45, 0x25, 0x06, 0xe7, 0xc8, 0xa9, 0x8a, 0x6b, 0x4c, 0x2c, 0x0d, 0xee, 0xcf, 0xb0, 0x91, 0x72, 0x53, 0x33, 0x14, 0xf5, 0xd6, 0xb7, 0x98, 0x79, 0x5a, 0x3a, 0x1b, 0xfc, 0xdd, 0xbe, 0x9f, 0x80, 0x61, 0x41, 0x22, 0x03, 0xe4, 0xc5, 0xa6, 0x87, 0x68, 0x48, 0x29, 0x0a, 0xeb, 0xcc, 0xad, 0x8e, 0x6f, 0x4f, 0x30, 0x11, 0xf2, 0xd3, 0xb4, 0x95, 0x76, 0x56, 0x37, 0x18, 0xf9, 0xda, 0xbb, 0x9c, 0x7d, 0x7d, 0x5e, 0x3f, 0x20, 0x01, 0xe2, 0xc3, 0xa4, 0x84, 0x65, 0x46, 0x27, 0x08, 0xe9, 0xca, 0xab, 0x8b, 0x6c, 0x4d, 0x2e, 0x0f, 0xf0, 0xd1, 0xb2, 0x92, 0x73, 0x54, 0x35, 0x16, 0xf7, 0xd8, 0xb9, 0x99, 0x7a, 0x5b, 0x3c, 0x1d, 0xfe, 0xdf, 0xc0, 0xa0, 0x81, 0x62, 0x43, 0x24, 0x05, 0xe6, 0xc7, 0xa7, 0x88, 0x69, 0x4a, 0x2b, 0x0c, 0xed, 0xce, 0xae, 0x8f, 0x70, 0x51, 0x32, 0x13, 0xf4, 0xd5, 0xb5, 0x96, 0x77, 0x58, 0x39, 0x1a, 0xfb, 0xdc, 0xbc, 0x9d, 0x7e, 0x5f, 0x40, 0x21, 0x02, 0xe3, 0xc3, 0xa4, 0x85, 0x66, 0x47, 0x28, 0x09, 0xea, 0xca, 0xab, 0x8c, 0x6d, 0x4e, 0x2f, 0x10, 0xf1, 0xd1, 0xb2, 0x93, 0x74, 0x55, 0x36, 0x17, 0xf8, 0xd8, 0xb9, 0x9a, 0x7b, 0x5c, 0x3d, 0x1e, 0xff, 0xdf, 0xc0, 0xa1, 0x82, 0x63, 0x44, 0x25, 0x06, 0xe6, 0xc7, 0xa8, 0x89, 0x6a, 0x4b, 0x2c, 0x0d, 0xed, 0xce, 0xaf, 0x90, 0x71, 0x52, 0x33, 0x14, 0xf4, 0xd5, 0xb6, 0x97, 0x78, 0x59, 0x3a, 0x1b])
        # real_output = bytes([0xc7, 0xc0, 0xc0, 0xba, 0x7e, 0x8d, 0x47, 0x1f, 0xc3, 0x37, 0xeb, 0x5d, 0x57, 0xde, 0x3d, 0x4a, 0x46, 0xbb, 0x0d, 0xb9, 0x28, 0x38, 0x4d, 0xa0, 0x51, 0x71, 0xd5, 0x71, 0x26, 0xa4, 0xfc, 0xd4, 0xe5, 0xa8, 0xa1, 0x99, 0x81, 0xb0, 0xf6, 0xa8, 0x6b, 0x1f, 0x36, 0x62, 0xdd, 0xab, 0xb3, 0x07, 0x11, 0x9d, 0xb5, 0xd6, 0xfd, 0x6a, 0x1b, 0xf2, 0x8f, 0x3f, 0x81, 0xd4, 0x01, 0x78, 0x45, 0x96, 0x26, 0x44, 0x7a, 0x4e, 0x3d, 0x46, 0x45, 0x4b, 0xbb, 0xed, 0x25, 0xe5, 0x0d, 0xb0, 0x67, 0x9c, 0x4a, 0xb1, 0xc7, 0xde, 0xc0, 0x2b, 0xec, 0x19, 0x17, 0xa4, 0xd3, 0xbf, 0x7f, 0xb9, 0x10, 0x77, 0x60, 0xd4, 0xe4, 0x5f, 0xb8, 0xf5, 0x65, 0x6a, 0x80, 0xca, 0x84, 0xb7, 0x75, 0x60, 0xdf, 0xad, 0x43, 0x97, 0x0b, 0x79, 0x71, 0x5b, 0x5d, 0xec, 0x79, 0x7a, 0xcb, 0x8e, 0x0e, 0x56, 0x91, 0x09, 0x22, 0xb7, 0xa8, 0x21, 0xf4, 0x06, 0xc3, 0x28, 0x13, 0x03, 0xb5, 0x11, 0xeb, 0x83, 0xb5, 0x5f, 0x6e, 0xdb, 0x84, 0x1c, 0x88, 0xc7, 0xae, 0x04, 0x9f, 0xce, 0xe1, 0x3d, 0x4d, 0x83, 0xd3, 0x2d, 0x8a, 0x37, 0x25, 0xe7, 0x0a, 0x96, 0xc4, 0xed, 0x61, 0x20, 0xe2, 0x6e, 0x34, 0x11, 0xf3, 0x61, 0xe3, 0x20, 0x31, 0x98, 0x0f, 0xda, 0xcf, 0x87, 0x84, 0xbc, 0xa0, 0xb7, 0xff, 0x90, 0xc1, 0xe9, 0x00, 0x1b, 0xe7, 0x11, 0x62, 0xd4, 0x9d, 0x43, 0x21, 0x20, 0x93, 0xf5, 0x00, 0x26, 0x0d, 0x9b, 0xcf, 0xb1, 0xd3, 0x2c, 0x3c, 0x54, 0x73, 0x00, 0xe3, 0x2f, 0x09, 0x52, 0x9b, 0x2b, 0x90, 0x18, 0x7a, 0x62, 0xc7, 0x1d, 0x0d, 0x8f, 0xc0, 0x1a, 0x17, 0x0f, 0xd6, 0xe1, 0x6d, 0x16, 0xac, 0xb4, 0x3b, 0x88, 0x47, 0x45, 0x5f, 0xf1, 0xf0, 0x0f, 0xdb, 0x21, 0xab, 0xb8, 0xc7, 0x98, 0x77, 0xca, 0x90, 0x0e, 0x77, 0x6b, 0x15, 0x47, 0xde, 0xae, 0x93, 0x7b, 0x31, 0xee, 0x7e, 0x1d, 0xb7, 0x68, 0x13, 0xd8, 0xfc, 0x63, 0xe8, 0x57, 0xf6, 0xa1, 0xb0, 0x21, 0x01, 0x04, 0x16, 0xd8, 0x44, 0x3a, 0xda, 0xe9, 0xfa, 0xf3, 0x55, 0x6d, 0xf8, 0x1f, 0xda, 0x79, 0xfd, 0x54, 0xa2, 0xcd, 0x59, 0xe3, 0x91, 0x85, 0x1c, 0x24, 0xf6, 0xb0, 0xac, 0xee, 0x0f, 0xfe, 0xb2, 0x91, 0xf7, 0x8d, 0x70, 0xa5, 0xbe, 0x23, 0x05, 0x07, 0xc5, 0x00, 0x09, 0x50, 0xab, 0x4a, 0xf7, 0xcd, 0x27, 0xd1, 0x3d, 0x51, 0xa1, 0x9e, 0x8c, 0xab, 0xce, 0x1f, 0xb5, 0x93, 0x9f, 0x20, 0xbd, 0x58, 0xc9, 0x43, 0x87, 0x2e, 0x6c, 0x6a, 0xc1, 0x35, 0x42, 0x4c, 0xc1, 0x6a, 0x24, 0x07, 0x21, 0x8f, 0xca, 0xba, 0xf0, 0x11, 0x64, 0x10, 0xb5, 0x7d, 0x90, 0xc6, 0x06, 0x05, 0xe3, 0x36, 0x8b, 0x81, 0x2e, 0x51, 0x0b, 0xd1, 0x5c, 0xf6, 0x5d, 0x3d, 0x80, 0x2d, 0xd3, 0x5d, 0x62, 0x79, 0xb9, 0x67, 0xb2, 0x76, 0x93, 0x0e])
        # real_output = bytes([0xa3, 0xc2, 0xa6, 0xfe, 0x79, 0xc9, 0x10, 0x10, 0xb1, 0xc1, 0x0d, 0xee, 0x37, 0x32, 0xf1, 0xb7, 0x39, 0x65, 0x55, 0x27, 0x80, 0xe1, 0x4b, 0x5d, 0x7d, 0x0c, 0xef, 0xa5, 0x90, 0xc4, 0xff, 0x42, 0x03, 0xf8, 0x97, 0xee, 0xc4, 0x2d, 0xd1, 0x1c, 0x67, 0x9b, 0xff, 0x3d, 0x92, 0xeb, 0x0b, 0x30, 0xb7, 0x3a, 0x48, 0x18, 0xeb, 0xc1, 0x57, 0xae, 0x5d, 0x06, 0x8a, 0x53, 0x64, 0x1f, 0xb9, 0xe6, 0xcd, 0xc9, 0x7b, 0xed, 0x65, 0x8f, 0x0b, 0x9d, 0xf9, 0xb2, 0x8d, 0xee, 0x72, 0xa5, 0x80, 0xba, 0xb4, 0xc7, 0x15, 0xd2, 0x50, 0x28, 0x96, 0xd1, 0x6f, 0xa4, 0xc1, 0x3f, 0x3d, 0x98, 0xf5, 0x6b, 0x20, 0x1b, 0xa5, 0xdc, 0x45, 0xf4, 0xec, 0x2c, 0x11, 0x7a, 0x38, 0xa8, 0xb9, 0x5c, 0xf2, 0xdb, 0x51, 0xe5, 0x83, 0xc2, 0xa5, 0x92, 0xe5, 0x80, 0xd0, 0x7d, 0xbf, 0x9c, 0x09, 0xe0, 0x9c, 0xf3, 0x59, 0x1e, 0xe4, 0x11, 0xaf, 0xac, 0x2c, 0xf2, 0x72, 0xe0, 0x34, 0x38, 0x47, 0xbd, 0x55, 0x63, 0xee, 0x89, 0x04, 0x83, 0x69, 0x1a, 0xb8, 0xea, 0xca, 0xfc, 0xc8, 0xb3, 0x54, 0x39, 0xb2, 0xdd, 0x72, 0x12, 0x62, 0xe9, 0x39, 0x23, 0xec, 0x2e, 0x5a, 0x4a, 0xa1, 0xf7, 0xb9, 0x2b, 0x15, 0xc0, 0x5a, 0x3b, 0x78, 0x0c, 0x75, 0x9f, 0xf5, 0xdc, 0xc8, 0x7b, 0xf4, 0xb1, 0xac, 0xc0, 0x12, 0xcf, 0x92, 0x9b, 0x51, 0xe8, 0x2a, 0xf0, 0xfd, 0xec, 0x42, 0x8d, 0xec, 0xac, 0x8b, 0xfb, 0x19, 0x07, 0x43, 0xd0, 0xa5, 0x49, 0xa2, 0xbc, 0xae, 0xf0, 0x8e, 0xc6, 0x36, 0x64, 0xc3, 0xa6, 0x47, 0x43, 0x30, 0x37, 0x93, 0xac, 0x2f, 0xa2, 0xcd, 0x06, 0x93, 0x1d, 0xcb, 0xf4, 0x39, 0xd0, 0x22, 0x5c, 0xee, 0x8d, 0xe3, 0xc5, 0xef, 0xff, 0x10, 0xfe, 0x93, 0x3d, 0x0c, 0x3e, 0x58, 0x9a, 0xbc, 0xc7, 0x3c, 0xf8, 0xb3, 0x1d, 0xc9, 0x84, 0x89, 0x16, 0x6a, 0x82, 0x6d, 0x4e, 0x38, 0xe6, 0x04, 0x8d, 0x63, 0xeb, 0x94, 0xc2, 0xb0, 0x3a, 0xea, 0xb7, 0xac, 0x79, 0x82, 0x7a, 0x6f, 0x47, 0x26, 0x58, 0x5b, 0xf8, 0x33, 0x55, 0x4b, 0xf7, 0x76, 0x89, 0x80, 0xba, 0x05, 0x33, 0xaf, 0x17, 0x69, 0x1f, 0x36, 0x72, 0xb5, 0x57, 0x00, 0xb0, 0x5a, 0x00, 0xcc, 0x40, 0xdb, 0x07, 0xb8, 0x10, 0xd9, 0xb7, 0x44, 0x53, 0x21, 0xd9, 0xf4, 0xb7, 0x52, 0x07, 0x69, 0x03, 0xfd, 0x42, 0x87, 0x36, 0x70, 0x4f, 0x6d, 0x59, 0x1e, 0xbb, 0xce, 0xbc, 0xaa, 0x81, 0x0a, 0x7c, 0x71, 0x06, 0xfd, 0xae, 0xd7, 0xe9, 0x33, 0x19, 0x3e, 0xc2, 0x59, 0x92, 0x7c, 0x85, 0x2e, 0xa0, 0x75, 0xcd, 0xae, 0x81, 0x80, 0x08, 0x35, 0x31, 0xba, 0x2e, 0x40, 0x0e, 0x9a, 0xe7, 0x4d, 0x7c, 0xb8, 0xf0, 0xa3, 0x4c, 0x5c, 0x06, 0x5b, 0x07, 0x9d, 0x15, 0x5f, 0x02, 0x7e, 0x2b, 0x3e, 0x0f, 0x44, 0x24, 0x4a, 0x97, 0x48, 0x41])
        real_output = bytes([0xc7, 0xc0, 0xc0, 0xba, 0x7e, 0x8d, 0x47, 0x1f, 0xc3, 0x37, 0xeb, 0x5d, 0x57, 0xde, 0x3d, 0x4a, 0x46, 0xbb, 0x0d, 0xb9, 0x28, 0x38, 0x4d, 0xa0, 0x51, 0x71, 0xd5, 0x71, 0x26, 0xa4, 0xfc, 0xd4, 0xe5, 0xa8, 0xa1, 0x99, 0x81, 0xb0, 0xf6, 0xa8, 0x6b, 0x1f, 0x36, 0x62, 0xdd, 0xab, 0xb3, 0x07, 0x11, 0x9d, 0xb5, 0xd6, 0xfd, 0x6a, 0x1b, 0xf2, 0x8f, 0x3f, 0x81, 0xd4, 0x01, 0x78, 0x45, 0x96, 0x26, 0x44, 0x7a, 0x4e, 0x3d, 0x46, 0x45, 0x4b, 0xbb, 0xed, 0x25, 0xe5, 0x0d, 0xb0, 0x67, 0x9c, 0x4a, 0xb1, 0xc7, 0xde, 0xc0, 0x2b, 0xec, 0x19, 0x17, 0xa4, 0xd3, 0xbf, 0x7f, 0xb9, 0x10, 0x77, 0x60, 0xd4, 0xe4, 0x5f, 0xb8, 0xf5, 0x65, 0x6a, 0x80, 0xca, 0x84, 0xb7, 0x75, 0x60, 0xdf, 0xad, 0x43, 0x97, 0x0b, 0x79, 0x71, 0x5b, 0x5d, 0xec, 0x79, 0x7a, 0xcb, 0x8e, 0x0e, 0x56, 0x91, 0x09, 0x22, 0xb7, 0xa8, 0x21, 0xf4, 0x06, 0xc3, 0x28, 0x13, 0x03, 0xb5, 0x11, 0xeb, 0x83, 0xb5, 0x5f, 0x6e, 0xdb, 0x84, 0x1c, 0x88, 0xc7, 0xae, 0x04, 0x9f, 0xce, 0xe1, 0x3d, 0x4d, 0x83, 0xd3, 0x2d, 0x8a, 0x37, 0x25, 0xe7, 0x0a, 0x96, 0xc4, 0xed, 0x61, 0x20, 0xe2, 0x6e, 0x34, 0x11, 0xf3, 0x61, 0xe3, 0x20, 0x31, 0x98, 0x0f, 0xda, 0xcf, 0x87, 0x84, 0xbc, 0xa0, 0xb7, 0xff, 0x90, 0xc1, 0xe9, 0x00, 0x1b, 0xe7, 0x11, 0x62, 0xd4, 0x9d, 0x43, 0x21, 0x20, 0x93, 0xf5, 0x00, 0x26, 0x0d, 0x9b, 0xcf, 0xb1, 0xd3, 0x2c, 0x3c, 0x54, 0x73, 0x00, 0xe3, 0x2f, 0x09, 0x52, 0x9b, 0x2b, 0x90, 0x18, 0x7a, 0x62, 0xc7, 0x1d, 0x0d, 0x8f, 0xc0, 0x1a, 0x17, 0x0f, 0xd6, 0xe1, 0x6d, 0x16, 0xac, 0xb4, 0x3b, 0x88, 0x47, 0x45, 0x5f, 0xf1, 0xf0, 0x0f, 0xdb, 0x21, 0xab, 0xb8, 0xc7, 0x98, 0x77, 0xca, 0x90, 0x0e, 0x77, 0x6b, 0x15, 0x47, 0xde, 0xae, 0x93, 0x7b, 0x31, 0xee, 0x7e, 0x1d, 0xb7, 0x68, 0x13, 0xd8, 0xfc, 0x63, 0xe8, 0x57, 0xf6, 0xa1, 0xb0, 0x21, 0x01, 0x04, 0x16, 0xd8, 0x44, 0x3a, 0xda, 0xe9, 0xfa, 0xf3, 0x55, 0x6d, 0xf8, 0x1f, 0xda, 0x79, 0xfd, 0x54, 0xa2, 0xcd, 0x59, 0xe3, 0x91, 0x85, 0x1c, 0x24, 0xf6, 0xb0, 0xac, 0xee, 0x0f, 0xfe, 0xb2, 0x91, 0xf7, 0x8d, 0x70, 0xa5, 0xbe, 0x23, 0x05, 0x07, 0xc5, 0x00, 0x09, 0x50, 0xab, 0x4a, 0xf7, 0xcd, 0x27, 0xd1, 0x3d, 0x51, 0xa1, 0x9e, 0x8c, 0xab, 0xce, 0x1f, 0xb5, 0x93, 0x9f, 0x20, 0xbd, 0x58, 0xc9, 0x43, 0x87, 0x2e, 0x6c, 0x6a, 0xc1, 0x35, 0x42, 0x4c, 0xc1, 0x6a, 0x24, 0x07, 0x21, 0x8f, 0xca, 0xba, 0xf0, 0x11, 0x64, 0x10, 0xb5, 0x7d, 0x90, 0xc6, 0x06, 0x05, 0xe3, 0x36, 0x8b, 0x81, 0x2e, 0x51, 0x0b, 0xd1, 0x5c, 0xf6, 0x5d, 0x3d, 0x80, 0x2d, 0xd3, 0x5d, 0x62, 0x79, 0xb9, 0x67, 0xb2, 0x76, 0x93, 0x0e])
        # my_key = bytes([0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a])
        # my_message = bytes([0xfd, 0xde, 0xbf, 0xa0, 0x81, 0x62, 0x43, 0x24, 0x04, 0xe5, 0xc6, 0xa7, 0x88, 0x69, 0x4a, 0x2b, 0x0b, 0xec, 0xcd, 0xae, 0x8f, 0x70, 0x51, 0x32, 0x12, 0xf3, 0xd4, 0xb5, 0x96, 0x77, 0x58, 0x39, 0x19, 0xfa, 0xdb, 0xbc, 0x9d, 0x7e, 0x5f, 0x40, 0x20, 0x01, 0xe2, 0xc3, 0xa4, 0x85, 0x66, 0x47, 0x27, 0x08, 0xe9, 0xca, 0xab, 0x8c, 0x6d, 0x4e, 0x2e, 0x0f, 0xf0, 0xd1, 0xb2, 0x93, 0x74, 0x55, 0x35, 0x16, 0xf7, 0xd8, 0xb9, 0x9a, 0x7b, 0x5c, 0x3c, 0x1d, 0xfe, 0xdf, 0xc0, 0xa1, 0x82, 0x63, 0x43, 0x24, 0x05, 0xe6, 0xc7, 0xa8, 0x89, 0x6a, 0x4a, 0x2b, 0x0c, 0xed, 0xce, 0xaf, 0x90, 0x71, 0x51, 0x32, 0x13, 0xf4, 0xd5, 0xb6, 0x97, 0x78, 0x58, 0x39, 0x1a, 0xfb, 0xdc, 0xbd, 0x9e, 0x7f, 0x5f, 0x40, 0x21, 0x02, 0xe3, 0xc4, 0xa5, 0x86, 0x66, 0x47, 0x28, 0x09, 0xea, 0xcb, 0xac, 0x8d, 0x6d, 0x4e, 0x2f, 0x10, 0xf1, 0xd2, 0xb3, 0x94, 0x74, 0x55, 0x36, 0x17, 0xf8, 0xd9, 0xba, 0x9b, 0x7b, 0x5c, 0x3d, 0x1e, 0xff, 0xe0, 0xc1, 0xa2, 0x82, 0x63, 0x44, 0x25, 0x06, 0xe7, 0xc8, 0xa9, 0x89, 0x6a, 0x4b, 0x2c, 0x0d, 0xee, 0xcf, 0xb0, 0x90, 0x71, 0x52, 0x33, 0x14, 0xf5, 0xd6, 0xb7, 0x97, 0x78, 0x59, 0x3a, 0x1b, 0xfc, 0xdd, 0xbe, 0x9e, 0x7f, 0x60, 0x41, 0x22, 0x03, 0xe4, 0xc5, 0xa5, 0x86, 0x67, 0x48, 0x29, 0x0a, 0xeb, 0xcc, 0xac, 0x8d, 0x6e, 0x4f, 0x30, 0x11, 0xf2, 0xd3, 0xb3, 0x94, 0x75, 0x56, 0x37, 0x18, 0xf9, 0xda, 0xba, 0x9b, 0x7c, 0x5d, 0x3e, 0x1f, 0x00, 0xe1, 0xc1, 0xa2, 0x83, 0x64, 0x45, 0x26, 0x07, 0xe8, 0xc8, 0xa9, 0x8a, 0x6b, 0x4c, 0x2d, 0x0e, 0xef, 0xcf, 0xb0, 0x91, 0x72, 0x53, 0x34, 0x15, 0xf6, 0xd6, 0xb7, 0x98, 0x79, 0x5a, 0x3b, 0x1c, 0xfd, 0xfd, 0xde, 0xbf, 0xa0, 0x81, 0x62, 0x43, 0x24, 0x04, 0xe5, 0xc6, 0xa7, 0x88, 0x69, 0x4a, 0x2b, 0x0b, 0xec, 0xcd, 0xae, 0x8f, 0x70, 0x51, 0x32, 0x12, 0xf3, 0xd4, 0xb5, 0x96, 0x77, 0x58, 0x39, 0x19, 0xfa, 0xdb, 0xbc, 0x9d, 0x7e, 0x5f, 0x40, 0x20, 0x01, 0xe2, 0xc3, 0xa4, 0x85, 0x66, 0x47, 0x27, 0x08, 0xe9, 0xca, 0xab, 0x8c, 0x6d, 0x4e, 0x2e, 0x0f, 0xf0, 0xd1, 0xb2, 0x93, 0x74, 0x55, 0x35, 0x16, 0xf7, 0xd8, 0xb9, 0x9a, 0x7b, 0x5c, 0x3c, 0x1d, 0xfe, 0xdf, 0xc0, 0xa1, 0x82, 0x63, 0x43, 0x24, 0x05, 0xe6, 0xc7, 0xa8, 0x89, 0x6a, 0x4a, 0x2b, 0x0c, 0xed, 0xce, 0xaf, 0x90, 0x71, 0x51, 0x32, 0x13, 0xf4, 0xd5, 0xb6, 0x97, 0x78, 0x58, 0x39, 0x1a, 0xfb, 0xdc, 0xbd, 0x9e, 0x7f, 0x5f, 0x40, 0x21, 0x02, 0xe3, 0xc4, 0xa5, 0x86, 0x66, 0x47, 0x28, 0x09, 0xea, 0xcb, 0xac, 0x8d, 0x6d, 0x4e, 0x2f, 0x10, 0xf1, 0xd2, 0xb3, 0x94, 0x74, 0x55, 0x36, 0x17, 0xf8, 0xd9, 0xba, 0x9b])
        # real_output = bytes([0x98, 0xd3, 0xd6, 0xce, 0xed, 0xba, 0xa4, 0x9b, 0x0c, 0x16, 0x10, 0x8c, 0x95, 0x66, 0x16, 0xbb, 0x0d, 0x93, 0x30, 0x47, 0x5f, 0x41, 0x5c, 0x52, 0xc9, 0x58, 0x46, 0x5c, 0x01, 0xa3, 0x46, 0xf5, 0x11, 0x8a, 0xaa, 0x62, 0x85, 0x7d, 0xe0, 0x60, 0x75, 0x6c, 0x0d, 0xab, 0xfe, 0x51, 0x17, 0x61, 0x75, 0xdf, 0x4e, 0x7c, 0xa4, 0x9a, 0xa4, 0x1c, 0x4e, 0x2b, 0xfb, 0x93, 0x45, 0xc6, 0x67, 0x1b, 0xdf, 0x27, 0xe7, 0x32, 0x43, 0x20, 0xdb, 0x0c, 0xbe, 0x65, 0x67, 0xbc, 0x1e, 0x27, 0x5d, 0x7d, 0x34, 0x20, 0xb3, 0xfb, 0x4f, 0xdb, 0x49, 0xce, 0xf0, 0xa6, 0x45, 0xdc, 0x32, 0x72, 0x83, 0x80, 0x39, 0x5a, 0x5d, 0xc9, 0xf0, 0x44, 0x15, 0xe1, 0xe7, 0x57, 0xf0, 0xa8, 0xe1, 0x36, 0x56, 0x1c, 0xef, 0x92, 0x1b, 0x88, 0xc8, 0x3e, 0x73, 0x98, 0xfb, 0xf2, 0x13, 0xa7, 0x5f, 0x1f, 0x93, 0xa9, 0xda, 0x3c, 0x04, 0x19, 0x26, 0xef, 0xae, 0xd2, 0x8b, 0x56, 0xb6, 0x77, 0x91, 0x97, 0x69, 0x82, 0x5c, 0x0e, 0xb7, 0xce, 0x0e, 0x3d, 0x01, 0xdb, 0x80, 0x5d, 0xa7, 0x37, 0x6f, 0x5a, 0xe3, 0xb5, 0xed, 0x6e, 0xee, 0xe6, 0x85, 0xfc, 0x7a, 0x37, 0x27, 0x7d, 0x89, 0x40, 0xa4, 0x2f, 0x4f, 0x0a, 0x7a, 0xff, 0x99, 0x5e, 0x01, 0x71, 0x5b, 0x91, 0x70, 0x75, 0x29, 0xf4, 0x9e, 0x68, 0x7a, 0xee, 0xfc, 0x97, 0xbf, 0xc4, 0xc6, 0xcd, 0xdc, 0x34, 0x93, 0x2e, 0x2a, 0x99, 0xe3, 0xb3, 0xa5, 0xcc, 0x2f, 0x65, 0x40, 0x96, 0xcf, 0x85, 0xef, 0xb9, 0x6b, 0x92, 0x97, 0x4a, 0x50, 0x19, 0x88, 0xc8, 0x14, 0x65, 0xd5, 0x03, 0x26, 0xdf, 0xce, 0xdb, 0xf6, 0x3a, 0x5b, 0x8b, 0x0b, 0x45, 0x38, 0x2f, 0xa9, 0xdd, 0x90, 0xc9, 0xc9, 0x2a, 0x13, 0xda, 0x65, 0xf4, 0x2e, 0xdc, 0xd3, 0x48, 0xae, 0xe2, 0x23, 0x64, 0x5d, 0xce, 0x22, 0x4e, 0xd2, 0x4f, 0xdc, 0xfd, 0xfc, 0xc9, 0xd3, 0x1e, 0x5e, 0xd8, 0x85, 0x2e, 0x22, 0x26, 0x76, 0x98, 0xe3, 0xe3, 0xe6, 0xc6, 0x4a, 0xf2, 0xa3, 0xb8, 0x15, 0x54, 0x07, 0xcb, 0x28, 0xed, 0x73, 0x98, 0x62, 0xdc, 0x38, 0x12, 0x26, 0xad, 0xb6, 0xfe, 0x68, 0x91, 0x67, 0xdf, 0x96, 0x00, 0x07, 0x9e, 0x6b, 0xdc, 0x32, 0x1b, 0x43, 0x9a, 0x53, 0x00, 0x67, 0x51, 0xd7, 0xfa, 0xab, 0x27, 0x24, 0x2a, 0xdb, 0x6a, 0xc8, 0xb8, 0x03, 0x91, 0x4b, 0x7c, 0x02, 0x82, 0x32, 0x9e, 0xeb, 0xcf, 0x77, 0x92, 0x6e, 0xd8, 0xe1, 0x4a, 0xc8, 0x89, 0x72, 0xd0, 0x33, 0x14, 0x7b, 0xbc, 0x80, 0x08, 0x92, 0x00, 0xf8, 0xca, 0x11, 0x86, 0x07, 0x63, 0xc4, 0x45, 0x79, 0xfc, 0x86, 0x3f, 0xd6, 0xdc, 0xe4, 0x16, 0x35, 0x35, 0xbc, 0x66, 0x12, 0x0c, 0x43, 0x33, 0xad, 0x00, 0x34, 0x74, 0xbc, 0x79, 0xa0, 0xf6, 0xc9, 0x33, 0xc6, 0x30, 0x30, 0xfc, 0xea, 0x89, 0x76, 0x5b])
        # assert len(real_output) == len(my_message)
        # assert 0 == len(my_message)
        # assert len(real_output) == 0
        my_kra = compute_kravatte(my_key, my_message, 400)
        assert my_kra == real_output