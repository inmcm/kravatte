import numpy as np
from kravatte import KravatteSANE


# Official Test Vectors
class TestOfficialTestVectors_SANE:
    """
    Test Vectors Generated From KeccakTools https://github.com/gvanas/KeccakTools
    """

    def test_kravatte_SANE_k_16_msg_128_meta_64_nonce_24(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 24 Bytes
        """
        my_key = bytes([0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca])
        my_message = bytes([0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba])
        my_metadata = bytes([0xd3, 0x54, 0xd4, 0x55, 0xd5, 0x56, 0xd6, 0x57, 0xd7, 0x58, 0xd8, 0x59, 0xd9, 0x5a, 0xda, 0x5b, 0xdb, 0x5c, 0xdc, 0x5d, 0xdd, 0x5e, 0xde, 0x5f, 0xdf, 0x60, 0xe0, 0x61, 0xe1, 0x62, 0xe2, 0x63, 0xe3, 0x64, 0xe4, 0x65, 0xe5, 0x66, 0xe6, 0x67, 0xe7, 0x68, 0xe8, 0x69, 0xe9, 0x6a, 0xea, 0x6b, 0xeb, 0x6c, 0xec, 0x6d, 0xed, 0x6e, 0xee, 0x6f, 0xef, 0x70, 0xf0, 0x71, 0xf1, 0x72, 0xf2, 0x73])
        my_nonce = bytes([0x97, 0x88, 0x79, 0x6a, 0x5b, 0x4c, 0x3d, 0x2e, 0x1f, 0x10, 0x01, 0xf2, 0xe3, 0xd4, 0xc5, 0xb6, 0xa6, 0x97, 0x88, 0x79, 0x6a, 0x5b, 0x4c, 0x3d])
        output_ciphertexts = [bytes([0xfb, 0xea, 0x17, 0x2b, 0x51, 0xe9, 0x91, 0xc4, 0x9a, 0x1f, 0xc5, 0xe3, 0xfa, 0xca, 0x0a, 0x3f, 0x3c, 0x5a, 0x62, 0x5d, 0x41, 0x69, 0xe5, 0x0f, 0x6a, 0x5e, 0x93, 0xfb, 0x47, 0x2f, 0xe2, 0x44, 0x6b, 0x59, 0x06, 0x26, 0x5b, 0x09, 0x8e, 0x7f, 0xf0, 0x78, 0x64, 0x31, 0x65, 0x3f, 0xa4, 0x95, 0xf0, 0x0f, 0xc9, 0xfe, 0x20, 0xce, 0x92, 0xea, 0x1e, 0x02, 0x4d, 0x4a, 0x35, 0xb2, 0x91, 0x77, 0x3d, 0xc1, 0x36, 0xcd, 0xf3, 0x8c, 0x0b, 0xd6, 0xa2, 0x00, 0xe4, 0x3f, 0xe1, 0x63, 0xe9, 0x9c, 0x27, 0x2b, 0x85, 0x89, 0xa0, 0x58, 0xd6, 0xf3, 0x84, 0xb7, 0xe6, 0x07, 0x04, 0xad, 0xc4, 0xb0, 0x82, 0xe4, 0x56, 0xec, 0xe6, 0xb9, 0x4c, 0x2f, 0xaf, 0x7b, 0x88, 0x40, 0xa7, 0xd4, 0x93, 0x1c, 0xd0, 0x9b, 0x0f, 0x30, 0x07, 0x46, 0xa2, 0x4e, 0xac, 0x37, 0xe7, 0x3f, 0xc9, 0x3e, 0x28, 0x20]),
                              bytes([0xa2, 0xbd, 0xef, 0x62, 0xbf, 0xf9, 0x2b, 0xa2, 0x7f, 0xa8, 0xd1, 0x6a, 0x9c, 0xec, 0x3b, 0x1c, 0xeb, 0xeb, 0xc9, 0x96, 0x1d, 0xb0, 0x0f, 0x58, 0xc5, 0x10, 0xdc, 0xfd, 0x3b, 0x3d, 0x90, 0xf8, 0x67, 0xc4, 0xb6, 0xe1, 0x6b, 0xc4, 0xdf, 0x5c, 0x50, 0x08, 0x6a, 0xcc, 0x58, 0x06, 0xda, 0x21, 0x08, 0xde, 0x10, 0xda, 0x74, 0xf9, 0x1b, 0xba, 0x20, 0xcd, 0xf1, 0xcf, 0xdd, 0xa6, 0x49, 0xf9, 0x31, 0x6e, 0x94, 0x98, 0x41, 0xc6, 0x19, 0x7e, 0x40, 0xe5, 0xa4, 0x37, 0x5b, 0x64, 0xdd, 0x98, 0x1d, 0x03, 0x52, 0xdf, 0x9a, 0x5a, 0xa7, 0x6a, 0x6b, 0x85, 0xe8, 0x99, 0x53, 0x10, 0x9a, 0x8e, 0x33, 0x24, 0x00, 0x62, 0x7d, 0xe4, 0xef, 0x0f, 0x82, 0x22, 0xa1, 0x14, 0x00, 0xcd, 0x2c, 0x41, 0xf9, 0xc8, 0x90, 0x10, 0x7a, 0xa4, 0x2d, 0xe7, 0xea, 0x4d, 0x72, 0x3c, 0x6b, 0x7c, 0x58, 0x12]),
                              bytes([0x12, 0x46, 0xc3, 0x5f, 0x5e, 0x21, 0x3a, 0x6d, 0x0f, 0xec, 0xb6, 0x7e, 0x79, 0x1f, 0x10, 0xe7, 0xef, 0xe1, 0x8d, 0x55, 0x07, 0x4c, 0x54, 0xe4, 0xc9, 0x5d, 0x46, 0x77, 0xe3, 0x01, 0x6e, 0xba, 0x06, 0x5e, 0xc8, 0x66, 0x01, 0xb3, 0x4d, 0x89, 0x19, 0xd1, 0x34, 0xfd, 0xbe, 0x83, 0x9b, 0xce, 0xf3, 0x0d, 0x5f, 0xc1, 0x16, 0x98, 0xe9, 0xd1, 0xed, 0xee, 0x41, 0x3a, 0x1c, 0x1b, 0x72, 0x17, 0xe9, 0x1a, 0xb6, 0x56, 0x21, 0xaa, 0x9f, 0x5f, 0x0b, 0xfd, 0x4b, 0x7b, 0xf0, 0x7a, 0x53, 0xba, 0xce, 0xac, 0x4a, 0x9a, 0xe7, 0x8f, 0xe3, 0xa5, 0x98, 0x6a, 0xe8, 0xd9, 0xdb, 0xdc, 0xea, 0xc6, 0xca, 0x3d, 0x09, 0x5e, 0xb4, 0x46, 0xb2, 0x87, 0x8e, 0x11, 0xba, 0x98, 0x6d, 0x3a, 0x96, 0x55, 0xfa, 0x2d, 0x48, 0x29, 0x6e, 0x0d, 0xa1, 0xcf, 0x96, 0x40, 0x4a, 0x02, 0x5c, 0x22, 0x99, 0x8d])]
        output_tags = [bytes([0x4d, 0x61, 0x98, 0xc6, 0x5e, 0x7d, 0xb5, 0xac, 0x0a, 0x1a, 0x3d, 0xab, 0x89, 0x54, 0xe5, 0x0d]),
                       bytes([0x1a, 0x8d, 0x0e, 0x08, 0x15, 0xc0, 0xf8, 0x26, 0x41, 0x5a, 0xe8, 0xa9, 0x6d, 0xd2, 0x5b, 0x1c]),
                       bytes([0x7d, 0x97, 0x2c, 0xb2, 0xf3, 0x2f, 0x24, 0x2a, 0xda, 0x0f, 0x3d, 0xea, 0xdb, 0xb7, 0x65, 0x12])]

        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_24_msg_128_meta_64_nonce_24(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 24 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 24 Bytes
        """
        # keyLen   192, nonceLen   192, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02])
        my_nonce = bytes([0xcf, 0xc0, 0xb1, 0xa2, 0x93, 0x84, 0x75, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xde, 0xcf, 0xc0, 0xb1, 0xa2, 0x93, 0x84, 0x75])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_metadata = bytes([0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91, 0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97, 0x17, 0x98, 0x18, 0x99, 0x19, 0x9a, 0x1a, 0x9b, 0x1b, 0x9c, 0x1c, 0x9d, 0x1d, 0x9e, 0x1e, 0x9f, 0x1f, 0xa0, 0x20, 0xa1, 0x21, 0xa2, 0x22, 0xa3, 0x23, 0xa4, 0x24, 0xa5, 0x25, 0xa6, 0x26, 0xa7, 0x27, 0xa8, 0x28, 0xa9, 0x29, 0xaa, 0x2a, 0xab])
        output_ciphertexts = [bytes([0x99, 0x51, 0x14, 0x0e, 0x28, 0x0e, 0x0f, 0xef, 0x51, 0x22, 0xd7, 0x66, 0x6a, 0x5f, 0xce, 0xf7, 0x3c, 0x88, 0xe3, 0xf9, 0xe5, 0xfb, 0xb5, 0x94, 0xb4, 0x99, 0x20, 0xde, 0x69, 0x62, 0x5d, 0x70, 0x9b, 0xaf, 0xb3, 0x1b, 0xf8, 0xdf, 0x19, 0x89, 0xd0, 0x35, 0xce, 0x6c, 0x67, 0xbd, 0x3d, 0xb7, 0x35, 0x5d, 0xc6, 0xf7, 0xf7, 0x81, 0xcf, 0x92, 0xe5, 0xcd, 0x40, 0x09, 0xf1, 0x65, 0xb5, 0xf7, 0xf4, 0xa1, 0x09, 0xe5, 0x8c, 0xa4, 0xf0, 0xb6, 0x0c, 0x5c, 0x83, 0x08, 0x74, 0x62, 0x9f, 0x1d, 0x34, 0x0d, 0x7a, 0x24, 0x01, 0x8a, 0x99, 0x19, 0x34, 0x49, 0x8d, 0x51, 0xfc, 0x87, 0x99, 0xf5, 0x4e, 0x12, 0x7d, 0x16, 0xef, 0x36, 0x48, 0xed, 0x4d, 0xc6, 0x0e, 0xcb, 0xbf, 0x86, 0x08, 0x6b, 0x9a, 0x3c, 0x80, 0x3b, 0x0e, 0x4f, 0x2a, 0x52, 0x41, 0x04, 0x24, 0xad, 0xc2, 0x60, 0x28, 0xc0]),
                              bytes([0xc0, 0x39, 0x61, 0x2f, 0x0a, 0xd5, 0x42, 0xad, 0x6d, 0xe3, 0xfc, 0x60, 0xa8, 0xcf, 0x08, 0x10, 0xca, 0xfb, 0xf5, 0x4d, 0xd5, 0xaa, 0x94, 0x38, 0x7c, 0x23, 0xac, 0x88, 0x0f, 0x87, 0x84, 0x46, 0xf9, 0x10, 0x67, 0xd4, 0x14, 0xb3, 0x49, 0x8a, 0x2b, 0xe3, 0x89, 0x10, 0x20, 0x05, 0xad, 0x0f, 0x13, 0x07, 0xda, 0x11, 0xe0, 0x71, 0x9a, 0xbc, 0x5b, 0x80, 0xaa, 0x51, 0x3c, 0xb8, 0x19, 0xf2, 0x48, 0xcd, 0xcf, 0x58, 0x24, 0x02, 0xaf, 0xc5, 0xe7, 0xce, 0x77, 0x58, 0x23, 0xe8, 0xfd, 0x56, 0x74, 0x59, 0x13, 0xf6, 0x04, 0x27, 0x79, 0x5d, 0xcb, 0xb4, 0x8c, 0x3e, 0xb9, 0x88, 0xe0, 0xab, 0x6a, 0xce, 0xa1, 0xcc, 0xa0, 0x93, 0x1d, 0x41, 0xd6, 0xb0, 0x61, 0xdd, 0x86, 0x74, 0x5a, 0x63, 0xcb, 0xc7, 0x2e, 0x2f, 0x45, 0xf6, 0xff, 0xdd, 0xda, 0x0f, 0x08, 0xf1, 0xe1, 0x67, 0xe2, 0xc8]),
                              bytes([0xe7, 0xd0, 0x50, 0xe8, 0x4a, 0xc4, 0xfe, 0x35, 0x4b, 0x1c, 0xb3, 0xf2, 0x10, 0x15, 0xca, 0x4b, 0xe9, 0xf7, 0xbf, 0x0b, 0x19, 0xeb, 0x93, 0x15, 0x78, 0xd1, 0x4a, 0xa6, 0x0f, 0x1b, 0x66, 0x6c, 0x47, 0xe2, 0x61, 0x27, 0x50, 0x98, 0x06, 0x86, 0x27, 0x72, 0x81, 0x1a, 0x49, 0xe5, 0xcf, 0xd7, 0xd3, 0xad, 0xff, 0xb7, 0x54, 0x0c, 0x56, 0x78, 0x01, 0x37, 0xcb, 0x6f, 0x79, 0x87, 0xbf, 0xac, 0x16, 0xb5, 0x30, 0xbe, 0x1d, 0xd1, 0xda, 0x59, 0x02, 0x74, 0x96, 0x87, 0x6d, 0x4b, 0x79, 0xf4, 0x15, 0x9a, 0x0d, 0x08, 0xb0, 0xfb, 0x5c, 0xae, 0x9c, 0x47, 0xcc, 0x19, 0x64, 0x31, 0xbf, 0x7c, 0xba, 0xbe, 0x87, 0x5d, 0x5d, 0x1d, 0x42, 0x9a, 0x6d, 0xea, 0x3b, 0x5c, 0x70, 0x05, 0xe5, 0x16, 0x8f, 0x55, 0x0a, 0x65, 0x1d, 0x47, 0x04, 0x52, 0xfd, 0x58, 0x16, 0x59, 0x7d, 0xbc, 0xac, 0xce])]
        output_tags = [bytes([0x3a, 0x64, 0xf3, 0x4f, 0x12, 0xad, 0x4f, 0x71, 0x48, 0xbf, 0xfc, 0x3a, 0xf6, 0xf6, 0x9e, 0x56]),
                       bytes([0x20, 0xde, 0x3e, 0x96, 0x1c, 0x7c, 0xc5, 0xfd, 0xf3, 0x08, 0x29, 0x9b, 0xb5, 0x6e, 0x6c, 0x3c]),
                       bytes([0x51, 0x82, 0xd1, 0xb9, 0x76, 0x27, 0x88, 0xf5, 0xce, 0x50, 0x98, 0x16, 0x10, 0xc5, 0xe4, 0x71])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_32_msg_128_meta_64_nonce_24(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 32 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 24 Bytes
        """
        # keyLen   256, nonceLen   192, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a])
        my_nonce = bytes([0x07, 0xf8, 0xe9, 0xda, 0xcb, 0xbc, 0xad, 0x9e, 0x8f, 0x80, 0x71, 0x62, 0x53, 0x44, 0x35, 0x26, 0x16, 0x07, 0xf8, 0xe9, 0xda, 0xcb, 0xbc, 0xad])
        my_message = bytes([0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a])
        my_metadata = bytes([0x43, 0xc4, 0x44, 0xc5, 0x45, 0xc6, 0x46, 0xc7, 0x47, 0xc8, 0x48, 0xc9, 0x49, 0xca, 0x4a, 0xcb, 0x4b, 0xcc, 0x4c, 0xcd, 0x4d, 0xce, 0x4e, 0xcf, 0x4f, 0xd0, 0x50, 0xd1, 0x51, 0xd2, 0x52, 0xd3, 0x53, 0xd4, 0x54, 0xd5, 0x55, 0xd6, 0x56, 0xd7, 0x57, 0xd8, 0x58, 0xd9, 0x59, 0xda, 0x5a, 0xdb, 0x5b, 0xdc, 0x5c, 0xdd, 0x5d, 0xde, 0x5e, 0xdf, 0x5f, 0xe0, 0x60, 0xe1, 0x61, 0xe2, 0x62, 0xe3])
        output_ciphertexts = [bytes([0xec, 0xef, 0x16, 0xba, 0x20, 0x40, 0x61, 0xe5, 0x60, 0x0c, 0x52, 0xfb, 0xd3, 0xc4, 0xc5, 0x71, 0xc7, 0xdc, 0x32, 0xfe, 0x7b, 0xfd, 0xa0, 0x88, 0x00, 0xa2, 0x2e, 0x17, 0x21, 0x3d, 0xcf, 0xba, 0x34, 0x5f, 0xf8, 0x28, 0xb5, 0x11, 0xc4, 0xaa, 0xd3, 0xbf, 0xa1, 0x11, 0xa1, 0x45, 0x05, 0x2b, 0x5d, 0xea, 0xcf, 0x97, 0xd7, 0x4d, 0x51, 0x65, 0xb6, 0xa6, 0x92, 0x70, 0xff, 0x2c, 0xb4, 0x1e, 0xff, 0xa5, 0x0e, 0xa1, 0x80, 0xac, 0x4b, 0x16, 0x2e, 0x20, 0x8c, 0xda, 0xc2, 0x70, 0x59, 0x30, 0x1f, 0x37, 0xae, 0x88, 0x27, 0xfd, 0x04, 0xfa, 0xd7, 0x80, 0xac, 0x89, 0x57, 0x5b, 0x3b, 0x79, 0xdd, 0x05, 0x3d, 0xef, 0x11, 0xcf, 0xc0, 0x2c, 0xdb, 0x1b, 0xb1, 0x96, 0x6b, 0xe9, 0x83, 0xa5, 0x5b, 0x8a, 0x9d, 0xe0, 0x1d, 0x15, 0x9c, 0x60, 0x11, 0x30, 0xbd, 0x4e, 0x8f, 0xe1, 0x8f, 0xa6]),
                              bytes([0x41, 0xcd, 0x96, 0xfe, 0xe1, 0x93, 0xa3, 0x11, 0xb0, 0x82, 0x31, 0x8c, 0xab, 0x9d, 0x44, 0x5b, 0x45, 0xf9, 0x5d, 0x94, 0x9c, 0x20, 0x30, 0x84, 0x64, 0xce, 0x35, 0x8e, 0x23, 0xea, 0x7d, 0x31, 0x3a, 0xf1, 0xc1, 0xae, 0x25, 0x2d, 0x8e, 0xab, 0xac, 0x12, 0xb3, 0xec, 0x06, 0xa6, 0x72, 0xd5, 0x57, 0x8c, 0x32, 0x38, 0x57, 0x63, 0xe0, 0xfa, 0x62, 0x75, 0xb3, 0x6e, 0xc9, 0xd3, 0x56, 0xcd, 0x5c, 0xac, 0x9b, 0x27, 0x84, 0xf1, 0xf9, 0xb0, 0x5f, 0xc9, 0x92, 0xde, 0x36, 0x7a, 0x7a, 0x97, 0xf6, 0x7d, 0xd8, 0x97, 0x99, 0x91, 0xc4, 0xa9, 0xa7, 0x7e, 0xdb, 0xe6, 0xb8, 0xa5, 0xab, 0xf3, 0xef, 0x7d, 0x58, 0x5c, 0xb5, 0x15, 0xe0, 0xa5, 0xf5, 0xd2, 0x19, 0xfc, 0x4e, 0x4e, 0x88, 0xd4, 0xdc, 0x33, 0x07, 0xa4, 0x13, 0xd8, 0x00, 0x75, 0x64, 0xd2, 0x1f, 0x3d, 0xe9, 0x41, 0x2a, 0xd5]),
                              bytes([0x39, 0x4f, 0x91, 0xb1, 0xd8, 0x7a, 0xea, 0x27, 0xc0, 0xaf, 0x50, 0x37, 0xcd, 0x14, 0xee, 0x3e, 0xb9, 0x1c, 0x9b, 0xd8, 0x39, 0xdd, 0x0b, 0x09, 0x35, 0xce, 0x66, 0xda, 0x3d, 0x61, 0x91, 0x6e, 0x76, 0x44, 0xd3, 0xe9, 0x7e, 0x67, 0xf7, 0x79, 0x7d, 0x8a, 0xc9, 0x6f, 0x02, 0x53, 0x47, 0x84, 0x54, 0xeb, 0xde, 0x85, 0x32, 0xa3, 0x6c, 0x78, 0x1f, 0xaa, 0x12, 0xe5, 0xcf, 0x12, 0x47, 0x97, 0x47, 0x98, 0x33, 0x78, 0x2e, 0x2b, 0xe0, 0x44, 0x78, 0x0a, 0xda, 0x9d, 0xa5, 0x47, 0x29, 0x74, 0xb8, 0x97, 0xe6, 0x15, 0x41, 0x42, 0xd1, 0xd7, 0xcb, 0xee, 0xfc, 0x3c, 0xd7, 0xe6, 0xa8, 0x35, 0x7d, 0x12, 0x11, 0x77, 0x7a, 0x2e, 0x06, 0x35, 0x6c, 0x78, 0x64, 0xd6, 0xf9, 0x88, 0xc2, 0x62, 0xc5, 0x23, 0xcd, 0x9e, 0x41, 0xc6, 0xe3, 0x77, 0x85, 0x34, 0x04, 0x61, 0x3a, 0xa8, 0x5f, 0x7f])]
        output_tags = [bytes([0xdd, 0xf4, 0xc8, 0x53, 0x78, 0xe9, 0xa3, 0xbc, 0x52, 0xb8, 0xea, 0xb1, 0x7c, 0x09, 0x70, 0x7c]),
                       bytes([0x00, 0x9b, 0x1d, 0xe4, 0x01, 0x9e, 0x85, 0x0b, 0xda, 0x60, 0xac, 0x38, 0x96, 0x8c, 0xfd, 0xd5]),
                       bytes([0x53, 0xbb, 0x9f, 0xab, 0xaf, 0x44, 0x1b, 0x15, 0x6c, 0x59, 0x6c, 0xb3, 0x04, 0x3b, 0x86, 0xa0])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_64_msg_128_meta_64_nonce_24(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 64 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 24 Bytes
        """
        # keyLen   512, nonceLen   192, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a])
        my_nonce = bytes([0x67, 0x58, 0x49, 0x3a, 0x2b, 0x1c, 0x0d, 0xfe, 0xef, 0xe0, 0xd1, 0xc2, 0xb3, 0xa4, 0x95, 0x86, 0x76, 0x67, 0x58, 0x49, 0x3a, 0x2b, 0x1c, 0x0d])
        my_message = bytes([0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a])
        my_metadata = bytes([0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b, 0xab, 0x2c, 0xac, 0x2d, 0xad, 0x2e, 0xae, 0x2f, 0xaf, 0x30, 0xb0, 0x31, 0xb1, 0x32, 0xb2, 0x33, 0xb3, 0x34, 0xb4, 0x35, 0xb5, 0x36, 0xb6, 0x37, 0xb7, 0x38, 0xb8, 0x39, 0xb9, 0x3a, 0xba, 0x3b, 0xbb, 0x3c, 0xbc, 0x3d, 0xbd, 0x3e, 0xbe, 0x3f, 0xbf, 0x40, 0xc0, 0x41, 0xc1, 0x42, 0xc2, 0x43])
        output_ciphertexts = [bytes([0x14, 0x31, 0x14, 0xf2, 0xe9, 0x44, 0x82, 0x11, 0x1c, 0x92, 0xe3, 0xe2, 0xb3, 0x51, 0x59, 0x47, 0x58, 0x49, 0xf8, 0xbd, 0x49, 0x9a, 0x2c, 0x9b, 0x0d, 0x8e, 0xaa, 0x05, 0xa8, 0x89, 0x83, 0xac, 0x63, 0xb9, 0xc5, 0xa9, 0xcd, 0xd9, 0x72, 0xfc, 0x76, 0xdb, 0x25, 0x14, 0x3f, 0x43, 0xbc, 0x9d, 0x79, 0x2b, 0xc8, 0xe7, 0x0b, 0x5e, 0x9a, 0x7b, 0xa6, 0xbe, 0xea, 0x89, 0x9a, 0xff, 0xaf, 0xe5, 0x43, 0x2e, 0x75, 0x42, 0xf3, 0x1b, 0x90, 0xd8, 0x22, 0x8e, 0x19, 0xa7, 0xfd, 0x29, 0x19, 0x40, 0xd2, 0xe6, 0x40, 0xc3, 0xbf, 0x11, 0xe8, 0xa1, 0xea, 0xeb, 0x1a, 0x5c, 0x8b, 0x84, 0x08, 0x9e, 0xd1, 0x98, 0xeb, 0x80, 0x69, 0xde, 0x02, 0x48, 0x53, 0x8a, 0xf8, 0xd3, 0xe0, 0x61, 0x0d, 0xe6, 0x90, 0x97, 0x62, 0x45, 0x69, 0x2d, 0xb7, 0x8f, 0xae, 0x35, 0xa5, 0xf4, 0xbe, 0x0f, 0xac, 0xde]),
                              bytes([0x54, 0x7e, 0x90, 0x42, 0x14, 0x4f, 0x78, 0xbf, 0xf5, 0x91, 0x92, 0xe4, 0xdc, 0x58, 0x8f, 0xe5, 0x6f, 0x2e, 0x28, 0xd4, 0xb7, 0x5b, 0x8d, 0x4d, 0x56, 0x9b, 0xc5, 0xf0, 0xe7, 0x1a, 0xf5, 0x2a, 0x95, 0xf8, 0x24, 0x14, 0x3b, 0x53, 0x29, 0xe5, 0x1c, 0x3d, 0x92, 0xac, 0x20, 0x26, 0x1a, 0x3e, 0x6e, 0xa8, 0x7d, 0xb9, 0x1e, 0x9f, 0xef, 0xaa, 0xc9, 0xfd, 0xf8, 0x9a, 0x41, 0xcf, 0x96, 0x70, 0xad, 0x25, 0x05, 0x9b, 0xc8, 0x6c, 0x84, 0xd3, 0xf3, 0x6b, 0x1c, 0xb9, 0x62, 0x48, 0x8c, 0x97, 0x2b, 0x7d, 0xff, 0x43, 0x09, 0xa9, 0x8a, 0x29, 0x92, 0xa7, 0xa3, 0xa1, 0x90, 0x9a, 0x77, 0x37, 0xc1, 0x5f, 0xa9, 0x3d, 0x9a, 0xe9, 0xe7, 0xdc, 0xb0, 0x4e, 0x68, 0xc8, 0xb0, 0x04, 0x40, 0xa0, 0xab, 0x0c, 0xbe, 0x40, 0x83, 0x4e, 0xad, 0x18, 0xba, 0x9a, 0xd6, 0x01, 0xab, 0x84, 0x58, 0x7d]),
                              bytes([0x8a, 0x81, 0xa8, 0xa6, 0x85, 0x8d, 0x8b, 0xdf, 0x11, 0x21, 0xfc, 0xcb, 0xcb, 0x9d, 0x10, 0x45, 0xc9, 0x3a, 0xb4, 0x0e, 0xac, 0x82, 0xbb, 0xcc, 0xd8, 0x49, 0x3e, 0x60, 0x23, 0x3c, 0xa9, 0x63, 0x3b, 0xcd, 0x91, 0x86, 0xf4, 0xc2, 0x87, 0xb7, 0x72, 0x8f, 0x57, 0x69, 0x09, 0x9e, 0x9a, 0x3d, 0xb3, 0x52, 0x32, 0xd3, 0xb1, 0x65, 0xd8, 0xa2, 0x0a, 0x69, 0x00, 0x75, 0xb7, 0xb4, 0xc5, 0x46, 0xa1, 0xad, 0x2a, 0xe4, 0x1e, 0xc5, 0x5a, 0x09, 0x24, 0xad, 0x74, 0x1f, 0x81, 0xcf, 0x01, 0x4f, 0x53, 0x74, 0x1a, 0x03, 0xf8, 0xec, 0x3d, 0xe7, 0x5e, 0xfc, 0x03, 0xa3, 0x84, 0x11, 0x0f, 0x3e, 0xc9, 0xb5, 0xaf, 0x3f, 0xf4, 0xed, 0x55, 0xce, 0xe0, 0x69, 0x8a, 0xdb, 0x19, 0xa1, 0x1f, 0x5f, 0x16, 0xbf, 0x2f, 0x59, 0xe1, 0xc5, 0x5d, 0x2a, 0x78, 0x5b, 0xaf, 0x0e, 0x56, 0x8f, 0xe6, 0x77])]
        output_tags = [bytes([0xf9, 0xbe, 0x81, 0xcc, 0x70, 0x0e, 0xdc, 0xdd, 0xc2, 0x45, 0xde, 0xb5, 0xcd, 0x3c, 0x0d, 0x66]),
                       bytes([0xae, 0x65, 0xf5, 0xf7, 0x5b, 0xe1, 0x9a, 0x78, 0xd8, 0xa3, 0xf0, 0x06, 0x99, 0x34, 0x84, 0xb0]),
                       bytes([0xf9, 0x16, 0x59, 0xa3, 0xef, 0xf9, 0xe5, 0xcb, 0x27, 0xac, 0x60, 0x6a, 0x5c, 0xd2, 0x42, 0x91])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_32_msg_128_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 32 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02])
        my_nonce = bytes([0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf6, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_metadata = bytes([0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91, 0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97, 0x17, 0x98, 0x18, 0x99, 0x19, 0x9a, 0x1a, 0x9b, 0x1b, 0x9c, 0x1c, 0x9d, 0x1d, 0x9e, 0x1e, 0x9f, 0x1f, 0xa0, 0x20, 0xa1, 0x21, 0xa2, 0x22, 0xa3, 0x23, 0xa4, 0x24, 0xa5, 0x25, 0xa6, 0x26, 0xa7, 0x27, 0xa8, 0x28, 0xa9, 0x29, 0xaa, 0x2a, 0xab])
        output_ciphertexts = [bytes([0xfb, 0x24, 0x07, 0x2c, 0xf7, 0xc5, 0x1d, 0x80, 0x9e, 0x09, 0xa5, 0x81, 0xa3, 0x03, 0x65, 0xba, 0x2b, 0x5c, 0xe2, 0xc1, 0xf4, 0x8c, 0xcd, 0xfd, 0x77, 0x8e, 0x20, 0x68, 0xa8, 0xec, 0xe2, 0x6e, 0xae, 0xe1, 0x39, 0x72, 0x77, 0x78, 0x9b, 0x68, 0x8a, 0xf6, 0x0a, 0x92, 0x98, 0x08, 0x11, 0x8d, 0x08, 0x2a, 0xe3, 0xe2, 0x62, 0x5a, 0xfe, 0x98, 0xb6, 0x42, 0xcf, 0x74, 0xee, 0xf9, 0x19, 0x3c, 0x4a, 0xed, 0x63, 0x9a, 0x7b, 0xdf, 0xc7, 0xfc, 0xe4, 0x2e, 0xe4, 0x02, 0x03, 0xcc, 0x9e, 0x02, 0x20, 0x6c, 0x06, 0xa5, 0xa3, 0x00, 0xe5, 0xf1, 0x4b, 0xfb, 0x11, 0xd7, 0x37, 0xfb, 0x9a, 0x39, 0x42, 0x95, 0x39, 0xbe, 0xe6, 0xc1, 0xab, 0x20, 0xb4, 0x1f, 0x1e, 0x7b, 0x4d, 0xbd, 0xbe, 0x7f, 0x64, 0x7d, 0xb5, 0x81, 0xac, 0x17, 0xc3, 0x6b, 0xc9, 0x14, 0xa6, 0xb4, 0x40, 0xfb, 0xa8, 0xa2]),
                              bytes([0x87, 0xfe, 0xcb, 0x74, 0x8a, 0x9f, 0x98, 0xe3, 0xa7, 0x34, 0xde, 0x2c, 0x90, 0x94, 0x7a, 0x40, 0x77, 0xef, 0x20, 0x31, 0xde, 0x49, 0x0a, 0x8f, 0xb4, 0xae, 0x1e, 0x2d, 0x68, 0xea, 0xf7, 0xa6, 0x23, 0x2d, 0xd5, 0xf7, 0x7e, 0xda, 0x87, 0x69, 0xf6, 0x00, 0x79, 0xff, 0x87, 0x5c, 0x8e, 0x78, 0x4a, 0xd0, 0xfe, 0xb9, 0xfc, 0x46, 0x9e, 0xb8, 0x3e, 0xae, 0x1a, 0x3f, 0x9f, 0x30, 0x40, 0x89, 0xe0, 0x7c, 0x67, 0xdd, 0x36, 0xe6, 0x4e, 0x27, 0x1e, 0xc5, 0x8a, 0xff, 0x10, 0x24, 0x68, 0x51, 0xc6, 0xd5, 0x89, 0xea, 0xca, 0x71, 0x7c, 0x00, 0x82, 0xe9, 0x59, 0xc4, 0xbb, 0xd3, 0x17, 0x01, 0x06, 0xdf, 0x04, 0xb5, 0x8f, 0xe8, 0x90, 0x0b, 0x64, 0x53, 0x50, 0x61, 0x68, 0xc2, 0x48, 0x99, 0x5a, 0xb3, 0xe1, 0xf4, 0x82, 0xfc, 0xeb, 0x27, 0x1e, 0xcc, 0xc9, 0x55, 0x5e, 0x08, 0xb3, 0x49]),
                              bytes([0x1e, 0xf9, 0x52, 0xf2, 0xd6, 0xfe, 0xc6, 0x5a, 0x6d, 0x26, 0xfb, 0x2c, 0xdd, 0x96, 0x27, 0xb3, 0xbc, 0x49, 0xb8, 0x25, 0xcc, 0x93, 0xb4, 0xb8, 0xc6, 0x01, 0x41, 0xa9, 0xde, 0x6d, 0xef, 0x42, 0xbc, 0xf2, 0x8d, 0xa0, 0xc3, 0x25, 0x0f, 0x0e, 0x3d, 0x8d, 0x83, 0xda, 0x82, 0x3b, 0x51, 0xcc, 0x96, 0x77, 0x4b, 0xe1, 0xd5, 0x35, 0x95, 0x3c, 0xd7, 0x22, 0x89, 0xe0, 0xc8, 0x76, 0x9f, 0xe5, 0x0b, 0xd1, 0x99, 0xe0, 0xc7, 0x4d, 0x81, 0x73, 0x89, 0x56, 0xdf, 0xae, 0x40, 0xd4, 0x35, 0x67, 0x3b, 0xf8, 0xf9, 0xc1, 0x55, 0x62, 0x89, 0xd9, 0x9e, 0x02, 0xcf, 0x54, 0x14, 0x06, 0xc1, 0x46, 0x37, 0xd0, 0xe7, 0x4a, 0x2f, 0xe4, 0x30, 0x51, 0xdd, 0x52, 0x96, 0xea, 0xce, 0x75, 0x67, 0x80, 0xec, 0x00, 0xf9, 0x4b, 0xcc, 0x18, 0x22, 0x6d, 0x78, 0x51, 0xe2, 0x0c, 0x93, 0x89, 0x98, 0x59])]
        output_tags = [bytes([0x08, 0x71, 0x3e, 0x9f, 0xe8, 0x0c, 0x63, 0xcd, 0xe1, 0x41, 0x32, 0x3e, 0x8a, 0xa4, 0x61, 0x03]),
                       bytes([0x90, 0xab, 0xfc, 0x4e, 0x1b, 0xb7, 0x85, 0xba, 0xd0, 0x83, 0xdd, 0xab, 0x07, 0x82, 0x8d, 0xa2]),
                       bytes([0x75, 0xcb, 0xa4, 0x06, 0x9e, 0x2c, 0x60, 0x7d, 0xb5, 0x15, 0x71, 0xb3, 0x2a, 0x41, 0xf0, 0x92])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_32_msg_128_meta_64_nonce_64(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 32 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 64 Bytes
        """
        # keyLen   128, nonceLen   512, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2])
        my_nonce = bytes([0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf6, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23])
        my_message = bytes([0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2])
        my_metadata = bytes([0xeb, 0x6c, 0xec, 0x6d, 0xed, 0x6e, 0xee, 0x6f, 0xef, 0x70, 0xf0, 0x71, 0xf1, 0x72, 0xf2, 0x73, 0xf3, 0x74, 0xf4, 0x75, 0xf5, 0x76, 0xf6, 0x77, 0xf7, 0x78, 0xf8, 0x79, 0xf9, 0x7a, 0xfa, 0x7b, 0xfb, 0x7c, 0xfc, 0x7d, 0xfd, 0x7e, 0xfe, 0x7f, 0xff, 0x80, 0x00, 0x81, 0x01, 0x82, 0x02, 0x83, 0x03, 0x84, 0x04, 0x85, 0x05, 0x86, 0x06, 0x87, 0x07, 0x88, 0x08, 0x89, 0x09, 0x8a, 0x0a, 0x8b])
        output_ciphertexts = [bytes([0x2e, 0x9f, 0x8e, 0xf8, 0x23, 0x28, 0x35, 0xc8, 0x18, 0x1a, 0x93, 0x26, 0x5b, 0xee, 0x4b, 0xa4, 0x8c, 0x5e, 0xd3, 0xe4, 0x87, 0x86, 0x62, 0x83, 0x92, 0xea, 0x4d, 0xdc, 0xbb, 0x77, 0xc3, 0xb5, 0xca, 0x78, 0x30, 0xea, 0xa5, 0x0d, 0xe7, 0x4e, 0xdf, 0x01, 0xb0, 0x80, 0xc7, 0x77, 0x4f, 0x48, 0xc5, 0xf0, 0x2d, 0xf9, 0xb8, 0xae, 0xc5, 0x7d, 0xd3, 0xb9, 0x50, 0x97, 0x60, 0x89, 0xff, 0x24, 0xc1, 0xcc, 0x13, 0x46, 0x89, 0x53, 0x0b, 0xe8, 0xa8, 0x91, 0xe8, 0xc3, 0xfa, 0xc8, 0x6d, 0x28, 0xc2, 0x4e, 0x43, 0xc6, 0x4e, 0x7b, 0xb0, 0x92, 0xf8, 0x7f, 0xbf, 0x50, 0xe7, 0x54, 0x0a, 0xc2, 0xbf, 0xf7, 0x22, 0x90, 0x42, 0x20, 0x51, 0xfe, 0x99, 0x0e, 0x37, 0x83, 0x61, 0x13, 0xb1, 0x8b, 0x65, 0xe1, 0xa1, 0xb5, 0x6a, 0xab, 0xc0, 0x0f, 0xaf, 0x56, 0xd0, 0x04, 0x86, 0x12, 0x6d, 0xc3]),
                              bytes([0x30, 0x3b, 0xd3, 0x51, 0xb6, 0xdf, 0x0a, 0x0b, 0xe2, 0x19, 0xf1, 0x84, 0xd9, 0x5a, 0x47, 0x55, 0x65, 0x99, 0xe2, 0x7d, 0x1e, 0xa7, 0x52, 0x50, 0x56, 0x13, 0x39, 0x43, 0x62, 0xf4, 0x19, 0x47, 0xcd, 0x25, 0x90, 0x90, 0x12, 0xbe, 0xbf, 0x38, 0xc0, 0xf7, 0x43, 0x8e, 0x68, 0x20, 0x36, 0xc0, 0x7e, 0x59, 0x64, 0xb9, 0x8c, 0x33, 0xce, 0x4c, 0xf9, 0x5d, 0x1b, 0x32, 0xb4, 0xfe, 0xf1, 0x7b, 0x9e, 0x22, 0xe1, 0xd4, 0xce, 0xc5, 0x44, 0x86, 0x5b, 0x39, 0x55, 0x75, 0xe4, 0xf9, 0x36, 0x82, 0xdd, 0x61, 0xe8, 0xc1, 0xee, 0xfb, 0x22, 0x0f, 0xe8, 0x9e, 0xba, 0x02, 0xdb, 0x1f, 0x9e, 0xd3, 0x1d, 0xd6, 0xa7, 0x3f, 0x81, 0x06, 0xf6, 0x9d, 0x18, 0x6e, 0x49, 0xf9, 0xe4, 0xe2, 0x6f, 0x65, 0x8a, 0xfd, 0xab, 0x8d, 0xfb, 0xec, 0xf2, 0xf8, 0x04, 0x2e, 0x5a, 0x66, 0xf7, 0x8c, 0xe7, 0x46]),
                              bytes([0xf3, 0x1f, 0x00, 0x9c, 0xe7, 0xb4, 0xf1, 0x91, 0xeb, 0xb2, 0xe1, 0x7d, 0xe8, 0xde, 0xc5, 0x72, 0x73, 0xc6, 0xb1, 0x51, 0xe0, 0x1d, 0xaa, 0x03, 0x6a, 0x40, 0x3a, 0x2d, 0x59, 0x60, 0x8a, 0xa4, 0xa9, 0xff, 0xf6, 0xca, 0xf9, 0xd6, 0x32, 0x51, 0xd2, 0xa3, 0x5d, 0x87, 0x26, 0x70, 0x43, 0xa8, 0xd9, 0xee, 0xda, 0x4f, 0x76, 0x48, 0x1e, 0x8a, 0xb0, 0xc5, 0x7a, 0x8d, 0x94, 0xd7, 0x99, 0x59, 0xa2, 0xfe, 0x3b, 0x60, 0x35, 0xde, 0x89, 0x89, 0x16, 0x88, 0x42, 0xcc, 0x44, 0xa3, 0xbd, 0x55, 0x2b, 0xd9, 0x31, 0xb1, 0x67, 0x7b, 0x63, 0x48, 0x3e, 0x7e, 0xad, 0xc4, 0x3f, 0x19, 0x44, 0x48, 0xe2, 0x04, 0x72, 0x3c, 0xea, 0xcb, 0x22, 0x9e, 0x3f, 0xe0, 0xc2, 0x8c, 0x3b, 0x09, 0x32, 0xbb, 0xd3, 0x82, 0x3e, 0xc7, 0xa2, 0x85, 0x51, 0x3e, 0xe7, 0xb9, 0x9f, 0x0e, 0x95, 0x0e, 0x66, 0x68])]
        output_tags = [bytes([0x80, 0xa3, 0x22, 0x2e, 0x44, 0x87, 0x36, 0x57, 0x06, 0xeb, 0x7f, 0xda, 0x5c, 0xb4, 0x63, 0x11]),
                       bytes([0x49, 0x38, 0x50, 0xc9, 0x81, 0x29, 0x9a, 0x1d, 0xef, 0xd7, 0x38, 0xdb, 0x0f, 0xe7, 0x50, 0xa4]),
                       bytes([0xa4, 0xc9, 0xf9, 0x9c, 0x05, 0xe5, 0xbd, 0x27, 0x7f, 0xae, 0x89, 0x8e, 0x9a, 0xea, 0x20, 0x93])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_128_meta_64_nonce_128(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 128 Bytes
        """
        # keyLen   128, nonceLen  1024, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2])
        my_nonce = bytes([0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf6, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x31, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x40, 0x31, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f])
        my_message = bytes([0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92])
        my_metadata = bytes([0xab, 0x2c, 0xac, 0x2d, 0xad, 0x2e, 0xae, 0x2f, 0xaf, 0x30, 0xb0, 0x31, 0xb1, 0x32, 0xb2, 0x33, 0xb3, 0x34, 0xb4, 0x35, 0xb5, 0x36, 0xb6, 0x37, 0xb7, 0x38, 0xb8, 0x39, 0xb9, 0x3a, 0xba, 0x3b, 0xbb, 0x3c, 0xbc, 0x3d, 0xbd, 0x3e, 0xbe, 0x3f, 0xbf, 0x40, 0xc0, 0x41, 0xc1, 0x42, 0xc2, 0x43, 0xc3, 0x44, 0xc4, 0x45, 0xc5, 0x46, 0xc6, 0x47, 0xc7, 0x48, 0xc8, 0x49, 0xc9, 0x4a, 0xca, 0x4b])
        output_ciphertexts = [bytes([0x58, 0xfb, 0xd4, 0x87, 0x15, 0x73, 0xc1, 0xf3, 0xde, 0x97, 0xf5, 0x31, 0x52, 0x7a, 0x3c, 0x2d, 0xbf, 0xee, 0x1e, 0x0e, 0x62, 0x07, 0xd6, 0xe7, 0x7f, 0xa9, 0x48, 0xb5, 0x99, 0x14, 0x83, 0x77, 0x06, 0x74, 0xf5, 0xea, 0x05, 0x22, 0xf9, 0x51, 0xde, 0x1e, 0x43, 0x91, 0xaa, 0xf7, 0x0c, 0x1e, 0x55, 0xc9, 0x2c, 0x92, 0x88, 0x10, 0xaa, 0xc0, 0x0f, 0x9a, 0x10, 0x1f, 0x99, 0x1b, 0xac, 0xd5, 0xb8, 0x54, 0x08, 0x3a, 0x0e, 0x62, 0x54, 0x25, 0x6c, 0x00, 0xad, 0x2b, 0xae, 0x28, 0x9b, 0x7d, 0x03, 0x2f, 0xd6, 0xed, 0x8e, 0xb1, 0x5c, 0x07, 0x1a, 0x2e, 0x41, 0xa6, 0xf2, 0x4d, 0xfb, 0xd2, 0x30, 0x78, 0x53, 0xcb, 0x8d, 0xe6, 0x0a, 0x66, 0x3d, 0x99, 0xe6, 0x9a, 0x11, 0x05, 0x9c, 0x58, 0x5e, 0x19, 0x61, 0xc8, 0xeb, 0x7d, 0x07, 0x70, 0x70, 0xa5, 0x90, 0xab, 0xd3, 0xd8, 0xd1, 0x29]),
                              bytes([0xf5, 0x03, 0xf2, 0xc0, 0x0b, 0xbc, 0x3b, 0xdf, 0xc9, 0xed, 0xc6, 0x53, 0x89, 0xc1, 0xfa, 0x3b, 0x98, 0x1a, 0x32, 0x39, 0xca, 0x17, 0x4f, 0x7e, 0x72, 0x4f, 0x98, 0xc2, 0xf6, 0x3e, 0x34, 0x64, 0xe7, 0x31, 0x76, 0x2e, 0x13, 0x51, 0x6e, 0x1b, 0xf5, 0x57, 0x4c, 0xdc, 0x9c, 0x00, 0xc3, 0xa4, 0x95, 0x26, 0x58, 0xdd, 0xb3, 0x5d, 0xdf, 0x89, 0x84, 0x15, 0x17, 0xff, 0xf3, 0x5b, 0xaa, 0xc1, 0x6c, 0x52, 0x90, 0xc1, 0x41, 0x13, 0x0c, 0xea, 0x1e, 0xba, 0xff, 0x2d, 0xa2, 0x77, 0xed, 0x81, 0xc4, 0xef, 0x9f, 0x34, 0x76, 0x9f, 0x29, 0xed, 0xc2, 0xd9, 0x0f, 0x4f, 0xcf, 0xb9, 0x25, 0xbd, 0x22, 0x80, 0x30, 0xdc, 0x50, 0x39, 0x87, 0x69, 0x10, 0x10, 0xd8, 0x38, 0x8f, 0xfc, 0x8c, 0x8d, 0x31, 0xd2, 0x93, 0xef, 0x82, 0x49, 0x0f, 0xef, 0x15, 0xce, 0xed, 0xa4, 0x54, 0xa2, 0x6d, 0xa6]),
                              bytes([0x30, 0x14, 0xf9, 0x77, 0xee, 0x17, 0xdf, 0xd7, 0x91, 0x67, 0x98, 0xd2, 0x9d, 0x32, 0x1b, 0xf1, 0xef, 0x21, 0xf6, 0x89, 0x2d, 0x76, 0xbf, 0x97, 0x41, 0xb4, 0x0f, 0xc6, 0x7e, 0x7f, 0x04, 0x55, 0x55, 0x63, 0x5d, 0x6d, 0xf7, 0x45, 0x6b, 0xcc, 0xde, 0xa1, 0x54, 0x51, 0xd5, 0xc6, 0x25, 0x03, 0x86, 0x8f, 0x49, 0x08, 0x6e, 0xd2, 0x90, 0xc5, 0xd3, 0x39, 0x31, 0x56, 0x3f, 0x7a, 0xdd, 0x40, 0xf8, 0x21, 0x06, 0x72, 0xac, 0x5c, 0x48, 0xf5, 0x58, 0xde, 0x67, 0xd7, 0xea, 0xaa, 0x3c, 0x4a, 0xff, 0xe1, 0xba, 0xfd, 0xde, 0x3c, 0x24, 0xe3, 0x52, 0xf3, 0x53, 0xb5, 0x31, 0x88, 0x37, 0xec, 0xcf, 0x19, 0x00, 0xc8, 0x48, 0xe9, 0xfd, 0xce, 0x03, 0xf4, 0x35, 0x0b, 0xfc, 0xa0, 0x93, 0xac, 0x04, 0x9d, 0xb2, 0x7b, 0xc9, 0x1d, 0x09, 0xef, 0xb9, 0x9e, 0xfb, 0x60, 0x42, 0xec, 0x16, 0x56])]
        output_tags = [bytes([0x00, 0xd9, 0x95, 0xff, 0x12, 0xfa, 0xcf, 0x06, 0x05, 0xd4, 0x70, 0x24, 0x3a, 0x11, 0x15, 0x98]),
                       bytes([0x6e, 0x05, 0x40, 0x35, 0x7c, 0x35, 0x7a, 0xc8, 0x60, 0x6d, 0x43, 0xdb, 0xf7, 0x06, 0xb3, 0xec]),
                       bytes([0xea, 0x13, 0x9f, 0x96, 0xf5, 0x5a, 0x2e, 0xba, 0x00, 0x46, 0xce, 0xd3, 0x96, 0x26, 0x4e, 0x60])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_0_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 0 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen     0, ADLen   512 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_nonce = bytes([0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85, 0x76, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85])
        my_message = bytes([])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b])
        output_ciphertexts = [bytes([]),
                              bytes([]),
                              bytes([])]
        output_tags = [bytes([0xe9, 0x1f, 0x9a, 0x51, 0xd8, 0x5a, 0x27, 0x76, 0xb3, 0x52, 0xe7, 0xd9, 0x57, 0xcb, 0x9a, 0x35]),
                       bytes([0xf9, 0x8d, 0xb5, 0x01, 0x99, 0x1d, 0xed, 0x61, 0xcc, 0xf2, 0x74, 0x3c, 0xb2, 0x87, 0x06, 0x11]),
                       bytes([0x8f, 0xce, 0x18, 0xcc, 0xc7, 0xd7, 0x27, 0x34, 0x37, 0x8e, 0x20, 0x25, 0x5a, 0x87, 0x52, 0x12])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_16_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 16 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen   128, ADLen   512 (in bits)
        my_key = bytes([0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_nonce = bytes([0xc7, 0xb8, 0xa9, 0x9a, 0x8b, 0x7c, 0x6d, 0x5e, 0x4f, 0x40, 0x31, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd6, 0xc7, 0xb8, 0xa9, 0x9a, 0x8b, 0x7c, 0x6d, 0x5e, 0x4f, 0x40, 0x31, 0x22, 0x13, 0x04, 0xf5])
        my_message = bytes([0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2])
        my_metadata = bytes([0xfb, 0x7c, 0xfc, 0x7d, 0xfd, 0x7e, 0xfe, 0x7f, 0xff, 0x80, 0x00, 0x81, 0x01, 0x82, 0x02, 0x83, 0x03, 0x84, 0x04, 0x85, 0x05, 0x86, 0x06, 0x87, 0x07, 0x88, 0x08, 0x89, 0x09, 0x8a, 0x0a, 0x8b, 0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91, 0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97, 0x17, 0x98, 0x18, 0x99, 0x19, 0x9a, 0x1a, 0x9b])
        output_ciphertexts = [bytes([0xc5, 0xac, 0x66, 0xab, 0x8d, 0xab, 0x12, 0xf6, 0x4d, 0x21, 0x03, 0xe1, 0x9f, 0xbc, 0xd9, 0x1d]),
                              bytes([0x0d, 0x20, 0xda, 0xb8, 0x7a, 0x5f, 0xab, 0x00, 0x83, 0x12, 0xbd, 0xb1, 0x52, 0x1c, 0x49, 0xa2]),
                              bytes([0xa7, 0xb6, 0x75, 0x7d, 0x0f, 0xcb, 0xf6, 0xd0, 0x8f, 0xe4, 0x40, 0x77, 0x37, 0x20, 0xc9, 0x60])]
        output_tags = [bytes([0x30, 0xd9, 0x44, 0x5a, 0xc5, 0x8d, 0x1e, 0xa9, 0xec, 0x83, 0xa0, 0x21, 0xb0, 0xda, 0x58, 0xbf]),
                       bytes([0x92, 0x1f, 0xc8, 0xd7, 0xa1, 0xec, 0x10, 0x68, 0x9c, 0xed, 0xdb, 0x50, 0xbf, 0x9b, 0x0e, 0xa7]),
                       bytes([0x25, 0x4f, 0x61, 0xdc, 0x91, 0x02, 0x15, 0x01, 0x4d, 0xdf, 0x1c, 0xf9, 0xec, 0x0d, 0xb9, 0x04])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_32_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 32 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen   256, ADLen   512 (in bits)
        my_key = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62])
        my_nonce = bytes([0x37, 0x28, 0x19, 0x0a, 0xfb, 0xec, 0xdd, 0xce, 0xbf, 0xb0, 0xa1, 0x92, 0x83, 0x74, 0x65, 0x56, 0x46, 0x37, 0x28, 0x19, 0x0a, 0xfb, 0xec, 0xdd, 0xce, 0xbf, 0xb0, 0xa1, 0x92, 0x83, 0x74, 0x65])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52])
        my_metadata = bytes([0x6b, 0xec, 0x6c, 0xed, 0x6d, 0xee, 0x6e, 0xef, 0x6f, 0xf0, 0x70, 0xf1, 0x71, 0xf2, 0x72, 0xf3, 0x73, 0xf4, 0x74, 0xf5, 0x75, 0xf6, 0x76, 0xf7, 0x77, 0xf8, 0x78, 0xf9, 0x79, 0xfa, 0x7a, 0xfb, 0x7b, 0xfc, 0x7c, 0xfd, 0x7d, 0xfe, 0x7e, 0xff, 0x7f, 0x00, 0x80, 0x01, 0x81, 0x02, 0x82, 0x03, 0x83, 0x04, 0x84, 0x05, 0x85, 0x06, 0x86, 0x07, 0x87, 0x08, 0x88, 0x09, 0x89, 0x0a, 0x8a, 0x0b])
        output_ciphertexts = [bytes([0xc3, 0x48, 0x34, 0xc4, 0x08, 0x44, 0x1e, 0x4e, 0x8c, 0x86, 0x5b, 0xe7, 0xf7, 0x3b, 0xf3, 0x7e, 0xfe, 0x2e, 0x2d, 0x7f, 0xe9, 0xab, 0x94, 0x6e, 0x29, 0x1c, 0x73, 0xba, 0x01, 0xe1, 0xa4, 0x4c]),
                              bytes([0xd0, 0xd0, 0xd9, 0xec, 0xba, 0x4c, 0x0f, 0x27, 0xf5, 0x8e, 0xc2, 0x72, 0x60, 0x1b, 0x44, 0x87, 0x74, 0x37, 0xd0, 0x37, 0x80, 0xaa, 0xa7, 0x48, 0xb0, 0x85, 0xed, 0x60, 0x6a, 0x9d, 0x52, 0xf8]),
                              bytes([0x49, 0x4b, 0x01, 0x04, 0x6f, 0xde, 0x73, 0xc7, 0x22, 0x0e, 0x93, 0x82, 0x98, 0x19, 0xe2, 0x70, 0xef, 0xc7, 0x45, 0x7b, 0x3f, 0xbc, 0xf1, 0x73, 0xfb, 0x60, 0x64, 0x9f, 0x02, 0x64, 0x5e, 0xc2])]
        output_tags = [bytes([0x3e, 0x1e, 0xab, 0xc2, 0xb1, 0xa1, 0x02, 0x8a, 0x8a, 0x23, 0x41, 0xf9, 0x8b, 0xa5, 0xbb, 0x56]),
                       bytes([0x6c, 0x1c, 0x83, 0x5b, 0xdc, 0xae, 0x1e, 0x78, 0xfb, 0xd9, 0xb1, 0xc4, 0xbb, 0xbe, 0xd2, 0xe1]),
                       bytes([0x71, 0xf0, 0x0b, 0x79, 0x4d, 0x9d, 0x40, 0x00, 0x51, 0x56, 0xdc, 0xd3, 0xf2, 0xbc, 0x92, 0x41])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_64_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 64 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen   512, ADLen   512 (in bits)
        my_key = bytes([0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42])
        my_nonce = bytes([0x17, 0x08, 0xf9, 0xea, 0xdb, 0xcc, 0xbd, 0xae, 0x9f, 0x90, 0x81, 0x72, 0x63, 0x54, 0x45, 0x36, 0x26, 0x17, 0x08, 0xf9, 0xea, 0xdb, 0xcc, 0xbd, 0xae, 0x9f, 0x90, 0x81, 0x72, 0x63, 0x54, 0x45])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32])
        my_metadata = bytes([0x4b, 0xcc, 0x4c, 0xcd, 0x4d, 0xce, 0x4e, 0xcf, 0x4f, 0xd0, 0x50, 0xd1, 0x51, 0xd2, 0x52, 0xd3, 0x53, 0xd4, 0x54, 0xd5, 0x55, 0xd6, 0x56, 0xd7, 0x57, 0xd8, 0x58, 0xd9, 0x59, 0xda, 0x5a, 0xdb, 0x5b, 0xdc, 0x5c, 0xdd, 0x5d, 0xde, 0x5e, 0xdf, 0x5f, 0xe0, 0x60, 0xe1, 0x61, 0xe2, 0x62, 0xe3, 0x63, 0xe4, 0x64, 0xe5, 0x65, 0xe6, 0x66, 0xe7, 0x67, 0xe8, 0x68, 0xe9, 0x69, 0xea, 0x6a, 0xeb])
        output_ciphertexts = [bytes([0xfe, 0x03, 0xa0, 0xbb, 0x60, 0x45, 0x16, 0x57, 0xa3, 0x82, 0x57, 0xdb, 0x42, 0xdc, 0x75, 0x58, 0x59, 0x95, 0x5d, 0xa4, 0x06, 0x96, 0x40, 0x77, 0x6f, 0xd8, 0x82, 0xb8, 0xe1, 0xd1, 0x34, 0x6d, 0x05, 0x70, 0xb3, 0x1c, 0x8e, 0x79, 0xc6, 0x78, 0xca, 0x5e, 0x5f, 0xee, 0xb5, 0x29, 0x87, 0x1e, 0x05, 0x5b, 0x7c, 0xf3, 0x31, 0x30, 0xf1, 0xe3, 0x47, 0x7c, 0xeb, 0xfc, 0x77, 0xbd, 0xb1, 0x12]),
                              bytes([0x8c, 0x49, 0xce, 0x43, 0xb1, 0x63, 0xe0, 0x99, 0xc0, 0x0f, 0x21, 0xa2, 0xc2, 0x59, 0xc9, 0x7b, 0x82, 0x93, 0x40, 0xcb, 0x3c, 0xf2, 0xa1, 0x3a, 0x24, 0x51, 0x30, 0x07, 0x3f, 0x5f, 0xf6, 0x71, 0xec, 0x7e, 0x95, 0x15, 0x76, 0xd2, 0x7d, 0xed, 0x8f, 0xfe, 0x36, 0xcd, 0xee, 0x79, 0x3f, 0x9d, 0x9d, 0xab, 0xeb, 0xc7, 0xc9, 0x7f, 0x44, 0xe1, 0xe3, 0xf4, 0x9e, 0x4d, 0x81, 0x32, 0x97, 0xad]),
                              bytes([0x7f, 0xe7, 0x66, 0xb6, 0x92, 0xed, 0x3a, 0x65, 0xfc, 0x80, 0x2c, 0x1e, 0xd7, 0x2f, 0x81, 0xb1, 0x84, 0xb1, 0xf4, 0x67, 0x8d, 0xc1, 0xd1, 0x20, 0xd4, 0xd3, 0x9f, 0x02, 0x80, 0x91, 0x52, 0x38, 0x2e, 0x0c, 0x66, 0x25, 0xa7, 0x6a, 0xe9, 0x2b, 0x52, 0x38, 0x7d, 0x87, 0x56, 0x80, 0x17, 0xe6, 0x79, 0x12, 0xb5, 0xad, 0x91, 0x2c, 0x65, 0x18, 0x56, 0xa4, 0x93, 0x7f, 0xfa, 0xca, 0xf5, 0x10])]
        output_tags = [bytes([0x05, 0x67, 0x8b, 0x8e, 0x06, 0x67, 0x6f, 0xd4, 0xdf, 0x63, 0x7a, 0x21, 0x51, 0x04, 0x73, 0xe2]),
                       bytes([0xc2, 0x80, 0x37, 0x40, 0x95, 0xb1, 0x74, 0x57, 0xea, 0xe4, 0x39, 0x00, 0x65, 0x7f, 0x3c, 0x26]),
                       bytes([0xbc, 0xae, 0x72, 0x35, 0xc1, 0x53, 0xe8, 0x18, 0x4c, 0x14, 0x0b, 0xb1, 0x48, 0x38, 0xe3, 0x2c])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_256_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 256 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  2048, ADLen   512 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_nonce = bytes([0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85, 0x76, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b])
        output_ciphertexts = [bytes([0xc9, 0x03, 0xaa, 0x23, 0x02, 0x81, 0x30, 0xaf, 0x80, 0x4f, 0xb3, 0x7e, 0xc1, 0xdf, 0x8e, 0xf0, 0x5c, 0xad, 0xc7, 0xec, 0x70, 0xf7, 0x25, 0xc7, 0x52, 0x74, 0x70, 0xf5, 0xe4, 0x8b, 0xe5, 0xf2, 0xcf, 0xa9, 0x10, 0xe1, 0x14, 0x5a, 0xb9, 0x2b, 0x0a, 0x2e, 0x9f, 0x33, 0x58, 0xa1, 0xf1, 0xd2, 0x57, 0xbb, 0xc2, 0x9a, 0x53, 0x3e, 0x9f, 0xf1, 0x9e, 0xc3, 0x9f, 0x79, 0x55, 0xff, 0xed, 0x78, 0x7b, 0x8f, 0x41, 0xa3, 0x17, 0xcb, 0xcc, 0x14, 0x2c, 0xc9, 0x8e, 0x5b, 0x17, 0x50, 0x4c, 0xa9, 0x7e, 0x6d, 0x2e, 0xa8, 0x11, 0xf8, 0xac, 0xda, 0x31, 0x43, 0xa6, 0x19, 0xed, 0x26, 0x18, 0x33, 0xa8, 0x94, 0x09, 0x63, 0x3f, 0x33, 0xbb, 0x98, 0xc3, 0xf1, 0x27, 0x48, 0xaa, 0x21, 0xff, 0x4f, 0x5e, 0xf0, 0x77, 0x6a, 0xe5, 0xcf, 0x62, 0xcc, 0xb8, 0x25, 0xe7, 0xaf, 0xc1, 0xbc, 0xe6, 0xac, 0xd3, 0xd8, 0x23, 0xc4, 0x63, 0xbb, 0xdf, 0x4e, 0x77, 0x18, 0xfc, 0x7e, 0xb9, 0xe5, 0x23, 0xb3, 0xdc, 0x30, 0x15, 0x4c, 0x42, 0x06, 0x19, 0x1c, 0x9e, 0xec, 0x5b, 0x57, 0xbd, 0xe8, 0x48, 0x2a, 0x42, 0xf7, 0x19, 0xad, 0x3a, 0x02, 0xa6, 0xf0, 0xa5, 0x25, 0xb7, 0x9c, 0x3b, 0x09, 0xa2, 0x60, 0x70, 0xe6, 0x99, 0xcb, 0x38, 0x6a, 0xcb, 0x26, 0x2f, 0xee, 0x6d, 0x5a, 0x72, 0xdd, 0x2e, 0x0e, 0x3f, 0x0a, 0xdf, 0x02, 0x6d, 0xc6, 0xa8, 0xc0, 0x96, 0x3d, 0xf8, 0x9d, 0x75, 0x6e, 0x5b, 0x3e, 0xa5, 0x8d, 0xe9, 0x18, 0xf3, 0xae, 0xd4, 0x77, 0x61, 0x75, 0x83, 0x95, 0x3b, 0x72, 0x96, 0xb6, 0xc5, 0x84, 0x58, 0x4f, 0x5d, 0x23, 0xc8, 0xd7, 0xc2, 0xd8, 0xed, 0x47, 0x76, 0x09, 0x28, 0xef, 0x1b, 0x1a, 0x89, 0x35, 0xa8, 0x82, 0x7d, 0xdf, 0x15, 0xa4, 0x91, 0x6b, 0x05, 0x2f, 0x1f, 0x3b]),
                              bytes([0x71, 0xc6, 0xd0, 0x45, 0x10, 0xc7, 0xa9, 0x3e, 0x60, 0xb3, 0x3d, 0x1f, 0x91, 0x35, 0x77, 0xe3, 0x0f, 0xf5, 0x47, 0x4a, 0xf1, 0x1c, 0xfd, 0xe4, 0x11, 0x14, 0x2a, 0x78, 0xc4, 0x5f, 0x25, 0x19, 0x58, 0x03, 0x0a, 0xae, 0xf0, 0xdb, 0xdb, 0xab, 0xf4, 0x57, 0xd2, 0x5d, 0xbe, 0x9d, 0xe7, 0x78, 0xe2, 0x4c, 0x8d, 0x32, 0xe3, 0xb6, 0xab, 0x3f, 0x41, 0x57, 0x98, 0x28, 0x7f, 0x6d, 0x01, 0x7d, 0xdf, 0xc6, 0x5b, 0xbc, 0x31, 0x14, 0x9d, 0xd6, 0xa4, 0x8a, 0x19, 0x4d, 0xba, 0xb0, 0xf2, 0x3a, 0x4b, 0xb7, 0xa2, 0x12, 0xdf, 0x16, 0x7c, 0xe0, 0x39, 0xfb, 0x47, 0x99, 0x1f, 0x1a, 0xf4, 0x01, 0x83, 0x46, 0x08, 0x91, 0x83, 0x88, 0x79, 0xc2, 0xcd, 0x78, 0x4e, 0xf4, 0x38, 0xf4, 0x8e, 0xa2, 0xaa, 0x17, 0x47, 0x3e, 0xfe, 0x7c, 0x3b, 0x84, 0x89, 0xfb, 0xc3, 0xac, 0xe3, 0x41, 0x07, 0x5a, 0x8f, 0x95, 0x67, 0xb8, 0x5e, 0x24, 0x8c, 0xc3, 0xc9, 0x92, 0xe9, 0x12, 0x34, 0x94, 0x37, 0x5a, 0x80, 0xa1, 0x5d, 0x05, 0x8b, 0xcd, 0x41, 0x6a, 0x72, 0xf9, 0xd2, 0x75, 0x6e, 0x37, 0x18, 0xef, 0x7f, 0x37, 0x6c, 0xd4, 0x17, 0xc0, 0xbc, 0xa3, 0x3e, 0xf5, 0x3b, 0xc0, 0x1b, 0xa6, 0xb0, 0xcb, 0xc8, 0x01, 0x04, 0x89, 0xce, 0x19, 0xc7, 0x06, 0x94, 0x9a, 0x23, 0xfa, 0x41, 0xab, 0xf5, 0x6a, 0x9c, 0x07, 0xbd, 0xb2, 0x55, 0x9e, 0x34, 0xa6, 0x81, 0x31, 0x4a, 0x18, 0xd5, 0x95, 0xb0, 0x32, 0xd0, 0xf8, 0x1f, 0xd7, 0x9c, 0x35, 0x68, 0xc3, 0xd5, 0xd8, 0xbf, 0x4a, 0x86, 0x96, 0xdb, 0xf6, 0x58, 0x11, 0x01, 0x55, 0x7d, 0xf3, 0xec, 0xa2, 0x5b, 0x22, 0x4c, 0x8f, 0x68, 0x05, 0x8c, 0xc0, 0x48, 0x43, 0x97, 0x46, 0xdc, 0xdb, 0xc4, 0x96, 0xaf, 0x46, 0xf0, 0x01, 0x12, 0x1b, 0x18, 0x9f]),
                              bytes([0xb2, 0x4d, 0x36, 0x5b, 0x5d, 0xe5, 0xbe, 0x06, 0x16, 0x05, 0xa1, 0x7f, 0x4f, 0x89, 0x70, 0x95, 0xe9, 0xec, 0xbc, 0x86, 0x9f, 0x94, 0x1d, 0xa5, 0xff, 0x3f, 0x71, 0xfd, 0x7e, 0xde, 0x89, 0xd5, 0x7f, 0x2b, 0x02, 0x11, 0x7a, 0xe6, 0x94, 0x5e, 0x2b, 0x0c, 0x5e, 0x01, 0x7e, 0xc0, 0xda, 0x1a, 0x85, 0x5d, 0x39, 0x62, 0xfd, 0x64, 0x42, 0xc5, 0xf1, 0x19, 0x36, 0xb2, 0x66, 0x80, 0x48, 0xa9, 0x17, 0x58, 0xff, 0xe4, 0xdf, 0xe7, 0xb0, 0x7c, 0x5a, 0x9b, 0x0f, 0x77, 0x84, 0xdf, 0xda, 0xf5, 0xa3, 0xa9, 0xbc, 0x43, 0x3b, 0x85, 0xec, 0x64, 0xb6, 0x35, 0x67, 0x32, 0x27, 0x5c, 0x7e, 0x69, 0xf8, 0xb7, 0x4e, 0x0c, 0x60, 0x6e, 0x05, 0x20, 0x2b, 0xf0, 0x85, 0x75, 0xe7, 0x79, 0x7c, 0xcc, 0xda, 0x31, 0x8e, 0x76, 0x51, 0x4b, 0x17, 0xd7, 0xc6, 0x1d, 0xf8, 0xac, 0x08, 0x6a, 0x94, 0xe3, 0xef, 0x65, 0xb5, 0xc1, 0x7e, 0x96, 0xb7, 0x63, 0xb5, 0x2f, 0xf1, 0xc4, 0x4c, 0xa0, 0x9a, 0x37, 0x1b, 0x3b, 0xeb, 0x78, 0xbf, 0x97, 0x53, 0x70, 0x74, 0x10, 0x0d, 0x7e, 0x22, 0x26, 0x8f, 0x8f, 0xd5, 0x13, 0x41, 0x95, 0xd1, 0x30, 0x82, 0xdd, 0x54, 0xf0, 0x6f, 0xda, 0x52, 0xa8, 0x6b, 0x5b, 0xda, 0x85, 0xf4, 0xf7, 0x4b, 0x09, 0x9f, 0xcf, 0xcd, 0x57, 0x12, 0x78, 0x2d, 0x9a, 0xd5, 0x6d, 0x5d, 0xeb, 0x99, 0x5c, 0x3d, 0x1f, 0x66, 0xee, 0x6b, 0x7a, 0x2b, 0x5f, 0x76, 0x00, 0x80, 0x12, 0x3f, 0x70, 0x4f, 0x4c, 0x20, 0x07, 0xd9, 0x12, 0x17, 0xae, 0xe4, 0x66, 0x45, 0x5e, 0xb1, 0x24, 0x21, 0x0b, 0xdc, 0x14, 0x48, 0x00, 0xd9, 0x85, 0x43, 0xaf, 0x83, 0xd3, 0x42, 0xaf, 0x1c, 0x68, 0x5e, 0xcd, 0x5a, 0xff, 0x89, 0x42, 0x89, 0x4f, 0xb3, 0x4e, 0x95, 0x0b, 0x85, 0x04, 0x9c, 0x66])]
        output_tags = [bytes([0x86, 0x1d, 0x5d, 0xcd, 0x08, 0xe3, 0xcb, 0x07, 0x66, 0x5b, 0xb2, 0x05, 0xc2, 0xa0, 0xbc, 0x43]),
                       bytes([0xdf, 0x97, 0x4f, 0xca, 0x63, 0x73, 0xd3, 0xb3, 0xcd, 0xa1, 0x37, 0xba, 0x5a, 0xd9, 0x51, 0x95]),
                       bytes([0xf2, 0x5d, 0x75, 0x07, 0xf8, 0xa7, 0xa1, 0x31, 0xe1, 0xe6, 0xae, 0xc4, 0xde, 0x74, 0x65, 0xaf])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_199_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 199 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1592, ADLen   512 (in bits)
        my_key = bytes([0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2])
        my_nonce = bytes([0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf])
        my_message = bytes([0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9])
        my_metadata = bytes([0xec, 0xad, 0x6e, 0x2f, 0xef, 0xb0, 0x71, 0x32, 0xf2, 0xb3, 0x74, 0x35, 0xf5, 0xb6, 0x77, 0x38, 0xf8, 0xb9, 0x7a, 0x3b, 0xfb, 0xbc, 0x7d, 0x3e, 0xfe, 0xbf, 0x80, 0x41, 0x01, 0xc2, 0x83, 0x44, 0x04, 0xc5, 0x86, 0x47, 0x07, 0xc8, 0x89, 0x4a, 0x0a, 0xcb, 0x8c, 0x4d, 0x0d, 0xce, 0x8f, 0x50, 0x10, 0xd1, 0x92, 0x53, 0x13, 0xd4, 0x95, 0x56, 0x16, 0xd7, 0x98, 0x59, 0x19, 0xda, 0x9b, 0x5c])
        output_ciphertexts = [bytes([0x8e, 0x2a, 0x2c, 0x61, 0x19, 0x1c, 0x76, 0x6f, 0xd0, 0x22, 0xad, 0x34, 0x10, 0xf5, 0x84, 0xd5, 0xf1, 0x3c, 0x0c, 0x66, 0xcc, 0x0f, 0x90, 0x7a, 0x88, 0x20, 0xa1, 0x3d, 0x2a, 0x07, 0x7a, 0x2f, 0x1a, 0xbc, 0xac, 0x6b, 0x45, 0xc5, 0x74, 0xc0, 0xeb, 0x23, 0xf6, 0xf9, 0xfa, 0xf5, 0xcd, 0x8e, 0xf2, 0xd8, 0xf4, 0x89, 0xfb, 0x62, 0x7e, 0x49, 0x44, 0x9e, 0x7a, 0x17, 0x9e, 0x60, 0x92, 0x6a, 0x22, 0x54, 0x57, 0xf7, 0x37, 0x95, 0x59, 0x8a, 0xbb, 0x99, 0xc9, 0xcf, 0x7c, 0x01, 0x96, 0x77, 0xc6, 0x36, 0xaf, 0x42, 0xbc, 0x38, 0xeb, 0x9b, 0xeb, 0xfe, 0x59, 0x27, 0xde, 0x4c, 0x3a, 0xa9, 0x66, 0x47, 0xd5, 0x23, 0x7a, 0xb4, 0x05, 0xc0, 0x40, 0xca, 0xff, 0xf3, 0x1d, 0x8b, 0xa0, 0x06, 0xc7, 0xa7, 0xa8, 0x57, 0xca, 0xf8, 0x6e, 0x0c, 0xc1, 0xc7, 0x41, 0xe8, 0xa2, 0xf1, 0x91, 0x8c, 0xf5, 0x69, 0x49, 0x3a, 0xc4, 0x30, 0x5e, 0x3d, 0x78, 0xd8, 0x89, 0xda, 0xb1, 0x03, 0x38, 0x12, 0x28, 0x64, 0x4c, 0x1b, 0x4d, 0x03, 0xc3, 0xad, 0xf2, 0xf3, 0x4b, 0xb0, 0x28, 0xce, 0xab, 0x45, 0xe7, 0x15, 0x60, 0x42, 0x84, 0x20, 0x07, 0xa5, 0xd7, 0xec, 0x2e, 0x1c, 0xf0, 0x8c, 0xa7, 0x09, 0x6f, 0x07, 0x29, 0xb9, 0x62, 0x02, 0x18, 0x49, 0xa1, 0x87, 0x26, 0xcc, 0x4c, 0x51, 0x9a, 0x62, 0xcc, 0x42, 0x99, 0xfd, 0x5e, 0x33, 0x31]),
                              bytes([0x7f, 0x4c, 0x3b, 0x00, 0xb8, 0xae, 0x6c, 0x2f, 0x44, 0x34, 0xeb, 0xca, 0xb3, 0x89, 0xbf, 0x37, 0xdc, 0xb8, 0xcc, 0x79, 0xa5, 0xea, 0xaf, 0xa2, 0xc4, 0x9b, 0x4f, 0x6c, 0xdc, 0x12, 0x40, 0xce, 0xa9, 0x9b, 0xc4, 0x7e, 0xf7, 0x5c, 0x3d, 0x94, 0x02, 0xa2, 0x12, 0x12, 0x18, 0x62, 0x31, 0xea, 0xab, 0xd4, 0x8c, 0x07, 0x20, 0x2e, 0xd2, 0x2e, 0xcd, 0x23, 0x7e, 0xb9, 0xee, 0x4d, 0x8c, 0x85, 0x79, 0xf0, 0x0e, 0x09, 0x43, 0x8c, 0x19, 0x1c, 0x90, 0xd8, 0x4b, 0xfb, 0x54, 0xc4, 0x53, 0x83, 0x4a, 0x85, 0x89, 0x8d, 0xdd, 0xf7, 0x12, 0x4e, 0x54, 0xc6, 0x55, 0x8e, 0xee, 0x58, 0x07, 0x3c, 0xef, 0x57, 0x2a, 0x3c, 0xe1, 0x73, 0x83, 0xe1, 0xb8, 0xf3, 0x83, 0xa6, 0x84, 0x30, 0xed, 0xe1, 0xf3, 0x87, 0x4c, 0xf7, 0xda, 0xbe, 0x86, 0xd4, 0xa3, 0x0e, 0xf6, 0xe3, 0xde, 0xf6, 0x59, 0xd2, 0x77, 0x39, 0x14, 0x3c, 0xf4, 0xe6, 0xa3, 0xca, 0xc4, 0xa7, 0x92, 0x2d, 0x8b, 0x66, 0xee, 0x60, 0xad, 0x65, 0x50, 0x22, 0x36, 0x71, 0x3a, 0x0c, 0x71, 0x89, 0x22, 0x96, 0x6f, 0xea, 0x40, 0xf1, 0x07, 0x0a, 0x65, 0x05, 0xfa, 0x67, 0x9a, 0x24, 0xc0, 0xd5, 0xb2, 0xf5, 0x2c, 0x78, 0x13, 0x97, 0xe4, 0x33, 0xfa, 0x7d, 0xb2, 0x83, 0x4a, 0x11, 0x4f, 0x13, 0x7f, 0x39, 0x1e, 0x9c, 0x9d, 0xd1, 0x94, 0xaa, 0x47, 0xa0, 0xee, 0x50, 0x34]),
                              bytes([0x3f, 0x8a, 0x8f, 0x98, 0x4d, 0x24, 0x7f, 0x64, 0x26, 0xe6, 0x6c, 0xd9, 0xe5, 0x85, 0x79, 0x95, 0x37, 0x91, 0x36, 0x57, 0x75, 0x44, 0x4b, 0x55, 0x38, 0x43, 0xf7, 0xad, 0x3e, 0xa3, 0x7e, 0x4a, 0xc6, 0x5a, 0x9e, 0xea, 0xa0, 0x98, 0x91, 0xdd, 0x8b, 0x34, 0xf2, 0x7d, 0xaf, 0x11, 0x02, 0xd6, 0xc9, 0x02, 0x11, 0x8b, 0x4b, 0x1f, 0xb7, 0xf5, 0xe7, 0x27, 0xd1, 0xe7, 0xb1, 0x96, 0x1b, 0xb7, 0x2c, 0x7c, 0xcb, 0x74, 0x5c, 0x8f, 0x05, 0x5a, 0x52, 0x59, 0x6d, 0xac, 0x57, 0x04, 0xd8, 0x23, 0x8d, 0x54, 0x4f, 0x43, 0x7f, 0xc3, 0x64, 0x8c, 0x5e, 0x59, 0x9b, 0x02, 0xfd, 0x36, 0x9e, 0x05, 0xd4, 0xe5, 0xc2, 0x1b, 0x57, 0x25, 0x54, 0x5f, 0x29, 0x2c, 0xce, 0x54, 0x06, 0xf3, 0x80, 0x6d, 0xb7, 0xce, 0xc0, 0x51, 0x42, 0x94, 0x41, 0xbb, 0xda, 0x38, 0xb0, 0xae, 0xa7, 0xa8, 0x07, 0xea, 0xc2, 0x2f, 0x3c, 0xbb, 0x56, 0xd4, 0xe0, 0x02, 0xc2, 0x94, 0x4e, 0xa5, 0x79, 0xe0, 0x5d, 0x24, 0x8f, 0x4c, 0xb7, 0x57, 0xe9, 0xe5, 0x43, 0x51, 0xbf, 0x36, 0xad, 0x11, 0x1e, 0x6f, 0xe5, 0x25, 0x45, 0x82, 0xd8, 0x03, 0x8d, 0x88, 0xdd, 0xa5, 0xc2, 0x61, 0xe8, 0x70, 0xe0, 0xa0, 0x1c, 0x20, 0x11, 0x7a, 0x33, 0x0e, 0x15, 0xd3, 0x0d, 0x82, 0xf0, 0x2b, 0xae, 0x30, 0x8a, 0x21, 0xcc, 0x15, 0xa7, 0xf6, 0xc7, 0xb4, 0x92, 0x88, 0xb8])]
        output_tags = [bytes([0xfc, 0xa9, 0x2f, 0x3a, 0xb8, 0x21, 0xf4, 0x38, 0x22, 0x30, 0x85, 0xff, 0x2c, 0x8c, 0x0a, 0x96]),
                       bytes([0xad, 0x57, 0x67, 0x07, 0x61, 0x1a, 0xb0, 0xa6, 0xa9, 0x1d, 0xdd, 0xe1, 0xad, 0x50, 0xd1, 0x2a]),
                       bytes([0x12, 0x49, 0x4c, 0x7e, 0x84, 0x9a, 0x69, 0x1f, 0xbb, 0x95, 0xa3, 0x2a, 0x14, 0xbf, 0xe3, 0xcd])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_200_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 200 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1600, ADLen   512 (in bits)
        my_key = bytes([0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a])
        my_nonce = bytes([0x4f, 0x40, 0x31, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5e, 0x4f, 0x40, 0x31, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d])
        my_message = bytes([0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69])
        my_metadata = bytes([0x83, 0x04, 0x84, 0x05, 0x85, 0x06, 0x86, 0x07, 0x87, 0x08, 0x88, 0x09, 0x89, 0x0a, 0x8a, 0x0b, 0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23])
        output_ciphertexts = [bytes([0x38, 0xfb, 0x2c, 0x49, 0x3a, 0x1b, 0x85, 0x5c, 0x50, 0xf3, 0x58, 0xb1, 0xd4, 0x5d, 0x52, 0xce, 0xd4, 0xab, 0xdc, 0x43, 0x61, 0x6d, 0xce, 0xc3, 0xdd, 0x09, 0x10, 0x86, 0x8a, 0xd3, 0x7c, 0x51, 0xb5, 0x67, 0xc9, 0x5b, 0x24, 0x74, 0x63, 0xe2, 0x5b, 0x0e, 0xeb, 0x35, 0xf4, 0xba, 0x38, 0x08, 0x02, 0x18, 0x07, 0x54, 0xd5, 0x51, 0x72, 0xee, 0xbe, 0x73, 0x38, 0x43, 0xf1, 0xea, 0xc5, 0x03, 0x2a, 0x7f, 0x9d, 0xd5, 0x22, 0x19, 0xe2, 0x62, 0x48, 0x6e, 0x11, 0x45, 0x5e, 0x70, 0x4e, 0x41, 0x6a, 0x51, 0x02, 0x69, 0xb2, 0x1a, 0xb8, 0xcb, 0x88, 0xa9, 0xc8, 0x2e, 0x56, 0x01, 0x86, 0xfa, 0xb4, 0x37, 0xa8, 0xe2, 0x5d, 0xb0, 0xa7, 0xd8, 0xef, 0xba, 0x58, 0xce, 0x33, 0x8d, 0x93, 0x13, 0x3f, 0x3d, 0x69, 0x6c, 0x66, 0xbc, 0xa2, 0xd0, 0xfd, 0xdc, 0x1d, 0xce, 0xe4, 0xd5, 0x18, 0x02, 0xb9, 0x70, 0xeb, 0x3f, 0x41, 0x7f, 0x01, 0x53, 0x11, 0xf9, 0x90, 0xbb, 0xd0, 0x94, 0xec, 0x7d, 0x63, 0xdd, 0x03, 0xc3, 0x79, 0x06, 0xca, 0x17, 0x47, 0xcb, 0xe5, 0x29, 0xcc, 0xc8, 0xbd, 0x62, 0xba, 0x70, 0xb8, 0xac, 0xd7, 0x17, 0x6e, 0x57, 0x59, 0x8f, 0x59, 0x3c, 0x45, 0x02, 0xb9, 0x40, 0x6d, 0x56, 0xb7, 0x20, 0x1e, 0x1d, 0x91, 0xbc, 0x90, 0xa6, 0x57, 0x0a, 0x44, 0x45, 0x13, 0x7b, 0xcb, 0x83, 0x4f, 0x76, 0xd6, 0xe4, 0x39, 0xb1]),
                              bytes([0x73, 0x8f, 0x23, 0xb2, 0xa1, 0x70, 0x12, 0x9f, 0xc5, 0xef, 0x25, 0xe5, 0x7f, 0x84, 0xbd, 0x7d, 0x6b, 0x2e, 0xed, 0x23, 0x9e, 0x71, 0x91, 0xbd, 0xe2, 0x30, 0xbb, 0xcc, 0xb8, 0xc4, 0x97, 0xeb, 0x2f, 0xb4, 0xee, 0xad, 0xdb, 0xff, 0x88, 0x4a, 0xe5, 0xe9, 0xc6, 0xae, 0xdc, 0x46, 0xf7, 0xba, 0x65, 0x7b, 0x7a, 0xa3, 0x2b, 0x19, 0x75, 0x21, 0xfb, 0xc9, 0x92, 0x4b, 0x7d, 0x36, 0xe4, 0x11, 0xa8, 0x85, 0x84, 0x2e, 0x1a, 0x39, 0x89, 0x2f, 0xef, 0xf0, 0xca, 0xa2, 0xef, 0xe6, 0x6c, 0x64, 0xbd, 0xdc, 0x81, 0xe4, 0xd4, 0x78, 0xcb, 0x67, 0x43, 0xc8, 0x43, 0x3c, 0x26, 0x87, 0x70, 0xd0, 0xb3, 0x5d, 0x4d, 0x68, 0x70, 0x5b, 0x5d, 0xcf, 0x71, 0x36, 0x3b, 0xc1, 0x62, 0x0d, 0xd7, 0x7f, 0xac, 0xa6, 0x95, 0x90, 0x30, 0x5e, 0x71, 0xa5, 0x2f, 0x92, 0x1c, 0xd7, 0x96, 0x15, 0xde, 0xaf, 0xb4, 0xf4, 0xbb, 0x83, 0x4f, 0x44, 0x9e, 0x79, 0x26, 0x36, 0x5e, 0x07, 0x61, 0x03, 0xf4, 0xbd, 0x83, 0x83, 0x0c, 0x39, 0xde, 0x87, 0x6d, 0x27, 0xfd, 0x76, 0x9e, 0x28, 0xdf, 0x4d, 0xc3, 0xbb, 0x15, 0x6f, 0x54, 0xa0, 0xb8, 0x38, 0xfb, 0xa4, 0x9d, 0x7f, 0x3c, 0x81, 0x89, 0x08, 0x43, 0xde, 0x22, 0xbc, 0x45, 0xed, 0xb5, 0x61, 0xc1, 0x55, 0x0b, 0xd1, 0xa4, 0x5c, 0x49, 0xb1, 0xa9, 0x44, 0x9a, 0xe6, 0x52, 0x29, 0x9e, 0xa5, 0x34, 0xf4]),
                              bytes([0x26, 0x2b, 0x9d, 0x50, 0x81, 0xeb, 0xca, 0xf9, 0xab, 0xf6, 0x4f, 0x4e, 0xb6, 0x09, 0xd4, 0x68, 0x6b, 0x5b, 0xe1, 0x80, 0x6e, 0x87, 0x06, 0x10, 0x13, 0x9d, 0x4c, 0xde, 0xa9, 0xdd, 0x5f, 0x54, 0x7f, 0x12, 0x53, 0x38, 0x10, 0xbc, 0xc6, 0x64, 0xfa, 0x29, 0x8d, 0x02, 0xc6, 0x4e, 0x82, 0xbc, 0x9f, 0xad, 0x1e, 0x8b, 0x79, 0x5f, 0x1f, 0x8c, 0xbe, 0x3f, 0x7a, 0xf3, 0x5b, 0x7c, 0x06, 0x83, 0xdb, 0x04, 0xe1, 0x0f, 0x2f, 0x54, 0x68, 0x31, 0xb4, 0x3d, 0x98, 0x3d, 0xdd, 0x9b, 0x7c, 0xcd, 0x93, 0x25, 0x3b, 0xdf, 0xab, 0x96, 0x4d, 0xf1, 0xa1, 0x21, 0x5c, 0xee, 0xc3, 0xe6, 0xd6, 0x31, 0xaa, 0xcd, 0x91, 0xdf, 0x27, 0x22, 0x70, 0x79, 0xc9, 0x8b, 0x4f, 0xa0, 0xb4, 0x59, 0x88, 0x20, 0x98, 0xcd, 0x90, 0x02, 0xab, 0x48, 0xc5, 0xa3, 0x06, 0xd3, 0x00, 0x44, 0x39, 0xab, 0x0d, 0x79, 0xde, 0xf9, 0x2c, 0x62, 0x8b, 0xfc, 0x3e, 0xe0, 0x52, 0xa1, 0xc8, 0x21, 0x64, 0x90, 0xa8, 0x27, 0xe5, 0x16, 0xe7, 0xa8, 0x8f, 0x89, 0x8f, 0x8b, 0x89, 0xd8, 0xe3, 0xba, 0x83, 0x61, 0xef, 0x92, 0xe0, 0x98, 0x8c, 0x5d, 0xba, 0xea, 0x8d, 0xd4, 0x5d, 0x5d, 0xb2, 0xb9, 0x61, 0x66, 0x45, 0x09, 0x36, 0x11, 0x99, 0x83, 0x54, 0x94, 0xa6, 0x23, 0xd9, 0x4e, 0xc9, 0x9a, 0xec, 0xa9, 0x77, 0x67, 0x2a, 0xfd, 0x84, 0xed, 0x79, 0xca, 0xbe, 0x86])]
        output_tags = [bytes([0x53, 0xaa, 0xa5, 0xbe, 0xc2, 0xae, 0x80, 0xfc, 0xe6, 0xd8, 0xd1, 0xc4, 0xbd, 0x14, 0xb9, 0x51]),
                       bytes([0x76, 0x23, 0xb7, 0x1b, 0x5a, 0x38, 0x3d, 0x64, 0x5f, 0xb3, 0x82, 0xa7, 0xf3, 0x1e, 0x7f, 0x70]),
                       bytes([0x1a, 0xe5, 0xaa, 0x02, 0x86, 0xe5, 0x56, 0x3e, 0xd0, 0x72, 0x12, 0x2d, 0x66, 0xba, 0x7e, 0xd0])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_512_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 512 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  4096, ADLen   512 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_nonce = bytes([0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85, 0x76, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b])
        output_ciphertexts = [bytes([0xc9, 0x03, 0xaa, 0x23, 0x02, 0x81, 0x30, 0xaf, 0x80, 0x4f, 0xb3, 0x7e, 0xc1, 0xdf, 0x8e, 0xf0, 0x5c, 0xad, 0xc7, 0xec, 0x70, 0xf7, 0x25, 0xc7, 0x52, 0x74, 0x70, 0xf5, 0xe4, 0x8b, 0xe5, 0xf2, 0xcf, 0xa9, 0x10, 0xe1, 0x14, 0x5a, 0xb9, 0x2b, 0x0a, 0x2e, 0x9f, 0x33, 0x58, 0xa1, 0xf1, 0xd2, 0x57, 0xbb, 0xc2, 0x9a, 0x53, 0x3e, 0x9f, 0xf1, 0x9e, 0xc3, 0x9f, 0x79, 0x55, 0xff, 0xed, 0x78, 0x7b, 0x8f, 0x41, 0xa3, 0x17, 0xcb, 0xcc, 0x14, 0x2c, 0xc9, 0x8e, 0x5b, 0x17, 0x50, 0x4c, 0xa9, 0x7e, 0x6d, 0x2e, 0xa8, 0x11, 0xf8, 0xac, 0xda, 0x31, 0x43, 0xa6, 0x19, 0xed, 0x26, 0x18, 0x33, 0xa8, 0x94, 0x09, 0x63, 0x3f, 0x33, 0xbb, 0x98, 0xc3, 0xf1, 0x27, 0x48, 0xaa, 0x21, 0xff, 0x4f, 0x5e, 0xf0, 0x77, 0x6a, 0xe5, 0xcf, 0x62, 0xcc, 0xb8, 0x25, 0xe7, 0xaf, 0xc1, 0xbc, 0xe6, 0xac, 0xd3, 0xd8, 0x23, 0xc4, 0x63, 0xbb, 0xdf, 0x4e, 0x77, 0x18, 0xfc, 0x7e, 0xb9, 0xe5, 0x23, 0xb3, 0xdc, 0x30, 0x15, 0x4c, 0x42, 0x06, 0x19, 0x1c, 0x9e, 0xec, 0x5b, 0x57, 0xbd, 0xe8, 0x48, 0x2a, 0x42, 0xf7, 0x19, 0xad, 0x3a, 0x02, 0xa6, 0xf0, 0xa5, 0x25, 0xb7, 0x9c, 0x3b, 0x09, 0xa2, 0x60, 0x70, 0xe6, 0x99, 0xcb, 0x38, 0x6a, 0xcb, 0x26, 0x2f, 0xee, 0x6d, 0x5a, 0x72, 0xdd, 0x2e, 0x0e, 0x3f, 0x0a, 0xdf, 0x02, 0x6d, 0xc6, 0xa8, 0xc0, 0x96, 0x3d, 0xf8, 0x9d, 0x75, 0x6e, 0x5b, 0x3e, 0xa5, 0x8d, 0xe9, 0x18, 0xf3, 0xae, 0xd4, 0x77, 0x61, 0x75, 0x83, 0x95, 0x3b, 0x72, 0x96, 0xb6, 0xc5, 0x84, 0x58, 0x4f, 0x5d, 0x23, 0xc8, 0xd7, 0xc2, 0xd8, 0xed, 0x47, 0x76, 0x09, 0x28, 0xef, 0x1b, 0x1a, 0x89, 0x35, 0xa8, 0x82, 0x7d, 0xdf, 0x15, 0xa4, 0x91, 0x6b, 0x05, 0x2f, 0x1f, 0x3b, 0xb9, 0xc0, 0xf8, 0xce, 0xbd, 0x4b, 0x80, 0x93, 0xc8, 0xd5, 0xe6, 0x47, 0xd4, 0x57, 0x90, 0xb5, 0x17, 0xe2, 0xf2, 0x19, 0x08, 0x75, 0xc3, 0xb1, 0xdc, 0xa9, 0x07, 0xda, 0x28, 0x79, 0xb5, 0x1f, 0x26, 0xa6, 0x53, 0x6a, 0x62, 0xe8, 0x9a, 0x20, 0x43, 0xa9, 0xd7, 0x8b, 0xd4, 0xda, 0x1e, 0xec, 0xef, 0x11, 0x83, 0x03, 0xdf, 0xb8, 0x79, 0x6a, 0xa3, 0x56, 0xac, 0xd8, 0xef, 0xf4, 0x4d, 0xa1, 0x5b, 0xd4, 0xb5, 0x0d, 0xdf, 0xc9, 0x10, 0xf4, 0xb2, 0x7c, 0x78, 0x64, 0x82, 0x17, 0x0d, 0x5e, 0x05, 0xb4, 0x18, 0xa0, 0x9a, 0xa8, 0x9f, 0xe8, 0x31, 0x87, 0x03, 0x91, 0x6c, 0x0b, 0x1a, 0x37, 0x69, 0x9f, 0x4b, 0x7b, 0xb7, 0xdb, 0xd4, 0xca, 0x2b, 0x57, 0x96, 0xef, 0x12, 0x2f, 0x96, 0xa4, 0x56, 0x0b, 0xd5, 0x02, 0xbe, 0x25, 0x57, 0x2b, 0x4e, 0xf3, 0x04, 0x90, 0x1b, 0x1e, 0xf6, 0xa6, 0x02, 0x55, 0xf8, 0x47, 0x67, 0xc3, 0xcc, 0x7f, 0x35, 0xbb, 0x00, 0x89, 0x40, 0x89, 0x96, 0xc6, 0xe9, 0x1e, 0xfe, 0x8a, 0x0f, 0x29, 0x0e, 0x5d, 0xcd, 0x2a, 0xcd, 0x2b, 0xb1, 0xdb, 0x8e, 0xa6, 0xb9, 0x0a, 0xe7, 0xa5, 0x80, 0x0e, 0xa8, 0xf2, 0xcf, 0x23, 0x0b, 0x9c, 0x83, 0xbd, 0xf9, 0x44, 0x27, 0x72, 0x0b, 0xbf, 0x8c, 0x3c, 0x8e, 0xe3, 0xb0, 0x98, 0xbb, 0xd8, 0x17, 0x27, 0x3e, 0x68, 0xf9, 0xf3, 0x89, 0x00, 0xbf, 0x39, 0x14, 0xba, 0x34, 0x39, 0xd8, 0x22, 0x19, 0x4d, 0x91, 0xf9, 0xb7, 0x19, 0xe2, 0x2f, 0x66, 0xc8, 0xbc, 0x72, 0x84, 0x5f, 0xfb, 0x18, 0x17, 0xd8, 0xea, 0xa4, 0x4a, 0x17, 0x01, 0x01, 0x9e, 0xb3, 0x47, 0x95, 0x09, 0x2c, 0xf2, 0xe0, 0x68, 0xa2, 0xd8, 0x08, 0xcc, 0xd3, 0x95, 0xe2, 0x3a, 0x90, 0xa7, 0xfb, 0x08, 0xd1, 0x9e, 0x83, 0xf9, 0x5c, 0xa3, 0xa1]),
                              bytes([0xf4, 0xe0, 0xa7, 0x1b, 0x98, 0x3d, 0x08, 0x78, 0x55, 0x3f, 0x83, 0x09, 0x31, 0xe9, 0x61, 0x10, 0xe5, 0x94, 0x80, 0xd2, 0xae, 0x14, 0xe8, 0x19, 0x99, 0x92, 0xd8, 0x7f, 0xcf, 0x9a, 0xf5, 0x62, 0x4b, 0xf2, 0x94, 0x8d, 0x82, 0xaa, 0x62, 0x72, 0x0d, 0x36, 0xc6, 0x09, 0xe2, 0x3f, 0x3e, 0xda, 0x16, 0x9e, 0xbe, 0x5e, 0x17, 0x0a, 0x88, 0x31, 0xfa, 0xf8, 0xaf, 0xe3, 0xf9, 0xcd, 0x5a, 0x32, 0x34, 0x0a, 0xac, 0xfb, 0xfc, 0xa9, 0x61, 0xaf, 0x59, 0x0b, 0x69, 0xff, 0x32, 0xa9, 0x39, 0xc5, 0x3f, 0x34, 0x69, 0x32, 0x6d, 0x6d, 0x16, 0x3d, 0x08, 0xdd, 0x38, 0xfb, 0x12, 0xb3, 0xbe, 0x10, 0x2c, 0x3b, 0x39, 0x44, 0x49, 0xfe, 0x82, 0x95, 0xce, 0xc9, 0xa3, 0x06, 0xf2, 0x15, 0x1c, 0x2c, 0x2c, 0xb8, 0x66, 0x9c, 0xae, 0x4a, 0x4b, 0x0a, 0xfb, 0x62, 0xe7, 0x0a, 0x02, 0x51, 0x8e, 0xb9, 0xed, 0xa5, 0x47, 0x8f, 0x6c, 0xd9, 0x4d, 0x10, 0x6c, 0xd6, 0x42, 0xbf, 0x3c, 0x10, 0x59, 0xea, 0x07, 0xdf, 0x2a, 0x3a, 0x8b, 0x66, 0x33, 0xb2, 0x5a, 0x66, 0x8e, 0xc8, 0x9c, 0x52, 0xec, 0xce, 0x50, 0xb5, 0x15, 0xf8, 0x0a, 0x19, 0x4a, 0x6b, 0xb3, 0x7e, 0x9f, 0xea, 0xd9, 0x03, 0xb4, 0x25, 0x70, 0x7d, 0x71, 0x05, 0x19, 0xa0, 0x2c, 0xfc, 0x92, 0xc7, 0x35, 0xa5, 0xb2, 0xa1, 0xf5, 0xb9, 0x11, 0x42, 0xe2, 0x1c, 0xee, 0x21, 0x1f, 0x75, 0x65, 0x93, 0xb4, 0xd8, 0x5c, 0xd6, 0x21, 0x93, 0x40, 0x71, 0x4c, 0x31, 0x21, 0xd2, 0x54, 0xe5, 0x77, 0x8c, 0xf2, 0x1d, 0x1c, 0x75, 0x83, 0xd0, 0xf3, 0xd8, 0xf4, 0x40, 0xf4, 0x19, 0xd4, 0x0c, 0x2b, 0x4a, 0x98, 0xd0, 0xe9, 0x9b, 0xa0, 0xb0, 0xdf, 0x35, 0x06, 0x08, 0xbb, 0x7d, 0x39, 0xfd, 0xbf, 0x0a, 0x3c, 0x23, 0xda, 0xb4, 0x8b, 0x96, 0x65, 0x8f, 0xcf, 0x31, 0x85, 0xd9, 0x77, 0xeb, 0x8d, 0xa3, 0x3c, 0x72, 0x59, 0x66, 0xf5, 0x2d, 0x7c, 0x42, 0x0d, 0x99, 0x5e, 0x41, 0x46, 0x4c, 0x14, 0x44, 0x00, 0xac, 0x9b, 0xfc, 0xa1, 0xd7, 0xc8, 0x35, 0x03, 0xeb, 0xa0, 0x2c, 0x77, 0x53, 0xfc, 0x66, 0x5b, 0x90, 0x2a, 0xc7, 0x1d, 0xf3, 0x46, 0xd6, 0x2f, 0x65, 0x61, 0x83, 0xf6, 0x12, 0x68, 0x0b, 0x33, 0xf0, 0x6d, 0xc6, 0x5f, 0x02, 0x91, 0x49, 0x23, 0xf6, 0xc9, 0x60, 0x41, 0xee, 0x2a, 0x38, 0x18, 0x79, 0x20, 0x95, 0x31, 0xcb, 0x56, 0xfc, 0x19, 0xf5, 0xde, 0xe6, 0xc5, 0x67, 0x05, 0x36, 0x4f, 0x3c, 0x11, 0x6b, 0xa4, 0x5a, 0x85, 0xbd, 0x26, 0x16, 0x51, 0xb7, 0xcf, 0x08, 0xc7, 0x18, 0xa6, 0x8f, 0x19, 0xb0, 0x0f, 0x06, 0xb7, 0xf8, 0x26, 0xfe, 0xcf, 0xe6, 0xf5, 0xdd, 0xb0, 0x34, 0xe3, 0x97, 0x5a, 0x9d, 0xd8, 0x11, 0x63, 0x24, 0xbf, 0xdc, 0xdc, 0x37, 0xa4, 0xa9, 0x85, 0xb2, 0x0e, 0x6c, 0x4a, 0xfd, 0x03, 0x77, 0xbe, 0x89, 0x95, 0xaf, 0x06, 0xe2, 0xd1, 0xbe, 0xc3, 0xe1, 0x73, 0xb5, 0x0c, 0xa8, 0x8b, 0xf4, 0xbc, 0x69, 0x76, 0xbd, 0xec, 0x03, 0x85, 0xf8, 0x69, 0x02, 0xf9, 0xf4, 0xab, 0xa3, 0xa1, 0x73, 0xe2, 0xad, 0x36, 0x6b, 0x5f, 0xfd, 0x70, 0xdb, 0x75, 0x15, 0x9f, 0x3e, 0xe4, 0x30, 0x91, 0x76, 0xf1, 0x9c, 0x15, 0x40, 0x94, 0x98, 0x82, 0xd7, 0xf8, 0x6a, 0x7e, 0x20, 0x7c, 0xff, 0x87, 0x9c, 0xc5, 0xf3, 0x03, 0x7b, 0xf7, 0x26, 0x30, 0x5e, 0xbc, 0x62, 0x32, 0xb1, 0x39, 0xef, 0x0c, 0x76, 0x1a, 0x65, 0xec, 0xf2, 0x91, 0x8e, 0xe9, 0x36, 0x0c, 0x45, 0x32, 0xe4, 0xc1, 0x9d, 0x21, 0xa4, 0x64, 0xea, 0x15, 0xa1, 0xc5, 0x4f, 0xa2, 0x2c, 0x7c, 0x59, 0x6d, 0xdd, 0xa2, 0x2f, 0x2d, 0x1e]),
                              bytes([0xc7, 0x1f, 0xc3, 0xa6, 0xdd, 0xff, 0xbc, 0x59, 0x57, 0x9a, 0x81, 0x60, 0xe6, 0xcd, 0x83, 0x76, 0xa6, 0xa5, 0xad, 0x8e, 0x8c, 0xe9, 0x02, 0x8a, 0xb1, 0xd1, 0xc1, 0x3c, 0x93, 0xe2, 0xa4, 0xe4, 0x56, 0x79, 0xcf, 0x2d, 0xa8, 0x20, 0x03, 0xd4, 0x8a, 0x4d, 0xba, 0xcf, 0xc0, 0xed, 0x39, 0x45, 0xbe, 0xff, 0x9c, 0x2d, 0x9d, 0x75, 0xb9, 0xae, 0x75, 0xc8, 0xb4, 0x9c, 0x3d, 0xea, 0x16, 0x8c, 0x82, 0xb3, 0x59, 0x34, 0x6f, 0x93, 0x93, 0x3a, 0x09, 0xc0, 0xae, 0xb6, 0x99, 0x6b, 0x5d, 0xb2, 0xa9, 0x92, 0xa9, 0xb8, 0xb9, 0x8a, 0xf8, 0x13, 0x6e, 0xd0, 0x11, 0xce, 0xdd, 0xd4, 0xe3, 0xc1, 0xb6, 0xc2, 0x84, 0xf1, 0x05, 0x39, 0xf0, 0xfc, 0x79, 0xc3, 0x25, 0xd8, 0xe5, 0x2d, 0xff, 0x13, 0x3f, 0x69, 0xce, 0x8e, 0xc6, 0x6c, 0xac, 0xf9, 0xb4, 0xff, 0x3e, 0x76, 0xa5, 0xed, 0xad, 0x2e, 0x46, 0x20, 0xc4, 0xae, 0x02, 0xe9, 0x64, 0xdb, 0x2e, 0xd6, 0xe2, 0x0f, 0xb6, 0x05, 0x30, 0xab, 0x00, 0x76, 0xcb, 0x17, 0xaf, 0x86, 0x13, 0x7f, 0x5b, 0x34, 0x39, 0xf4, 0xb0, 0xd3, 0x4d, 0x03, 0xbe, 0xa8, 0x14, 0x5c, 0x1e, 0x8f, 0x3d, 0x97, 0xb4, 0x51, 0x53, 0x5c, 0xc7, 0xb2, 0xa5, 0x27, 0x88, 0x45, 0x4c, 0x31, 0xb5, 0x9c, 0x09, 0x03, 0x98, 0x75, 0xf5, 0xa8, 0xdf, 0x1a, 0xc6, 0x36, 0xe4, 0x1d, 0x11, 0xaf, 0xf9, 0x74, 0x14, 0xbb, 0xa6, 0x4c, 0x65, 0xcc, 0x2a, 0x89, 0x7c, 0x84, 0xd7, 0xa0, 0x15, 0x94, 0x3e, 0x6f, 0x88, 0x63, 0x5d, 0x5d, 0xc1, 0x4a, 0xd2, 0x42, 0x00, 0x83, 0x97, 0x7a, 0xe2, 0x04, 0x25, 0x5e, 0x27, 0x6a, 0xea, 0xb3, 0x85, 0x36, 0x0e, 0xb0, 0x6c, 0x9e, 0x26, 0x7b, 0x3b, 0x53, 0x39, 0x78, 0xaf, 0xf6, 0xff, 0x79, 0x97, 0x13, 0xc2, 0x41, 0x82, 0x69, 0xf2, 0x40, 0x3d, 0x26, 0xac, 0xf2, 0x49, 0x18, 0xa5, 0x24, 0x04, 0x7f, 0x8f, 0x2c, 0xfd, 0x6b, 0xee, 0x10, 0xa2, 0xd9, 0x1a, 0x49, 0xd5, 0x30, 0x7d, 0x5c, 0xdd, 0x31, 0xa6, 0xfa, 0x76, 0x25, 0xde, 0x68, 0x64, 0x03, 0x4d, 0x04, 0xae, 0x15, 0x6f, 0x10, 0x43, 0xe8, 0xf5, 0xc2, 0x6d, 0xa6, 0x49, 0xd5, 0x4a, 0xa9, 0xb4, 0xca, 0x60, 0x99, 0x06, 0x48, 0xa1, 0x6a, 0x54, 0x4a, 0xb5, 0xe4, 0x63, 0x24, 0xa6, 0xd8, 0x11, 0xda, 0xdb, 0x20, 0xfe, 0x11, 0xba, 0xa2, 0xd6, 0x08, 0xbc, 0x00, 0x33, 0x85, 0x78, 0x46, 0x0e, 0xb0, 0x82, 0x3a, 0x55, 0xd6, 0x2d, 0x45, 0xbf, 0xd4, 0x2f, 0x4b, 0xd2, 0xff, 0xb2, 0x27, 0xbf, 0x8a, 0x33, 0x62, 0x11, 0xa7, 0xe4, 0x14, 0x86, 0x86, 0x31, 0xad, 0xdf, 0x17, 0xbc, 0xfe, 0x62, 0x38, 0xee, 0xec, 0xc0, 0x01, 0x67, 0x89, 0x7d, 0x98, 0x4f, 0x8b, 0x6a, 0x9f, 0x1d, 0xe8, 0x03, 0xcf, 0x83, 0xe9, 0x39, 0xe7, 0x18, 0xfc, 0xa3, 0xae, 0x45, 0x8a, 0x22, 0x9c, 0xda, 0xf1, 0x5e, 0x57, 0xae, 0xee, 0x24, 0xf0, 0xa3, 0x48, 0xec, 0x34, 0x57, 0x0f, 0x62, 0x74, 0x3b, 0xbe, 0x8b, 0x6f, 0x4a, 0x38, 0x0f, 0x0b, 0x70, 0x5b, 0x72, 0xf7, 0xe2, 0xc1, 0xcd, 0x68, 0xd7, 0x19, 0x6e, 0xb2, 0x84, 0xa9, 0x97, 0x70, 0x57, 0x96, 0x5c, 0xcb, 0x6c, 0x38, 0xa1, 0xfb, 0x43, 0xaf, 0x4c, 0x92, 0x08, 0x4c, 0x33, 0x13, 0x64, 0x6b, 0xc7, 0x37, 0xce, 0x72, 0x5b, 0xe0, 0xd1, 0x7e, 0xc4, 0x17, 0x5f, 0x48, 0x18, 0x9a, 0xa5, 0x22, 0xd2, 0xbd, 0xaa, 0x52, 0x05, 0xb3, 0x21, 0x17, 0xe5, 0x62, 0x97, 0xd4, 0x47, 0x24, 0x94, 0x30, 0x7b, 0xe9, 0x76, 0x20, 0x17, 0x41, 0xc5, 0xcb, 0x7f, 0x9d, 0xc9, 0x3b, 0xe4, 0x8f, 0xf6, 0x45, 0xd4, 0x24, 0x42, 0x89])]
        output_tags = [bytes([0xd4, 0x13, 0x2c, 0x07, 0x6a, 0xa7, 0xd7, 0xc2, 0x3f, 0x6a, 0x08, 0x73, 0xdc, 0x10, 0x55, 0x24]),
                       bytes([0x49, 0xd2, 0xcd, 0x4f, 0x78, 0xce, 0x21, 0x80, 0x4e, 0xc0, 0x8d, 0x60, 0x2b, 0x57, 0xaf, 0x21]),
                       bytes([0x00, 0xac, 0x92, 0x1b, 0x88, 0x17, 0x65, 0x73, 0xea, 0xa4, 0xd6, 0x65, 0x6a, 0xb9, 0x9d, 0xac])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_1024_meta_64_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 1024 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  8192, ADLen   512 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_nonce = bytes([0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85, 0x76, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b])
        output_ciphertexts = [bytes([0xc9, 0x03, 0xaa, 0x23, 0x02, 0x81, 0x30, 0xaf, 0x80, 0x4f, 0xb3, 0x7e, 0xc1, 0xdf, 0x8e, 0xf0, 0x5c, 0xad, 0xc7, 0xec, 0x70, 0xf7, 0x25, 0xc7, 0x52, 0x74, 0x70, 0xf5, 0xe4, 0x8b, 0xe5, 0xf2, 0xcf, 0xa9, 0x10, 0xe1, 0x14, 0x5a, 0xb9, 0x2b, 0x0a, 0x2e, 0x9f, 0x33, 0x58, 0xa1, 0xf1, 0xd2, 0x57, 0xbb, 0xc2, 0x9a, 0x53, 0x3e, 0x9f, 0xf1, 0x9e, 0xc3, 0x9f, 0x79, 0x55, 0xff, 0xed, 0x78, 0x7b, 0x8f, 0x41, 0xa3, 0x17, 0xcb, 0xcc, 0x14, 0x2c, 0xc9, 0x8e, 0x5b, 0x17, 0x50, 0x4c, 0xa9, 0x7e, 0x6d, 0x2e, 0xa8, 0x11, 0xf8, 0xac, 0xda, 0x31, 0x43, 0xa6, 0x19, 0xed, 0x26, 0x18, 0x33, 0xa8, 0x94, 0x09, 0x63, 0x3f, 0x33, 0xbb, 0x98, 0xc3, 0xf1, 0x27, 0x48, 0xaa, 0x21, 0xff, 0x4f, 0x5e, 0xf0, 0x77, 0x6a, 0xe5, 0xcf, 0x62, 0xcc, 0xb8, 0x25, 0xe7, 0xaf, 0xc1, 0xbc, 0xe6, 0xac, 0xd3, 0xd8, 0x23, 0xc4, 0x63, 0xbb, 0xdf, 0x4e, 0x77, 0x18, 0xfc, 0x7e, 0xb9, 0xe5, 0x23, 0xb3, 0xdc, 0x30, 0x15, 0x4c, 0x42, 0x06, 0x19, 0x1c, 0x9e, 0xec, 0x5b, 0x57, 0xbd, 0xe8, 0x48, 0x2a, 0x42, 0xf7, 0x19, 0xad, 0x3a, 0x02, 0xa6, 0xf0, 0xa5, 0x25, 0xb7, 0x9c, 0x3b, 0x09, 0xa2, 0x60, 0x70, 0xe6, 0x99, 0xcb, 0x38, 0x6a, 0xcb, 0x26, 0x2f, 0xee, 0x6d, 0x5a, 0x72, 0xdd, 0x2e, 0x0e, 0x3f, 0x0a, 0xdf, 0x02, 0x6d, 0xc6, 0xa8, 0xc0, 0x96, 0x3d, 0xf8, 0x9d, 0x75, 0x6e, 0x5b, 0x3e, 0xa5, 0x8d, 0xe9, 0x18, 0xf3, 0xae, 0xd4, 0x77, 0x61, 0x75, 0x83, 0x95, 0x3b, 0x72, 0x96, 0xb6, 0xc5, 0x84, 0x58, 0x4f, 0x5d, 0x23, 0xc8, 0xd7, 0xc2, 0xd8, 0xed, 0x47, 0x76, 0x09, 0x28, 0xef, 0x1b, 0x1a, 0x89, 0x35, 0xa8, 0x82, 0x7d, 0xdf, 0x15, 0xa4, 0x91, 0x6b, 0x05, 0x2f, 0x1f, 0x3b, 0xb9, 0xc0, 0xf8, 0xce, 0xbd, 0x4b, 0x80, 0x93, 0xc8, 0xd5, 0xe6, 0x47, 0xd4, 0x57, 0x90, 0xb5, 0x17, 0xe2, 0xf2, 0x19, 0x08, 0x75, 0xc3, 0xb1, 0xdc, 0xa9, 0x07, 0xda, 0x28, 0x79, 0xb5, 0x1f, 0x26, 0xa6, 0x53, 0x6a, 0x62, 0xe8, 0x9a, 0x20, 0x43, 0xa9, 0xd7, 0x8b, 0xd4, 0xda, 0x1e, 0xec, 0xef, 0x11, 0x83, 0x03, 0xdf, 0xb8, 0x79, 0x6a, 0xa3, 0x56, 0xac, 0xd8, 0xef, 0xf4, 0x4d, 0xa1, 0x5b, 0xd4, 0xb5, 0x0d, 0xdf, 0xc9, 0x10, 0xf4, 0xb2, 0x7c, 0x78, 0x64, 0x82, 0x17, 0x0d, 0x5e, 0x05, 0xb4, 0x18, 0xa0, 0x9a, 0xa8, 0x9f, 0xe8, 0x31, 0x87, 0x03, 0x91, 0x6c, 0x0b, 0x1a, 0x37, 0x69, 0x9f, 0x4b, 0x7b, 0xb7, 0xdb, 0xd4, 0xca, 0x2b, 0x57, 0x96, 0xef, 0x12, 0x2f, 0x96, 0xa4, 0x56, 0x0b, 0xd5, 0x02, 0xbe, 0x25, 0x57, 0x2b, 0x4e, 0xf3, 0x04, 0x90, 0x1b, 0x1e, 0xf6, 0xa6, 0x02, 0x55, 0xf8, 0x47, 0x67, 0xc3, 0xcc, 0x7f, 0x35, 0xbb, 0x00, 0x89, 0x40, 0x89, 0x96, 0xc6, 0xe9, 0x1e, 0xfe, 0x8a, 0x0f, 0x29, 0x0e, 0x5d, 0xcd, 0x2a, 0xcd, 0x2b, 0xb1, 0xdb, 0x8e, 0xa6, 0xb9, 0x0a, 0xe7, 0xa5, 0x80, 0x0e, 0xa8, 0xf2, 0xcf, 0x23, 0x0b, 0x9c, 0x83, 0xbd, 0xf9, 0x44, 0x27, 0x72, 0x0b, 0xbf, 0x8c, 0x3c, 0x8e, 0xe3, 0xb0, 0x98, 0xbb, 0xd8, 0x17, 0x27, 0x3e, 0x68, 0xf9, 0xf3, 0x89, 0x00, 0xbf, 0x39, 0x14, 0xba, 0x34, 0x39, 0xd8, 0x22, 0x19, 0x4d, 0x91, 0xf9, 0xb7, 0x19, 0xe2, 0x2f, 0x66, 0xc8, 0xbc, 0x72, 0x84, 0x5f, 0xfb, 0x18, 0x17, 0xd8, 0xea, 0xa4, 0x4a, 0x17, 0x01, 0x01, 0x9e, 0xb3, 0x47, 0x95, 0x09, 0x2c, 0xf2, 0xe0, 0x68, 0xa2, 0xd8, 0x08, 0xcc, 0xd3, 0x95, 0xe2, 0x3a, 0x90, 0xa7, 0xfb, 0x08, 0xd1, 0x9e, 0x83, 0xf9, 0x5c, 0xa3, 0xa1, 0x2e, 0xa4, 0x1d, 0x32, 0xfb, 0x8e, 0xcf, 0xde, 0xaf, 0xf2, 0x54, 0x90, 0x82, 0x6c, 0x7f, 0x3c, 0x37, 0x21, 0x8f, 0xf8, 0x41, 0x88, 0x73, 0x27, 0xa5, 0x96, 0xff, 0x0c, 0xc6, 0x2d, 0xe5, 0x0f, 0xbc, 0x9b, 0xfe, 0xb2, 0x77, 0x45, 0x5a, 0x90, 0x14, 0x2b, 0x4b, 0x98, 0x44, 0xaa, 0x5f, 0xa0, 0x97, 0xb2, 0x33, 0x29, 0x3f, 0xdc, 0x8e, 0xe2, 0x4c, 0x88, 0xc8, 0xc6, 0xee, 0xf9, 0xe5, 0xc2, 0x71, 0xf2, 0xa1, 0xe6, 0x45, 0x8d, 0x79, 0x2b, 0x5d, 0xb9, 0x75, 0xc2, 0xf3, 0xfa, 0x83, 0x5c, 0x5e, 0x4e, 0x87, 0x11, 0xe5, 0xcd, 0xe2, 0x87, 0xde, 0xd0, 0x88, 0xc4, 0xf2, 0xbf, 0x79, 0xa0, 0x17, 0x98, 0x8c, 0xf8, 0xe3, 0x45, 0xd3, 0x72, 0xbf, 0x2b, 0xec, 0x27, 0x6c, 0xaf, 0xfd, 0x0d, 0xe2, 0xa2, 0x6c, 0x30, 0x46, 0x5b, 0xb2, 0x13, 0xe6, 0xfa, 0x92, 0x64, 0x80, 0x52, 0x54, 0x2f, 0x7b, 0x4d, 0xcd, 0x0d, 0x44, 0xee, 0x3b, 0xcb, 0xfb, 0xdd, 0xaf, 0x36, 0x2e, 0xff, 0xbe, 0x9c, 0x6c, 0x29, 0x4a, 0xeb, 0x19, 0x6a, 0x93, 0xe5, 0x50, 0xfa, 0x23, 0xf8, 0x70, 0xf1, 0x71, 0x58, 0xec, 0xd8, 0xb5, 0x18, 0x9a, 0xe1, 0xf9, 0x26, 0x27, 0x8a, 0x16, 0x5d, 0x29, 0x5f, 0xed, 0xbe, 0x28, 0x2d, 0x06, 0xf7, 0xb6, 0x8b, 0xe2, 0x66, 0xda, 0x93, 0x73, 0xaa, 0x05, 0xd0, 0xbc, 0xf1, 0x74, 0x7c, 0x30, 0x0a, 0x8d, 0x18, 0x68, 0x63, 0xee, 0xfc, 0x55, 0x8f, 0xa3, 0x20, 0x05, 0x1b, 0x18, 0xaf, 0x82, 0x99, 0xe5, 0x56, 0xc5, 0x91, 0x03, 0x12, 0xfc, 0x25, 0xd0, 0x81, 0xac, 0x60, 0x57, 0xd2, 0x1e, 0xde, 0xe6, 0x60, 0x56, 0x39, 0x44, 0x10, 0x3a, 0xc2, 0x7d, 0xbd, 0x9e, 0xf7, 0x8b, 0xe5, 0xe9, 0x02, 0x69, 0x69, 0x33, 0xf8, 0x61, 0xbf, 0xc1, 0xff, 0xda, 0x27, 0x7e, 0x79, 0x98, 0x5b, 0x15, 0x09, 0x46, 0x31, 0x3f, 0x0c, 0xdc, 0x0e, 0xef, 0x5f, 0xfb, 0x88, 0x0a, 0xd9, 0x03, 0x55, 0xdc, 0xbb, 0x1f, 0x4a, 0x99, 0x29, 0x3a, 0xd7, 0x44, 0x00, 0x76, 0x3d, 0xac, 0x82, 0xc4, 0x9a, 0xba, 0x77, 0xbc, 0x8c, 0xce, 0x6f, 0x3a, 0x9c, 0x59, 0x24, 0xfa, 0x72, 0xef, 0xa0, 0x3c, 0x6d, 0xb0, 0x93, 0x31, 0xb9, 0xa6, 0x8e, 0xc1, 0x8b, 0x94, 0x2b, 0x4c, 0x87, 0x63, 0xb2, 0xce, 0x92, 0x0a, 0x63, 0x42, 0x5e, 0xbd, 0xab, 0x6c, 0x5d, 0xa3, 0xb9, 0x58, 0x0f, 0xa8, 0x31, 0xc0, 0xaf, 0x5d, 0x90, 0x2f, 0xda, 0x5f, 0x40, 0x37, 0x6e, 0xf7, 0xb4, 0x39, 0x9e, 0x54, 0x6b, 0xee, 0xe4, 0x49, 0x94, 0x7f, 0x10, 0x83, 0x98, 0x96, 0xb1, 0xb9, 0xea, 0xe7, 0xe5, 0xc6, 0x95, 0x06, 0x81, 0xb1, 0x86, 0x3d, 0xb8, 0xfe, 0xf2, 0xcc, 0x8c, 0xbb, 0xe6, 0x17, 0x51, 0x2b, 0x8b, 0xb0, 0xa6, 0x5e, 0x46, 0xa3, 0x71, 0xd8, 0xee, 0x6b, 0xc5, 0x3f, 0x7a, 0x46, 0xd4, 0xf3, 0x1b, 0xe6, 0xae, 0x52, 0x5d, 0x04, 0x26, 0x81, 0x92, 0x85, 0x32, 0xb2, 0x9e, 0xfe, 0xd2, 0x0a, 0x66, 0xd4, 0xba, 0x04, 0x8f, 0xf8, 0x0a, 0x38, 0x0e, 0xdd, 0xf3, 0xb5, 0xea, 0x6c, 0xdf, 0xf7, 0xf4, 0xc2, 0xf7, 0x3c, 0xfc, 0xc7, 0x13, 0xc1, 0xd7, 0x10, 0xbf, 0x99, 0x23, 0x86, 0xc9, 0x54, 0xb8, 0x2d, 0x82, 0x7f, 0xca, 0x45, 0x25, 0xa6, 0x39, 0x8b, 0x78, 0x00, 0x65, 0x6e, 0x0e, 0x31, 0x64, 0x18, 0xea, 0xe1, 0x99, 0xdb, 0x37, 0x0b, 0x29, 0x18, 0x79, 0x0e, 0x05, 0xb9, 0xeb, 0x82, 0xe1, 0xea, 0x21, 0x87, 0xe0, 0x6f, 0xd9, 0x3e, 0xc6, 0x04, 0xc0, 0x1c, 0x11, 0x6d, 0xae, 0xd6, 0x69, 0x4c, 0xef, 0xa5, 0xb9, 0x7f, 0x2c, 0x6d, 0x01, 0xab, 0x0c, 0x3c, 0xec, 0x2f, 0x62, 0xd1, 0x85]),
                              bytes([0x4c, 0x23, 0x6e, 0x45, 0xdb, 0x97, 0x3a, 0xef, 0xc2, 0xe0, 0x69, 0x29, 0x2e, 0xbd, 0xf3, 0xcf, 0x63, 0x4d, 0x9e, 0x4d, 0x4c, 0xfa, 0x31, 0xef, 0x0f, 0x57, 0x56, 0x3f, 0xbe, 0x89, 0x67, 0x70, 0x7e, 0x46, 0x4c, 0xa3, 0xe7, 0xfd, 0x93, 0x79, 0x32, 0x28, 0xcc, 0xa4, 0x56, 0x53, 0x6a, 0x49, 0x32, 0x92, 0x41, 0x93, 0x04, 0xef, 0x24, 0x91, 0xfe, 0xba, 0x01, 0xc6, 0x99, 0xfe, 0x50, 0x30, 0x39, 0xd4, 0x85, 0xa6, 0x62, 0xd3, 0xc7, 0xd4, 0x56, 0xf5, 0x3f, 0xda, 0xbc, 0x2f, 0x52, 0x68, 0x81, 0x9e, 0xfa, 0xd4, 0x2d, 0xcf, 0x15, 0xe9, 0x6f, 0x80, 0x41, 0xe8, 0x2a, 0x91, 0x30, 0xbc, 0x0f, 0x90, 0xee, 0x1a, 0xe1, 0x9b, 0xf7, 0x77, 0xeb, 0x1b, 0x6b, 0x74, 0x8d, 0x38, 0x8c, 0x6a, 0x68, 0x7d, 0x72, 0xd7, 0x75, 0xbb, 0x57, 0x30, 0x3f, 0x9d, 0x7c, 0xd0, 0x0c, 0x2b, 0x19, 0xad, 0x77, 0xb2, 0xa6, 0xe2, 0x3b, 0x74, 0x0b, 0xd1, 0xc8, 0x72, 0x14, 0xdb, 0xd6, 0x72, 0x06, 0x2e, 0xf2, 0x50, 0x33, 0x8a, 0x34, 0x34, 0xa1, 0x96, 0xbe, 0xbf, 0x14, 0x08, 0xd5, 0xe9, 0x98, 0x07, 0x5b, 0x48, 0x4f, 0x93, 0x24, 0xc6, 0x5b, 0x27, 0xea, 0xe7, 0xa5, 0x49, 0x34, 0x8d, 0x84, 0xb4, 0x22, 0x78, 0x71, 0xaf, 0x4e, 0xe1, 0xec, 0x67, 0xb1, 0xd2, 0x90, 0xa5, 0x29, 0x45, 0x2f, 0xef, 0x24, 0x6e, 0x99, 0x2c, 0xac, 0xc0, 0xe2, 0x6f, 0xec, 0xcf, 0xa4, 0xd6, 0x90, 0x04, 0xa3, 0xcc, 0x2d, 0x85, 0x81, 0x73, 0xe7, 0x22, 0xf0, 0x77, 0xe9, 0x09, 0x70, 0x81, 0xef, 0x0f, 0x7e, 0xb8, 0xde, 0x5c, 0xc3, 0x9b, 0x2b, 0x00, 0xe9, 0x56, 0x50, 0x11, 0xcc, 0x21, 0x51, 0x5d, 0x71, 0x70, 0x8c, 0x63, 0xca, 0x4d, 0xd7, 0xa2, 0xee, 0x89, 0x08, 0x04, 0x95, 0x02, 0x0c, 0xf7, 0x38, 0xa3, 0x24, 0x7a, 0x6c, 0x81, 0xcc, 0x41, 0x94, 0x64, 0xdc, 0x62, 0x99, 0x35, 0x5f, 0xee, 0xa9, 0xf7, 0x89, 0x7e, 0xab, 0x77, 0xc8, 0x8c, 0x39, 0x17, 0xa5, 0xb2, 0x4e, 0x03, 0x98, 0x82, 0x98, 0xd9, 0x3d, 0xe4, 0x88, 0x4b, 0x51, 0x24, 0x8f, 0x94, 0xb8, 0xde, 0x1e, 0x5a, 0x13, 0xef, 0x7d, 0xb6, 0x03, 0x5c, 0x19, 0x0b, 0x04, 0x77, 0xbf, 0xd9, 0x34, 0xc6, 0x95, 0x62, 0xc4, 0x78, 0xfe, 0xeb, 0xea, 0x94, 0xc2, 0x51, 0x29, 0xdc, 0x09, 0x2e, 0x68, 0x01, 0x89, 0xec, 0x25, 0xd7, 0xb9, 0xc6, 0xfd, 0x50, 0x21, 0x35, 0x9d, 0x23, 0xe6, 0x3e, 0xa4, 0x8a, 0x52, 0x5d, 0xda, 0x82, 0xa3, 0x76, 0x1c, 0xf5, 0x12, 0xb7, 0xe5, 0x37, 0x3c, 0x5e, 0x0a, 0x4b, 0x8c, 0xfc, 0x08, 0xb0, 0x31, 0x02, 0x13, 0x3c, 0x38, 0x4f, 0x83, 0xe0, 0x9a, 0x2c, 0xf2, 0x56, 0x36, 0x99, 0xe6, 0x1e, 0x62, 0x45, 0x09, 0x40, 0xf6, 0x3d, 0x0c, 0xfe, 0xf8, 0x97, 0xf8, 0x5b, 0x38, 0xde, 0x95, 0x43, 0x3a, 0xbe, 0xc0, 0xfc, 0x00, 0x7f, 0xbe, 0x3d, 0x90, 0x55, 0xcf, 0x97, 0x20, 0xe3, 0x14, 0xde, 0x84, 0x91, 0xb0, 0x80, 0xe8, 0xaa, 0x89, 0x66, 0x5c, 0xc6, 0x23, 0x26, 0x4a, 0xa0, 0xdd, 0xa3, 0x2e, 0x63, 0x18, 0xcc, 0x06, 0x29, 0x0d, 0x41, 0x36, 0x52, 0x7b, 0x73, 0x4e, 0x36, 0xc8, 0x8b, 0x9d, 0xbc, 0xb9, 0xa1, 0xeb, 0xc7, 0x90, 0x49, 0x82, 0xb8, 0x8d, 0x2e, 0xbe, 0xb9, 0x03, 0x35, 0x99, 0x8f, 0x08, 0x9c, 0x72, 0xda, 0x73, 0x2d, 0xd6, 0x5f, 0x6e, 0xab, 0x75, 0x38, 0x08, 0x09, 0x2c, 0x89, 0xc9, 0xb8, 0xc8, 0x15, 0x9f, 0x19, 0xf1, 0xb6, 0x8c, 0x3c, 0x7c, 0xd2, 0xf3, 0x2c, 0x80, 0x79, 0xec, 0x8b, 0x9a, 0x54, 0x4a, 0xf4, 0x19, 0xa7, 0x94, 0x4d, 0xbd, 0x32, 0x23, 0xc8, 0x16, 0x93, 0x6c, 0x1d, 0x51, 0x5b, 0x78, 0x39, 0xb6, 0x8e, 0xa5, 0xec, 0xb7, 0x84, 0xfc, 0x82, 0x69, 0x86, 0x8f, 0x00, 0x54, 0xb2, 0x42, 0x86, 0xe9, 0x51, 0x76, 0x6b, 0xbe, 0xca, 0x94, 0x84, 0x55, 0xb6, 0x14, 0x17, 0x7a, 0xb9, 0x1a, 0x92, 0xf7, 0x49, 0x54, 0x39, 0xb0, 0x94, 0xfb, 0x56, 0x6d, 0xfa, 0xfd, 0x6d, 0x5e, 0xdb, 0x44, 0xaa, 0x48, 0xb6, 0x3b, 0x6f, 0x92, 0xbf, 0xb4, 0x4f, 0x5f, 0xfa, 0xe0, 0x1e, 0x44, 0x21, 0x35, 0xe6, 0xe0, 0x92, 0x00, 0x10, 0xfb, 0x98, 0xbf, 0x4d, 0x41, 0x2f, 0xd0, 0x3e, 0x21, 0x5c, 0x29, 0x71, 0x65, 0x7b, 0x32, 0xa5, 0xa0, 0x8e, 0xe1, 0x40, 0x15, 0xdf, 0x18, 0xf5, 0x93, 0x44, 0x3d, 0x18, 0xb1, 0xd4, 0x27, 0x71, 0x26, 0x9a, 0x9c, 0x1a, 0x3f, 0xa4, 0xae, 0x26, 0x7a, 0x74, 0xcc, 0x9a, 0x8a, 0xb7, 0xad, 0xaa, 0xad, 0x50, 0x2b, 0x34, 0xcc, 0x6d, 0x0d, 0xf7, 0x2e, 0x67, 0xe8, 0x13, 0x22, 0x9c, 0x9d, 0x4b, 0x05, 0x8c, 0xed, 0xdb, 0x2c, 0x0f, 0xfa, 0xfd, 0x04, 0xa8, 0x4c, 0xce, 0xb5, 0xa9, 0x44, 0x0d, 0xf0, 0xd8, 0x7d, 0x91, 0x7f, 0xa7, 0x37, 0x1c, 0x68, 0x71, 0x12, 0xf4, 0xad, 0x9c, 0xc8, 0xee, 0x95, 0x64, 0xfd, 0xe6, 0xed, 0x80, 0x08, 0x62, 0xad, 0xc0, 0xff, 0xab, 0x97, 0xee, 0x41, 0x14, 0x22, 0x13, 0x19, 0x90, 0x92, 0xb3, 0x77, 0x55, 0x00, 0x1b, 0x6d, 0x11, 0x25, 0x94, 0x5c, 0x16, 0x29, 0xe4, 0x90, 0x1a, 0x0b, 0xbe, 0x2d, 0x54, 0xd9, 0x7b, 0xfc, 0x2e, 0x03, 0x71, 0x0e, 0xe1, 0xd6, 0x9a, 0xa7, 0xd2, 0x06, 0x63, 0x11, 0xf3, 0xd8, 0x98, 0xe8, 0xfd, 0xb6, 0x87, 0xe9, 0xd2, 0x00, 0xbd, 0x73, 0x45, 0xaf, 0x48, 0x64, 0xde, 0x27, 0x65, 0x93, 0xeb, 0xe9, 0x01, 0x4b, 0xfd, 0x59, 0xf0, 0xa7, 0x86, 0x2c, 0x84, 0xdc, 0xed, 0x88, 0xe3, 0x03, 0x33, 0x7e, 0x32, 0x90, 0x72, 0xf6, 0xb9, 0xa4, 0xb9, 0xf7, 0x71, 0xe2, 0xc3, 0x16, 0x42, 0x24, 0x29, 0x5b, 0x40, 0x97, 0xfa, 0x26, 0xf8, 0x68, 0xc0, 0x6c, 0x21, 0x2d, 0x9b, 0xe2, 0x57, 0x98, 0x2a, 0x20, 0x7c, 0x67, 0xce, 0x94, 0x6b, 0x55, 0x7f, 0x74, 0xd3, 0x72, 0x06, 0x1d, 0xab, 0xfb, 0xa0, 0x78, 0x41, 0xc2, 0x8e, 0x5e, 0x83, 0x8a, 0xf3, 0xf8, 0xa9, 0x49, 0x1e, 0x03, 0x6c, 0xa5, 0x5c, 0x86, 0x1f, 0x24, 0x6d, 0xf4, 0x02, 0xc2, 0x64, 0xd6, 0xa5, 0x23, 0x2c, 0xbc, 0xff, 0x63, 0xe9, 0x1c, 0xbd, 0x4a, 0xef, 0x3a, 0x93, 0x64, 0x9b, 0xa3, 0xe8, 0x54, 0x13, 0x01, 0x0e, 0x1c, 0x7a, 0xa4, 0xff, 0x70, 0xc4, 0xda, 0xfa, 0x15, 0xfc, 0x68, 0xc1, 0x1b, 0x16, 0xa5, 0x2e, 0x40, 0xbb, 0xa7, 0xbc, 0x9f, 0x8d, 0xe4, 0x7e, 0xa7, 0x14, 0x0c, 0x88, 0xda, 0xeb, 0xe3, 0x96, 0xc6, 0x4c, 0x87, 0xa4, 0x9c, 0xe7, 0xbb, 0xfd, 0xa6, 0x90, 0x98, 0xfc, 0xd9, 0x55, 0x4d, 0x48, 0xa6, 0x3a, 0x29, 0x82, 0x0d, 0xad, 0xa1, 0xd1, 0x32, 0xca, 0x1e, 0xca, 0x91, 0x0d, 0xdc, 0xc0, 0x6b, 0x73, 0xb9, 0x07, 0x72, 0x32, 0x1b, 0x76, 0xc0, 0x1c, 0x17, 0xbd, 0x93, 0x53, 0x76, 0x0f, 0x58, 0xad, 0xa0, 0x2b, 0xea, 0xfa, 0x30, 0xd7, 0x54, 0xf9, 0x42, 0xd7, 0x7d, 0x67, 0x04, 0xc5, 0x90, 0xd8, 0x29, 0x24, 0xd3, 0x63, 0xb0, 0x1d, 0xcc, 0x2d, 0x64, 0xbf, 0x44, 0x28, 0x19, 0x01, 0x25, 0x24, 0x6d, 0x79, 0x22, 0xa1, 0x95, 0x5b, 0x8d, 0x20, 0x23, 0x24, 0xcc, 0xaa, 0x25, 0xce, 0x33, 0x4c, 0xe3, 0x67, 0x1a, 0x1b, 0x1b, 0x2e, 0x5c, 0x58, 0xd7, 0x0d, 0x5f, 0x88, 0xb8, 0x64, 0x3f, 0x2c, 0x87, 0x23, 0xe3, 0x7d, 0x60, 0x87, 0x6b, 0x03, 0x37, 0x7a]),
                              bytes([0xc7, 0x2e, 0x63, 0xb2, 0x81, 0x28, 0x56, 0x56, 0x81, 0x88, 0x34, 0xca, 0xa6, 0xcd, 0xec, 0x0a, 0xb2, 0xa9, 0xc1, 0xb8, 0x9f, 0xcd, 0x35, 0xb8, 0xe6, 0x34, 0x14, 0x70, 0x1b, 0x70, 0xe5, 0xe5, 0x44, 0xaa, 0xc8, 0xb9, 0x38, 0xe0, 0x06, 0xae, 0xc0, 0xf0, 0xfa, 0x7c, 0x70, 0x13, 0x7a, 0xd7, 0x59, 0x33, 0x97, 0x7b, 0xdd, 0x06, 0xfb, 0x65, 0x77, 0x10, 0x29, 0xec, 0xb4, 0xd9, 0x6f, 0x1a, 0xd5, 0x92, 0xac, 0x75, 0x00, 0x83, 0x8a, 0x39, 0x49, 0x85, 0xc2, 0x19, 0x05, 0x63, 0x8c, 0x44, 0xa7, 0x7c, 0xd8, 0x4f, 0xf9, 0x27, 0x08, 0xe1, 0x75, 0xcf, 0x00, 0x81, 0x3f, 0x62, 0x07, 0x52, 0xd5, 0x9d, 0xc9, 0x1d, 0x14, 0xb3, 0x29, 0x38, 0xe9, 0x3d, 0x3d, 0xd5, 0x28, 0x6a, 0x49, 0x0e, 0x0f, 0x25, 0x59, 0x83, 0x57, 0x4f, 0x07, 0x63, 0xdc, 0xe8, 0xbc, 0x31, 0x32, 0x0e, 0x98, 0x1b, 0x5f, 0x97, 0x90, 0x55, 0x9d, 0xe7, 0x8d, 0x50, 0x4a, 0x36, 0xee, 0xd5, 0xe2, 0x4e, 0xba, 0x8c, 0x65, 0xda, 0xa7, 0x92, 0x90, 0xaa, 0xd8, 0x2c, 0x7a, 0x88, 0x82, 0x4b, 0xb4, 0xee, 0xe1, 0xd4, 0x82, 0xe6, 0xd9, 0x33, 0x8f, 0x0a, 0xdb, 0x2c, 0x0c, 0xcd, 0x8d, 0x5e, 0x1b, 0x99, 0x63, 0x10, 0xa4, 0x2b, 0x1f, 0x14, 0x6a, 0x7f, 0xcd, 0x04, 0x49, 0x35, 0x59, 0x63, 0xf5, 0x88, 0x98, 0x61, 0x15, 0x61, 0x75, 0xaa, 0xdc, 0x32, 0x24, 0x93, 0x39, 0x0c, 0x90, 0xa3, 0x76, 0xef, 0x07, 0x7d, 0x1b, 0x4d, 0x75, 0xa2, 0x7d, 0x85, 0x59, 0xa0, 0xd6, 0xdb, 0xb6, 0x65, 0x35, 0x3f, 0x58, 0x0a, 0xc0, 0x3b, 0x41, 0x58, 0x0d, 0xec, 0x1b, 0x7c, 0xda, 0xac, 0xfe, 0x30, 0x0f, 0xf3, 0x54, 0x16, 0xa6, 0xc6, 0x7b, 0x88, 0xe8, 0xd8, 0xc3, 0x0f, 0xe9, 0xad, 0xb4, 0x77, 0xea, 0x37, 0xf8, 0xcc, 0x41, 0x89, 0x01, 0x59, 0x57, 0x97, 0xa3, 0x8c, 0xc0, 0x66, 0x99, 0x26, 0x1c, 0x02, 0x91, 0x1f, 0xd9, 0x27, 0xf5, 0xda, 0x1e, 0xdc, 0x1c, 0x3d, 0xb0, 0x41, 0x47, 0x04, 0x6f, 0x33, 0x81, 0xe3, 0x72, 0xf7, 0xe7, 0x37, 0x60, 0x9f, 0x00, 0x34, 0xc0, 0x71, 0xb9, 0x4a, 0x2a, 0x07, 0x9a, 0xc0, 0x38, 0x4b, 0x59, 0x14, 0x08, 0x4a, 0x54, 0xac, 0x9c, 0xdc, 0x37, 0x85, 0xec, 0x97, 0xe1, 0xac, 0x44, 0x22, 0xf9, 0xe5, 0x14, 0x9c, 0x0b, 0x9f, 0xc3, 0xc3, 0x17, 0xdc, 0xbf, 0x23, 0xe1, 0xb4, 0x44, 0x53, 0x9f, 0x15, 0x23, 0x74, 0x78, 0x27, 0x8b, 0x54, 0x82, 0xe6, 0x97, 0xdb, 0x58, 0xfa, 0xcc, 0xbf, 0x14, 0xc5, 0x44, 0xc0, 0x9e, 0x8c, 0x86, 0x17, 0x35, 0x0f, 0x04, 0x41, 0x45, 0xb3, 0x82, 0x1a, 0x41, 0x36, 0x82, 0xab, 0x4a, 0x9e, 0x20, 0x7d, 0xd9, 0x6a, 0xcd, 0x83, 0xbd, 0xe8, 0xd9, 0xac, 0x6c, 0xcd, 0xff, 0x84, 0xd8, 0x7f, 0xaa, 0x65, 0x8a, 0xe8, 0xbc, 0x38, 0xb2, 0x0d, 0x64, 0xf3, 0x35, 0xd9, 0xcd, 0x00, 0xb3, 0xd9, 0x72, 0x34, 0x4d, 0x23, 0x14, 0x4d, 0x0b, 0xfc, 0x4b, 0xf2, 0xb4, 0x0a, 0xa3, 0xde, 0x22, 0x17, 0x53, 0xde, 0xf7, 0x7e, 0xcb, 0xc8, 0xd1, 0x73, 0x8a, 0x91, 0xa8, 0x86, 0xb8, 0xde, 0xc9, 0xf5, 0x20, 0xb8, 0x74, 0xc7, 0x1b, 0xe0, 0xee, 0xf0, 0x1a, 0x75, 0x86, 0x9a, 0x4c, 0xb1, 0xde, 0xed, 0x09, 0x97, 0x97, 0xd5, 0x39, 0x39, 0x85, 0xf5, 0x93, 0xbc, 0xa4, 0x13, 0x54, 0x79, 0xed, 0xc5, 0x79, 0xb8, 0x56, 0x42, 0x03, 0x2c, 0x3d, 0x12, 0x17, 0x2b, 0xe1, 0x07, 0x6b, 0x3b, 0x5d, 0x5b, 0x96, 0xda, 0x82, 0xcf, 0x1b, 0xfd, 0x65, 0xc2, 0x99, 0x8d, 0xec, 0x60, 0xad, 0xef, 0x4f, 0x4e, 0xe1, 0x20, 0x78, 0x7c, 0xc8, 0x99, 0xfe, 0x7d, 0xaa, 0x7d, 0xd1, 0x91, 0x93, 0x6b, 0x87, 0x0e, 0x4b, 0x2a, 0x14, 0x50, 0x3c, 0x64, 0xbe, 0xfe, 0x28, 0x3b, 0xc9, 0xe4, 0x4b, 0x71, 0x47, 0x11, 0xf5, 0x41, 0x66, 0xc5, 0xae, 0x82, 0x3f, 0xd5, 0x8d, 0x69, 0x61, 0x89, 0x26, 0x65, 0xc3, 0x37, 0xed, 0xb3, 0x49, 0x25, 0x49, 0x55, 0xaf, 0x37, 0x9c, 0xb1, 0xad, 0x77, 0x30, 0xe4, 0x9c, 0xbb, 0xa7, 0x1a, 0xcf, 0xfb, 0x6e, 0xb1, 0x0b, 0xcb, 0xc4, 0x97, 0x09, 0x33, 0x51, 0x1e, 0x03, 0x61, 0x3b, 0xc4, 0x67, 0xd9, 0x0b, 0x21, 0xce, 0x2b, 0xbe, 0xfa, 0x5c, 0xfc, 0x36, 0xa1, 0x15, 0xf4, 0xdd, 0x6e, 0x26, 0x71, 0xe2, 0xb5, 0x5e, 0x0d, 0xa5, 0x42, 0x41, 0xdf, 0xa4, 0x05, 0x5d, 0x1d, 0x5f, 0xd6, 0xb2, 0xe1, 0xf9, 0xb8, 0x32, 0x24, 0x4a, 0x09, 0xcd, 0xbb, 0xb8, 0xd6, 0x46, 0x49, 0x8a, 0x8c, 0xd5, 0x53, 0xce, 0xbf, 0x00, 0x19, 0x99, 0x24, 0x6e, 0xdf, 0x44, 0x0a, 0xc5, 0xf0, 0xdc, 0xfb, 0xa9, 0xaa, 0x63, 0x25, 0x9d, 0x80, 0xca, 0x0e, 0x58, 0xb8, 0x6b, 0x1c, 0xfc, 0x68, 0xa5, 0x98, 0x0a, 0x47, 0x26, 0x5c, 0xc8, 0x33, 0x56, 0xfa, 0x83, 0xb9, 0x78, 0x86, 0x9e, 0xab, 0x7c, 0xa4, 0x54, 0x1f, 0x9f, 0x09, 0x71, 0x9e, 0xeb, 0x63, 0xb5, 0xf0, 0x93, 0x01, 0xbb, 0x80, 0xce, 0x69, 0x1a, 0xab, 0xf4, 0x48, 0xe5, 0x20, 0xd1, 0xe9, 0xd8, 0xa3, 0xa2, 0xf8, 0x94, 0x1b, 0xba, 0x65, 0x93, 0xf7, 0xc6, 0xfd, 0x95, 0x0a, 0x55, 0x88, 0x23, 0xcb, 0xc7, 0xe7, 0x16, 0xc3, 0x65, 0xc7, 0x52, 0x20, 0x5f, 0x82, 0x87, 0xc5, 0xab, 0x1d, 0xd1, 0xd7, 0x89, 0xad, 0xc0, 0xec, 0xd0, 0x23, 0x57, 0xd1, 0xbe, 0x1a, 0x61, 0xf0, 0x20, 0x6c, 0xdf, 0x58, 0xe2, 0x19, 0x48, 0xc6, 0xf0, 0xdb, 0x8b, 0x7b, 0x7b, 0x66, 0x9d, 0x32, 0x62, 0x99, 0xf4, 0xc2, 0x0a, 0xd5, 0x50, 0xfe, 0x8a, 0x61, 0x14, 0x9e, 0x7c, 0x5e, 0xd0, 0x01, 0xf0, 0x06, 0xde, 0x65, 0x86, 0xf0, 0x41, 0xda, 0x01, 0x5c, 0xeb, 0x20, 0xb1, 0x70, 0xb6, 0x99, 0x9e, 0xa1, 0xaf, 0xa9, 0x69, 0x7c, 0x83, 0x66, 0xe6, 0x3b, 0xf8, 0x24, 0x21, 0x05, 0xf3, 0xa2, 0x08, 0xdf, 0x3a, 0x10, 0xd2, 0x35, 0x80, 0x28, 0x58, 0x99, 0x37, 0x38, 0xc2, 0x6c, 0x3d, 0xce, 0x74, 0x12, 0x4d, 0x2a, 0xca, 0x43, 0x31, 0x14, 0x2e, 0x1a, 0x63, 0xab, 0x99, 0x94, 0xe0, 0x67, 0xfe, 0xb0, 0xf2, 0x26, 0xe8, 0x3f, 0xb2, 0xe8, 0x6a, 0xc9, 0x43, 0x38, 0x8b, 0x41, 0x8c, 0x48, 0xbf, 0xea, 0x35, 0xd5, 0xeb, 0x14, 0xe6, 0xb7, 0x5b, 0x8f, 0x03, 0x26, 0x21, 0xfc, 0x8c, 0xcb, 0xed, 0x31, 0x7b, 0xda, 0x52, 0x1e, 0x58, 0x29, 0x4e, 0x14, 0x40, 0xc8, 0x20, 0x85, 0x62, 0xc0, 0x06, 0x96, 0xfb, 0x59, 0x87, 0xc6, 0xcd, 0x29, 0xaf, 0xf2, 0xb7, 0xc5, 0x48, 0x6b, 0x61, 0x86, 0x2d, 0x40, 0x90, 0xf2, 0x09, 0x64, 0xc4, 0x90, 0xe7, 0xbc, 0xcd, 0xc2, 0x0d, 0xb1, 0x55, 0xca, 0x95, 0x00, 0xc7, 0x02, 0x70, 0x6a, 0x76, 0xbf, 0x15, 0x3a, 0x87, 0x8c, 0xf6, 0x4b, 0xbb, 0xa5, 0x1e, 0x5c, 0x80, 0x1d, 0x76, 0x1d, 0x06, 0x29, 0x8d, 0xd1, 0x8f, 0x9d, 0xc4, 0x3c, 0x3e, 0x8e, 0xd3, 0xe9, 0x05, 0x23, 0x6e, 0x82, 0xe7, 0x0b, 0x75, 0x0d, 0xec, 0x03, 0xab, 0xe4, 0x64, 0x8d, 0xb3, 0x2d, 0xff, 0xdb, 0x88, 0xf5, 0x79, 0xe2, 0x66, 0x15, 0x6e, 0xbf, 0x5d, 0x60, 0x51, 0xea, 0x0c, 0x78, 0x02, 0x59, 0x2b, 0x4e, 0xe8, 0x3b, 0xb2, 0xad, 0x24, 0x72, 0x0e, 0x6f, 0x32, 0x09, 0x09, 0x3a, 0xd9, 0xf2, 0x9d, 0x12, 0xbe, 0x5b, 0x46, 0x2d, 0xcf, 0x76, 0x18, 0x79, 0xc0, 0xbf])]
        output_tags = [bytes([0x39, 0x39, 0x79, 0xb6, 0x10, 0x21, 0x76, 0x25, 0x3e, 0x58, 0xba, 0x42, 0x03, 0xd2, 0xb0, 0x41]),
                       bytes([0xc4, 0x68, 0x04, 0x2c, 0x1b, 0x30, 0x75, 0xcb, 0xf9, 0x35, 0xdb, 0xca, 0xf8, 0xd0, 0x11, 0xb2]),
                       bytes([0x2f, 0x2f, 0xe3, 0x96, 0xed, 0xa9, 0x96, 0x62, 0x36, 0x6f, 0x6b, 0x51, 0x2d, 0x97, 0x5c, 0xed])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_128_meta_0_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 0 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1024, ADLen     0 (in bits)
        my_key = bytes([0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42])
        my_nonce = bytes([0x17, 0x08, 0xf9, 0xea, 0xdb, 0xcc, 0xbd, 0xae, 0x9f, 0x90, 0x81, 0x72, 0x63, 0x54, 0x45, 0x36, 0x26, 0x17, 0x08, 0xf9, 0xea, 0xdb, 0xcc, 0xbd, 0xae, 0x9f, 0x90, 0x81, 0x72, 0x63, 0x54, 0x45])
        my_message = bytes([0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32])
        my_metadata = bytes([])
        output_ciphertexts = [bytes([0x3e, 0xc3, 0x60, 0x7b, 0xa0, 0x85, 0xd6, 0x97, 0x63, 0x42, 0x97, 0x1b, 0x82, 0x1c, 0xb5, 0x98, 0x99, 0x55, 0x9d, 0x64, 0xc6, 0x56, 0x80, 0xb7, 0xaf, 0x18, 0x42, 0x78, 0x21, 0x11, 0xf4, 0xad, 0xc5, 0xb0, 0x73, 0xdc, 0x4e, 0xb9, 0x06, 0xb8, 0x0a, 0x9e, 0x9f, 0x2e, 0x75, 0xe9, 0x47, 0xde, 0xc5, 0x9b, 0x3c, 0xb3, 0x71, 0x70, 0xb1, 0xa3, 0x07, 0x3c, 0xab, 0xbc, 0x37, 0xfd, 0xf1, 0x52, 0x7a, 0x8e, 0x2b, 0xcf, 0xcf, 0xb5, 0x34, 0x07, 0x8c, 0xe7, 0xd0, 0xbe, 0xaf, 0x0d, 0xfd, 0x26, 0xae, 0xd3, 0x16, 0xc4, 0x8f, 0xa4, 0xe1, 0xd5, 0x1f, 0x98, 0xcc, 0xba, 0xf9, 0x44, 0xca, 0xda, 0xf9, 0xaf, 0xfd, 0x2f, 0xf1, 0x6f, 0x4f, 0xd9, 0xcf, 0xaf, 0x2e, 0xbd, 0x74, 0x7a, 0xa6, 0xe4, 0xe7, 0x8d, 0x8f, 0x36, 0x4a, 0xdf, 0x5b, 0x74, 0xfa, 0x6e, 0x04, 0x46, 0x62, 0x35, 0x7d, 0x8a]),
                              bytes([0x1a, 0xb2, 0xf3, 0x19, 0x36, 0x07, 0x8b, 0x40, 0x23, 0xb6, 0xf2, 0xe3, 0xdc, 0x52, 0x43, 0xe8, 0x7b, 0xae, 0xe3, 0x6a, 0x33, 0x6a, 0xd1, 0x05, 0x87, 0xc8, 0xdc, 0x41, 0x8f, 0x26, 0xc4, 0xa2, 0x52, 0x82, 0x5c, 0xf2, 0x2c, 0x5b, 0xcc, 0x30, 0x5a, 0x09, 0xbf, 0xfa, 0x35, 0x69, 0x01, 0x93, 0x38, 0xa9, 0x91, 0x5a, 0xf4, 0xcc, 0xad, 0xfd, 0x18, 0x40, 0x88, 0xb9, 0xff, 0x1e, 0x74, 0xf2, 0x9e, 0xea, 0xc5, 0x98, 0xdb, 0xdb, 0x6c, 0x79, 0x1a, 0x74, 0x1a, 0xc3, 0x7e, 0xd7, 0x27, 0xa0, 0x7a, 0xeb, 0x1e, 0x8e, 0xe5, 0xeb, 0x5f, 0x44, 0x67, 0xb8, 0x86, 0xa6, 0xd2, 0x49, 0x2d, 0x4b, 0x32, 0x6f, 0x6e, 0xb0, 0xc2, 0xa2, 0xfc, 0xf0, 0xd1, 0x3d, 0x8d, 0x2c, 0x8f, 0x1d, 0xa8, 0xba, 0x74, 0x18, 0x3f, 0xa2, 0xe5, 0x5e, 0x7d, 0x70, 0xb3, 0x2b, 0x27, 0x71, 0x2e, 0x58, 0x08, 0xcc]),
                              bytes([0xe0, 0xa8, 0xc8, 0x10, 0x86, 0x50, 0x28, 0x48, 0x06, 0x2b, 0x39, 0x2e, 0x42, 0xb4, 0x20, 0x35, 0xbe, 0xca, 0x7d, 0xb5, 0x93, 0xf3, 0xc0, 0x20, 0x42, 0x13, 0x19, 0x19, 0xa4, 0xd8, 0xcb, 0x2a, 0x95, 0xa9, 0x85, 0xdc, 0xe6, 0x36, 0x36, 0x83, 0x31, 0x0d, 0x40, 0xbc, 0x9f, 0x47, 0xcd, 0xd7, 0xb5, 0x34, 0x26, 0xd7, 0xfa, 0x90, 0x5b, 0x0f, 0xfc, 0x0d, 0x37, 0xe8, 0xf4, 0x9c, 0xac, 0xb7, 0x4d, 0xa4, 0xd0, 0xde, 0x41, 0x11, 0x23, 0x07, 0x6d, 0x6b, 0xf9, 0x84, 0xb7, 0x4e, 0xe1, 0x94, 0x77, 0x00, 0x3d, 0x74, 0xa6, 0xda, 0xf9, 0xdf, 0xae, 0x24, 0x88, 0xba, 0x9b, 0xbe, 0xde, 0x61, 0x46, 0x96, 0x9e, 0x55, 0x4e, 0x4c, 0xda, 0xc7, 0x0c, 0x7d, 0xc5, 0x06, 0x7d, 0x78, 0x17, 0x1c, 0xa2, 0x11, 0xa4, 0x0d, 0x17, 0x38, 0x74, 0x37, 0xfd, 0xb2, 0x30, 0xab, 0x71, 0x1c, 0xb2, 0x67])]
        output_tags = [bytes([0xfd, 0xbf, 0x63, 0x46, 0x77, 0x08, 0x9f, 0x7e, 0xac, 0xab, 0x3f, 0x38, 0xa0, 0x27, 0x72, 0xbe]),
                       bytes([0x6a, 0x29, 0x75, 0x19, 0x3e, 0xa5, 0x20, 0x98, 0xff, 0x5a, 0x84, 0x85, 0xb0, 0xe0, 0x03, 0xff]),
                       bytes([0x27, 0x08, 0x01, 0x50, 0xaf, 0x4a, 0x96, 0x87, 0x94, 0xc2, 0xc5, 0x08, 0xba, 0xef, 0x8d, 0x6f])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_128_meta_8_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 8 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1024, ADLen    64 (in bits)
        my_key = bytes([0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa])
        my_nonce = bytes([0xcf, 0xc0, 0xb1, 0xa2, 0x93, 0x84, 0x75, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xde, 0xcf, 0xc0, 0xb1, 0xa2, 0x93, 0x84, 0x75, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd])
        my_message = bytes([0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea])
        my_metadata = bytes([0xcb, 0x4c, 0xcc, 0x4d, 0xcd, 0x4e, 0xce, 0x4f])
        output_ciphertexts = [bytes([0xc8, 0xdb, 0x8e, 0x0b, 0x99, 0xfb, 0x98, 0xec, 0x43, 0x1c, 0x47, 0xa1, 0x61, 0x76, 0x00, 0x3b, 0x60, 0x4d, 0x19, 0xf7, 0x07, 0x6b, 0x6e, 0xce, 0x4d, 0xb5, 0x43, 0x2f, 0x49, 0x99, 0x81, 0xf9, 0xfd, 0x41, 0xa0, 0x94, 0xc9, 0xe9, 0x77, 0xf3, 0x44, 0x9e, 0xbb, 0xd4, 0xc2, 0xdc, 0x2e, 0xfa, 0x65, 0x60, 0x09, 0xca, 0x60, 0x50, 0x48, 0x9a, 0x4b, 0x43, 0x73, 0x5b, 0x72, 0xac, 0xc5, 0x53, 0x7b, 0xf8, 0xf0, 0xf7, 0xdf, 0xec, 0x7c, 0xe0, 0x25, 0xd8, 0xa4, 0x87, 0xef, 0x3a, 0xec, 0x20, 0x6c, 0xb9, 0x47, 0x5e, 0x49, 0x9c, 0x91, 0x51, 0x27, 0x0e, 0xb9, 0xe1, 0xdb, 0x46, 0x2d, 0xb8, 0x37, 0xd6, 0xd5, 0xca, 0x20, 0x62, 0x29, 0xef, 0xa8, 0xc8, 0x22, 0x4a, 0x13, 0xf9, 0x11, 0x40, 0x96, 0xb7, 0xff, 0x4f, 0x80, 0x3b, 0x16, 0x28, 0x4a, 0x2b, 0x10, 0xcc, 0x16, 0xa0, 0x52, 0x45]),
                              bytes([0x1d, 0x4c, 0x0c, 0x84, 0x0c, 0x83, 0x9a, 0x6e, 0xa5, 0x86, 0x00, 0x32, 0x99, 0x05, 0xaa, 0xff, 0xe1, 0x80, 0x2f, 0x83, 0xa0, 0x4e, 0xa5, 0xbf, 0xbb, 0x5a, 0x41, 0xa5, 0xcc, 0x0e, 0x32, 0x3a, 0xd9, 0x72, 0xf1, 0x10, 0x48, 0xbd, 0xe7, 0x6f, 0x5d, 0xa3, 0x54, 0x81, 0xc3, 0x2d, 0x24, 0xe4, 0x69, 0x6e, 0xd0, 0xc7, 0x59, 0xc4, 0xc4, 0x13, 0xd0, 0x1d, 0x91, 0x20, 0x6a, 0xbb, 0x92, 0xd7, 0xfd, 0x8a, 0xca, 0xcc, 0xd8, 0x52, 0xf6, 0x42, 0x82, 0x8e, 0xa4, 0x18, 0x0f, 0xac, 0x5d, 0xba, 0xb6, 0x75, 0xe6, 0xf5, 0x68, 0xe9, 0x5e, 0x8b, 0x6a, 0xe5, 0x7a, 0x14, 0x8f, 0xf0, 0x37, 0x84, 0xc8, 0xc2, 0xb4, 0x1a, 0xa8, 0xa7, 0xab, 0x8d, 0xb8, 0x3a, 0x8a, 0x16, 0x57, 0x08, 0x86, 0xa8, 0xf2, 0x1f, 0x8d, 0xd7, 0x60, 0x00, 0x3f, 0xc4, 0x35, 0x90, 0x55, 0x3b, 0x1e, 0x63, 0xa9, 0x8a]),
                              bytes([0x18, 0xbe, 0x99, 0xf5, 0x1e, 0xce, 0xe7, 0xab, 0x67, 0x3e, 0x91, 0x06, 0xa5, 0x9b, 0xaa, 0xbc, 0x6f, 0x13, 0x3c, 0xc0, 0x43, 0x82, 0xe0, 0xe5, 0x12, 0x44, 0xb5, 0x33, 0xdd, 0xad, 0xb2, 0xbc, 0x2a, 0xc9, 0x9b, 0xd6, 0x3d, 0x22, 0xad, 0x08, 0xac, 0x5a, 0xab, 0xe9, 0xb6, 0xef, 0x41, 0xe6, 0x75, 0x24, 0x24, 0xd0, 0x84, 0x67, 0xc8, 0x77, 0xa7, 0x42, 0x85, 0x7a, 0xc4, 0x41, 0x6f, 0xc3, 0xd5, 0xff, 0xcb, 0x60, 0x3b, 0x27, 0x86, 0x81, 0x18, 0x57, 0x57, 0x8e, 0xfc, 0x40, 0xdb, 0x05, 0x72, 0x86, 0x77, 0xe9, 0x50, 0x41, 0x3a, 0x42, 0x59, 0x7f, 0x9a, 0x0e, 0xb2, 0xe4, 0x3b, 0xe8, 0x5e, 0x89, 0xb5, 0x83, 0xb6, 0xd8, 0xac, 0xba, 0x12, 0xd9, 0xe0, 0x23, 0xf9, 0x0f, 0x29, 0x46, 0x22, 0x6b, 0x64, 0x75, 0x34, 0xec, 0xd4, 0x51, 0x4b, 0x7c, 0xb4, 0x33, 0xf0, 0xd8, 0xec, 0x91])]
        output_tags = [bytes([0xba, 0xb7, 0xcc, 0x0c, 0xd6, 0xd0, 0x67, 0x4f, 0x7c, 0x5c, 0xb9, 0x70, 0xdf, 0x32, 0xc9, 0xca]),
                       bytes([0x2d, 0xe7, 0xcf, 0x2b, 0xad, 0xe9, 0xc8, 0x3a, 0x78, 0x19, 0xc4, 0x88, 0xe0, 0xbd, 0x15, 0xd2]),
                       bytes([0xed, 0xea, 0xe4, 0x64, 0x21, 0x96, 0x02, 0x8f, 0x51, 0x6f, 0x47, 0x03, 0x55, 0xc1, 0x1a, 0xaa])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_128_meta_16_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 16 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1024, ADLen   128 (in bits)
        my_key = bytes([0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2])
        my_nonce = bytes([0x87, 0x78, 0x69, 0x5a, 0x4b, 0x3c, 0x2d, 0x1e, 0x0f, 0x00, 0xf1, 0xe2, 0xd3, 0xc4, 0xb5, 0xa6, 0x96, 0x87, 0x78, 0x69, 0x5a, 0x4b, 0x3c, 0x2d, 0x1e, 0x0f, 0x00, 0xf1, 0xe2, 0xd3, 0xc4, 0xb5])
        my_message = bytes([0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13])
        output_ciphertexts = [bytes([0x50, 0xfa, 0x80, 0xa4, 0xe9, 0x6f, 0xc8, 0xa2, 0x25, 0x6b, 0x7a, 0x9c, 0x29, 0xc0, 0x5d, 0xc7, 0x91, 0x71, 0xe8, 0x0a, 0xaa, 0x3a, 0xd4, 0xb7, 0x9a, 0xc0, 0xfe, 0x5d, 0x61, 0xff, 0xe8, 0xb0, 0xcd, 0x24, 0x80, 0x87, 0x7b, 0xfc, 0xdc, 0x52, 0x5a, 0xa4, 0x3b, 0x2c, 0x83, 0x05, 0xc1, 0x0e, 0xe4, 0xcd, 0x4c, 0x14, 0x56, 0x59, 0x83, 0xd8, 0x33, 0x7f, 0xe8, 0xd7, 0x23, 0x84, 0x79, 0x6d, 0x82, 0x57, 0xa9, 0x7f, 0x3e, 0xdd, 0x5d, 0x0b, 0x2c, 0xf5, 0x7d, 0x5a, 0x63, 0x00, 0xf7, 0xcd, 0x91, 0xda, 0xe8, 0x59, 0x7f, 0xb4, 0x54, 0xaa, 0xbe, 0x4f, 0x20, 0x9d, 0x47, 0xa9, 0x74, 0xcb, 0x04, 0x59, 0x73, 0x01, 0x57, 0x98, 0x87, 0xab, 0xc7, 0x86, 0xae, 0x88, 0xfa, 0x5b, 0x01, 0x42, 0xfa, 0x4f, 0x97, 0x62, 0x0f, 0x00, 0x56, 0xe7, 0xa9, 0x81, 0xe7, 0x87, 0x59, 0x9f, 0xf7, 0xa3]),
                              bytes([0x29, 0xd9, 0x3e, 0x1b, 0x0b, 0xf3, 0x88, 0xf9, 0xe8, 0xba, 0x3f, 0x6f, 0x16, 0x7b, 0xb7, 0xaa, 0x5d, 0x55, 0x96, 0x78, 0xa8, 0x88, 0x4b, 0x58, 0x6b, 0xe4, 0x07, 0xbb, 0xd5, 0x48, 0x5e, 0x04, 0x4b, 0xfe, 0x98, 0x9a, 0x19, 0x66, 0x1c, 0xa2, 0x7b, 0x65, 0x82, 0xbb, 0x07, 0xe1, 0xce, 0xe9, 0x64, 0x44, 0x95, 0xa4, 0xac, 0x5a, 0xaf, 0x94, 0x3e, 0xa3, 0xa2, 0xba, 0xc8, 0x33, 0x6a, 0xe5, 0xa2, 0x83, 0x82, 0x33, 0xb0, 0x32, 0x06, 0xa5, 0xf8, 0x20, 0x99, 0xe4, 0x99, 0x80, 0x58, 0xc9, 0x89, 0xc4, 0x10, 0x7d, 0x58, 0xdc, 0x00, 0x32, 0xa3, 0x8a, 0xf5, 0x60, 0xe1, 0x2f, 0xd5, 0x2c, 0x0e, 0x83, 0x76, 0x71, 0x23, 0xac, 0xba, 0xd4, 0x95, 0xd8, 0xc8, 0xde, 0xb3, 0xef, 0xa1, 0xc2, 0xb9, 0xa2, 0x71, 0x87, 0xaf, 0xb5, 0xf8, 0x82, 0x98, 0xc5, 0x3b, 0x58, 0x77, 0x35, 0x52, 0x33]),
                              bytes([0x1b, 0x5e, 0xdb, 0xbb, 0x07, 0x31, 0x2e, 0x57, 0x10, 0xab, 0xfa, 0xfc, 0x31, 0xdd, 0xc0, 0x6a, 0x82, 0xc0, 0xd2, 0x73, 0x38, 0x38, 0x72, 0x30, 0x43, 0x91, 0xea, 0x82, 0x52, 0xe8, 0x91, 0x65, 0x0b, 0x6a, 0x15, 0x6d, 0x1c, 0x35, 0x8c, 0x74, 0x93, 0x31, 0xe3, 0x39, 0xb4, 0x2c, 0xfe, 0xeb, 0xae, 0xbb, 0x7c, 0x95, 0x7a, 0xf0, 0xa8, 0xd6, 0x8d, 0xb1, 0xaa, 0xb8, 0xc4, 0x2a, 0x00, 0x61, 0x03, 0x8f, 0xba, 0xec, 0xe7, 0x73, 0x1c, 0xc9, 0xf2, 0xdb, 0x49, 0x88, 0xfa, 0x1f, 0xb5, 0x1d, 0xc1, 0x57, 0x1d, 0x10, 0x03, 0x69, 0xdf, 0x43, 0x0d, 0xbb, 0xc5, 0xaf, 0xdd, 0x63, 0x05, 0x37, 0x3a, 0xd3, 0x98, 0x61, 0x50, 0xe7, 0xf7, 0x71, 0x85, 0x37, 0x5b, 0xb3, 0xf8, 0x85, 0xad, 0x3e, 0x79, 0xde, 0xbf, 0xb2, 0xb4, 0xa5, 0xc1, 0x33, 0x07, 0x58, 0x81, 0xd7, 0xf6, 0xc5, 0x98, 0xbd])]
        output_tags = [bytes([0x0f, 0xc5, 0x08, 0x84, 0x85, 0x32, 0x29, 0xdb, 0x9b, 0xe1, 0xff, 0x07, 0x82, 0x47, 0xcc, 0x84]),
                       bytes([0xff, 0xeb, 0xd3, 0x51, 0x26, 0x94, 0x54, 0x2a, 0xe1, 0x35, 0xdd, 0x68, 0xd9, 0x0c, 0x64, 0x95]),
                       bytes([0xf4, 0x44, 0x5a, 0xfa, 0xa8, 0xdc, 0x70, 0xad, 0xba, 0x44, 0x29, 0x1a, 0xb2, 0x4f, 0x37, 0x40])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_128_meta_32_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 32 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1024, ADLen   256 (in bits)
        my_key = bytes([0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22])
        my_nonce = bytes([0xf7, 0xe8, 0xd9, 0xca, 0xbb, 0xac, 0x9d, 0x8e, 0x7f, 0x70, 0x61, 0x52, 0x43, 0x34, 0x25, 0x16, 0x06, 0xf7, 0xe8, 0xd9, 0xca, 0xbb, 0xac, 0x9d, 0x8e, 0x7f, 0x70, 0x61, 0x52, 0x43, 0x34, 0x25])
        my_message = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12])
        my_metadata = bytes([0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91, 0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97, 0x17, 0x98, 0x18, 0x99, 0x19, 0x9a, 0x1a, 0x9b])
        output_ciphertexts = [bytes([0x09, 0x3a, 0x85, 0x4c, 0x3c, 0xbb, 0x5d, 0x13, 0x2e, 0x92, 0xe4, 0x84, 0x2e, 0xd9, 0xb1, 0x13, 0x97, 0xe8, 0x24, 0xde, 0x95, 0x7b, 0x8c, 0x61, 0x24, 0x80, 0x3f, 0xc2, 0x6f, 0xcd, 0x4a, 0x52, 0x0f, 0x8d, 0x78, 0xb6, 0x84, 0x0d, 0xe2, 0x45, 0x49, 0x72, 0xfd, 0x21, 0xee, 0x9f, 0x8a, 0xd6, 0x07, 0x4d, 0x2f, 0x26, 0x8a, 0xa1, 0x3a, 0x59, 0xda, 0x3b, 0x5b, 0xb5, 0xd6, 0x7d, 0x79, 0x17, 0x5b, 0x40, 0x5a, 0x83, 0x89, 0xde, 0xc7, 0xa3, 0xa7, 0xd0, 0xc8, 0x1b, 0xab, 0x35, 0x70, 0xba, 0x6e, 0x4b, 0xe6, 0xe3, 0xab, 0x49, 0xb6, 0x28, 0x52, 0xc0, 0xb7, 0xd2, 0x24, 0x51, 0xae, 0x41, 0xa8, 0xaa, 0x3a, 0xde, 0xa2, 0x2f, 0x4b, 0x08, 0x6f, 0xb4, 0x66, 0x53, 0xa4, 0x4b, 0x25, 0x13, 0x76, 0x7f, 0xb6, 0x03, 0x49, 0x0e, 0x02, 0x62, 0x94, 0x22, 0x24, 0xb4, 0x58, 0xe6, 0xf6, 0x21]),
                              bytes([0xca, 0xf8, 0xdd, 0x91, 0xc6, 0xd3, 0x13, 0x82, 0x4f, 0x29, 0xdb, 0x4f, 0x59, 0x37, 0x38, 0x8b, 0x0f, 0xaf, 0x72, 0x30, 0xe7, 0x58, 0xcd, 0x0a, 0x9d, 0x86, 0x24, 0xaa, 0x24, 0xbd, 0x59, 0x6f, 0x23, 0xc1, 0x83, 0xbf, 0xfe, 0xff, 0xd9, 0x88, 0x83, 0x8e, 0xda, 0xa8, 0x37, 0xb1, 0x1d, 0x56, 0x62, 0x1b, 0x6e, 0x47, 0xa6, 0x3f, 0x49, 0x9c, 0x5d, 0x36, 0x65, 0x77, 0xcb, 0x22, 0xd1, 0x22, 0x1d, 0xa8, 0x25, 0x42, 0x55, 0xdd, 0xd4, 0xe2, 0x88, 0x92, 0x02, 0xaa, 0x65, 0x72, 0xd3, 0xe0, 0xa1, 0x41, 0xd6, 0xc3, 0x01, 0xcc, 0x70, 0x7d, 0x8b, 0x63, 0x96, 0x33, 0x36, 0x8c, 0xad, 0xd7, 0x97, 0x3a, 0x03, 0x85, 0xf6, 0x6c, 0xfe, 0xd1, 0x03, 0xed, 0x54, 0xdc, 0xf4, 0x8b, 0x26, 0x02, 0x7f, 0xbe, 0x62, 0x58, 0x51, 0x13, 0x13, 0xbc, 0xb1, 0x9f, 0x7f, 0xb3, 0x12, 0x07, 0xfb, 0x41]),
                              bytes([0x4a, 0x5d, 0xa2, 0x8d, 0x20, 0xde, 0x68, 0x27, 0x6f, 0x3e, 0x98, 0x8f, 0x59, 0x1f, 0x03, 0xfb, 0x09, 0x84, 0xcb, 0x14, 0xe3, 0x9e, 0x43, 0xb2, 0x0a, 0x5d, 0x5c, 0x77, 0xf3, 0xef, 0x2f, 0xeb, 0x8b, 0x13, 0xaf, 0xf2, 0xba, 0x32, 0x6b, 0x02, 0x65, 0x54, 0xd4, 0x81, 0x66, 0xbe, 0x31, 0xb5, 0x12, 0xf4, 0x76, 0x34, 0x35, 0x3f, 0x4e, 0xe6, 0x3a, 0x6c, 0x69, 0x5f, 0xfe, 0x9c, 0x13, 0x51, 0xc8, 0x15, 0x95, 0x33, 0xe8, 0xf2, 0xbf, 0x66, 0x6a, 0x5c, 0x8c, 0x7f, 0x46, 0x6e, 0xdc, 0xfd, 0xb5, 0x6c, 0xbf, 0x3c, 0x84, 0xd7, 0x5f, 0x29, 0x9b, 0x5f, 0x24, 0xc5, 0xd4, 0x9b, 0x02, 0x12, 0xfd, 0x8e, 0x5c, 0xcb, 0x17, 0x8f, 0xac, 0x14, 0x20, 0xff, 0x74, 0x4a, 0xf7, 0xdd, 0x2f, 0x25, 0x9f, 0x73, 0x1e, 0xad, 0x1f, 0x7d, 0xec, 0xac, 0xee, 0x10, 0x9c, 0x1e, 0xde, 0xfa, 0xc0, 0xfe])]
        output_tags = [bytes([0x99, 0x3b, 0xd9, 0x75, 0x34, 0x36, 0x78, 0x5a, 0xd9, 0x7b, 0x03, 0x43, 0x04, 0x59, 0x7b, 0x9b]),
                       bytes([0x75, 0x8d, 0x4c, 0x79, 0xe5, 0x3f, 0x1c, 0x3b, 0xd7, 0xe0, 0x20, 0xdc, 0xc5, 0xe8, 0x54, 0x19]),
                       bytes([0xa6, 0x50, 0xd0, 0x91, 0xa5, 0xba, 0xde, 0x5c, 0x6c, 0xc2, 0xd4, 0xd3, 0x91, 0xd2, 0x7a, 0xb9])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_16_msg_128_meta_128_nonce_32(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 128 Bytes
            Nonce Size - 32 Bytes
        """
        # keyLen   128, nonceLen   256, dataLen  1024, ADLen  1024 (in bits)
        my_key = bytes([0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2])
        my_nonce = bytes([0x97, 0x88, 0x79, 0x6a, 0x5b, 0x4c, 0x3d, 0x2e, 0x1f, 0x10, 0x01, 0xf2, 0xe3, 0xd4, 0xc5, 0xb6, 0xa6, 0x97, 0x88, 0x79, 0x6a, 0x5b, 0x4c, 0x3d, 0x2e, 0x1f, 0x10, 0x01, 0xf2, 0xe3, 0xd4, 0xc5])
        my_message = bytes([0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2])
        my_metadata = bytes([0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91, 0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97, 0x17, 0x98, 0x18, 0x99, 0x19, 0x9a, 0x1a, 0x9b, 0x1b, 0x9c, 0x1c, 0x9d, 0x1d, 0x9e, 0x1e, 0x9f, 0x1f, 0xa0, 0x20, 0xa1, 0x21, 0xa2, 0x22, 0xa3, 0x23, 0xa4, 0x24, 0xa5, 0x25, 0xa6, 0x26, 0xa7, 0x27, 0xa8, 0x28, 0xa9, 0x29, 0xaa, 0x2a, 0xab, 0x2b, 0xac, 0x2c, 0xad, 0x2d, 0xae, 0x2e, 0xaf, 0x2f, 0xb0, 0x30, 0xb1, 0x31, 0xb2, 0x32, 0xb3, 0x33, 0xb4, 0x34, 0xb5, 0x35, 0xb6, 0x36, 0xb7, 0x37, 0xb8, 0x38, 0xb9, 0x39, 0xba, 0x3a, 0xbb, 0x3b, 0xbc, 0x3c, 0xbd, 0x3d, 0xbe, 0x3e, 0xbf, 0x3f, 0xc0, 0x40, 0xc1, 0x41, 0xc2, 0x42, 0xc3, 0x43, 0xc4, 0x44, 0xc5, 0x45, 0xc6, 0x46, 0xc7, 0x47, 0xc8, 0x48, 0xc9, 0x49, 0xca, 0x4a, 0xcb])
        output_ciphertexts = [bytes([0xe3, 0x5a, 0xdb, 0xed, 0x82, 0xbb, 0xa8, 0x04, 0x6b, 0x23, 0xd5, 0x0f, 0x38, 0x90, 0xf1, 0x48, 0x45, 0xce, 0x35, 0x0b, 0xc2, 0x37, 0x6c, 0x9a, 0x6f, 0x24, 0x69, 0x8d, 0xa0, 0x8d, 0x1a, 0x1d, 0xf4, 0xa3, 0x47, 0x75, 0xe9, 0x33, 0xf6, 0xab, 0xa1, 0xae, 0x5a, 0xea, 0x17, 0xc6, 0x23, 0xfe, 0x84, 0x71, 0xab, 0x77, 0xfd, 0x76, 0x8c, 0x9c, 0xee, 0xa0, 0x37, 0xc9, 0x3d, 0xf6, 0x52, 0xb6, 0xe7, 0x1c, 0xcc, 0xdf, 0x97, 0xa8, 0x29, 0x62, 0x47, 0x31, 0xe2, 0x3d, 0x0b, 0x0f, 0x6c, 0x2c, 0x6d, 0xa5, 0x30, 0x5c, 0x54, 0xbd, 0x50, 0x6e, 0xe8, 0xcb, 0x54, 0xb2, 0xa6, 0x96, 0xb4, 0x4a, 0x72, 0xfc, 0x42, 0x4b, 0xd8, 0x54, 0xb0, 0xa9, 0x2a, 0x8f, 0xcd, 0x44, 0x10, 0x80, 0x36, 0x62, 0x20, 0x93, 0x4c, 0x09, 0xca, 0xf4, 0xbf, 0x5d, 0x54, 0xc7, 0x64, 0xc1, 0xbf, 0x0c, 0xe5, 0x41]),
                              bytes([0x17, 0xa0, 0xc1, 0x2f, 0x87, 0xeb, 0x1f, 0x8d, 0xda, 0x40, 0xda, 0xc3, 0xf8, 0x5f, 0x0f, 0x77, 0x44, 0xa3, 0xa7, 0xa5, 0xf6, 0xd5, 0x88, 0xd9, 0x1e, 0xd4, 0xf6, 0x2f, 0x87, 0xa3, 0x63, 0x93, 0xb7, 0x4e, 0xec, 0x94, 0x92, 0x83, 0x03, 0x11, 0x25, 0x5b, 0xce, 0xaf, 0xd0, 0x25, 0x03, 0x0f, 0x79, 0xab, 0x4a, 0xf4, 0x24, 0x59, 0x42, 0x33, 0x06, 0xa1, 0xeb, 0x75, 0xd4, 0x2d, 0x16, 0x5d, 0x91, 0x12, 0xc7, 0xb3, 0xcd, 0xe4, 0x47, 0x0b, 0xe8, 0x24, 0xd0, 0x6d, 0x82, 0xb8, 0x38, 0xb0, 0x36, 0x47, 0x9b, 0x4d, 0xa1, 0xce, 0xf2, 0xfe, 0x32, 0x4f, 0x6f, 0x0c, 0xc2, 0xf9, 0xbd, 0x61, 0xa3, 0x9c, 0x64, 0x4b, 0x34, 0xec, 0x9f, 0x65, 0x31, 0xf6, 0x03, 0xa0, 0x46, 0xd9, 0x12, 0x73, 0x3c, 0x97, 0x9e, 0x69, 0x90, 0x38, 0xa8, 0x88, 0x9b, 0x8a, 0x3e, 0x6e, 0xa4, 0x48, 0x7d, 0x58]),
                              bytes([0xc9, 0x03, 0x6a, 0xf6, 0x44, 0x9f, 0xb0, 0x8b, 0x3b, 0xf1, 0x6e, 0x40, 0xc8, 0x58, 0xae, 0x18, 0xc6, 0xc0, 0x3d, 0xf9, 0xbc, 0xb0, 0xaf, 0x22, 0x64, 0xf1, 0xdc, 0x9c, 0x00, 0x74, 0xbc, 0x51, 0x2e, 0x42, 0x28, 0x73, 0x6f, 0xd9, 0xbd, 0xb8, 0x89, 0x0a, 0x49, 0x23, 0x72, 0xd4, 0xab, 0x52, 0x60, 0xc2, 0xd0, 0x59, 0xa9, 0x82, 0x75, 0xf7, 0xb2, 0x19, 0xfc, 0x22, 0xd7, 0x79, 0x66, 0xf2, 0x8c, 0x96, 0xef, 0x55, 0xcd, 0x3f, 0x73, 0x0b, 0xdc, 0xdf, 0x2b, 0xcf, 0x29, 0x1b, 0xe1, 0xb9, 0xb0, 0x48, 0x0f, 0x70, 0x7c, 0x2f, 0x46, 0xfc, 0x1e, 0x2d, 0x8a, 0x2e, 0x58, 0xc2, 0xe2, 0x15, 0x7e, 0x65, 0x9d, 0x91, 0x6d, 0x1b, 0x67, 0xdb, 0x55, 0x00, 0x10, 0x57, 0xef, 0xb5, 0x59, 0x25, 0x39, 0xa0, 0xf7, 0xfa, 0x06, 0x34, 0xe1, 0x70, 0xe7, 0x52, 0xf5, 0x33, 0x4b, 0x7c, 0xf4, 0x69])]
        output_tags = [bytes([0xc8, 0x14, 0x58, 0x9e, 0xf0, 0x12, 0x5c, 0xc4, 0xe7, 0xc8, 0xca, 0x46, 0x52, 0xd1, 0x6b, 0x83]),
                       bytes([0x92, 0xef, 0x21, 0xfb, 0xfc, 0x04, 0x23, 0xc1, 0x2d, 0x84, 0x30, 0xe6, 0xe1, 0x5a, 0xd8, 0x55]),
                       bytes([0x0f, 0xce, 0xdc, 0xda, 0x32, 0xd7, 0x02, 0x92, 0x1c, 0x37, 0xd7, 0xd0, 0xa7, 0x26, 0xbf, 0x6e])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANE_k_128_msg_128_meta_128_nonce_128(self, test_workers):
        """
        Kravatte SANE Test Encryption/Decryption Tests:
            Key Size - 128 Bytes
            Message Size - 128 Bytes
            Metadata Size - 128 Bytes
            Nonce Size - 128 Bytes
        """
        # keyLen  1024, nonceLen  1024, dataLen  1024, ADLen  1024 (in bits)
        my_key = bytes([0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72])
        my_nonce = bytes([0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x02, 0xf3, 0xe4, 0xd5, 0xc6, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x02, 0xf3, 0xe4, 0xd5, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x02, 0xf3, 0xe4, 0xd4, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x02, 0xf3, 0xe3, 0xd4, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x02, 0xf2, 0xe3, 0xd4, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x11, 0x01, 0xf2, 0xe3, 0xd4, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f, 0x20, 0x10, 0x01, 0xf2, 0xe3, 0xd4, 0xc5, 0xb6, 0xa7, 0x98, 0x89, 0x7a, 0x6b, 0x5c, 0x4d, 0x3e, 0x2f])
        my_message = bytes([0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62])
        my_metadata = bytes([0xbb, 0x3c, 0xbc, 0x3d, 0xbd, 0x3e, 0xbe, 0x3f, 0xbf, 0x40, 0xc0, 0x41, 0xc1, 0x42, 0xc2, 0x43, 0xc3, 0x44, 0xc4, 0x45, 0xc5, 0x46, 0xc6, 0x47, 0xc7, 0x48, 0xc8, 0x49, 0xc9, 0x4a, 0xca, 0x4b, 0xcb, 0x4c, 0xcc, 0x4d, 0xcd, 0x4e, 0xce, 0x4f, 0xcf, 0x50, 0xd0, 0x51, 0xd1, 0x52, 0xd2, 0x53, 0xd3, 0x54, 0xd4, 0x55, 0xd5, 0x56, 0xd6, 0x57, 0xd7, 0x58, 0xd8, 0x59, 0xd9, 0x5a, 0xda, 0x5b, 0xdb, 0x5c, 0xdc, 0x5d, 0xdd, 0x5e, 0xde, 0x5f, 0xdf, 0x60, 0xe0, 0x61, 0xe1, 0x62, 0xe2, 0x63, 0xe3, 0x64, 0xe4, 0x65, 0xe5, 0x66, 0xe6, 0x67, 0xe7, 0x68, 0xe8, 0x69, 0xe9, 0x6a, 0xea, 0x6b, 0xeb, 0x6c, 0xec, 0x6d, 0xed, 0x6e, 0xee, 0x6f, 0xef, 0x70, 0xf0, 0x71, 0xf1, 0x72, 0xf2, 0x73, 0xf3, 0x74, 0xf4, 0x75, 0xf5, 0x76, 0xf6, 0x77, 0xf7, 0x78, 0xf8, 0x79, 0xf9, 0x7a, 0xfa, 0x7b])
        output_ciphertexts = [bytes([0x6a, 0xcd, 0x76, 0x21, 0x29, 0x09, 0x49, 0x69, 0x59, 0x22, 0x65, 0x02, 0x7d, 0x39, 0x46, 0x7c, 0xd7, 0xb8, 0x9d, 0x66, 0xef, 0x74, 0x1c, 0x9e, 0x61, 0xf0, 0xee, 0xbd, 0xfb, 0xeb, 0x92, 0x12, 0xaf, 0x68, 0x7d, 0x64, 0x32, 0xd7, 0x38, 0xcc, 0x22, 0xb5, 0x83, 0x50, 0x43, 0x12, 0xb4, 0x78, 0xfd, 0x16, 0x89, 0xa0, 0xbb, 0x9f, 0x28, 0x7b, 0xfd, 0xe9, 0xec, 0x05, 0xba, 0x93, 0x07, 0x64, 0x2e, 0x30, 0xc2, 0xda, 0x53, 0x84, 0x12, 0xd2, 0x70, 0x1a, 0xdb, 0xa4, 0xce, 0xe2, 0x0d, 0xd0, 0xe5, 0xa3, 0xc6, 0x16, 0x78, 0x09, 0xfb, 0x28, 0xe6, 0x07, 0x61, 0xe7, 0x7e, 0x0d, 0xc4, 0x29, 0xa3, 0x3e, 0xf4, 0xa6, 0x20, 0xa6, 0x86, 0x42, 0x20, 0xcc, 0x0d, 0xfa, 0x35, 0xc4, 0x8f, 0x60, 0xb9, 0xca, 0x85, 0x1e, 0x17, 0xd4, 0x81, 0x72, 0xae, 0x42, 0xa7, 0x8b, 0x97, 0xac, 0x0d, 0x72]),
                              bytes([0xb1, 0xa7, 0xcc, 0xad, 0x25, 0x73, 0xa2, 0xff, 0xd1, 0xcd, 0x08, 0x22, 0x68, 0x0c, 0xb1, 0xb0, 0x2d, 0x63, 0x5c, 0x1b, 0x33, 0xd7, 0xbd, 0x1e, 0x09, 0x82, 0xc9, 0xc6, 0x43, 0x8d, 0x37, 0x4a, 0xc9, 0x82, 0xa1, 0xa6, 0x48, 0x35, 0x88, 0xa1, 0x9c, 0x21, 0x44, 0x3a, 0x10, 0x73, 0xc6, 0x2c, 0x32, 0x14, 0x20, 0xa0, 0xa1, 0x0f, 0x6c, 0xe4, 0x8c, 0x37, 0x91, 0xd6, 0xc0, 0x15, 0x18, 0x92, 0x3d, 0x4e, 0x31, 0x57, 0xfd, 0x17, 0x4d, 0xf4, 0xe9, 0xef, 0xef, 0xf2, 0x7a, 0x0c, 0x77, 0x63, 0x17, 0x7f, 0x49, 0xeb, 0x2a, 0xfa, 0xd7, 0xc6, 0xc1, 0x61, 0xcd, 0x9f, 0x03, 0x50, 0x89, 0x51, 0x34, 0x32, 0x74, 0xbf, 0x4a, 0xe5, 0x3c, 0xc9, 0x0a, 0x58, 0xc4, 0x16, 0xcc, 0x04, 0xb6, 0x44, 0x21, 0xed, 0xaa, 0xe4, 0x14, 0x3d, 0xed, 0xfd, 0xc0, 0xf7, 0xb6, 0x9a, 0xda, 0x70, 0x3b, 0x7a]),
                              bytes([0x3c, 0x32, 0x02, 0x57, 0x9f, 0xe0, 0x22, 0x23, 0xb9, 0xf2, 0xb8, 0x52, 0xdc, 0x8e, 0x09, 0x59, 0x11, 0x60, 0x49, 0xdc, 0xa7, 0xa5, 0xb5, 0xff, 0x1e, 0xe0, 0xe5, 0xc5, 0x91, 0x7e, 0x53, 0xfb, 0xf6, 0x35, 0xfd, 0x31, 0x98, 0x57, 0xfd, 0xdc, 0x4b, 0x67, 0x29, 0xe9, 0x2a, 0xea, 0xe6, 0x48, 0xa2, 0x71, 0x90, 0xaa, 0xf2, 0x5d, 0x0e, 0x31, 0xfc, 0x0b, 0xf8, 0x1b, 0x94, 0xa0, 0x03, 0x4c, 0x44, 0xe5, 0x1c, 0xc2, 0xf3, 0x89, 0x23, 0x44, 0xa5, 0x9d, 0x3f, 0xd1, 0x8d, 0xbe, 0xcb, 0x6b, 0xb6, 0x37, 0x9f, 0x70, 0xf3, 0x91, 0x0a, 0xe5, 0x14, 0x1a, 0x1b, 0xf4, 0x47, 0xea, 0xdf, 0xae, 0xa3, 0x80, 0xa6, 0x92, 0x58, 0x97, 0xbb, 0x52, 0x7e, 0xd3, 0x2d, 0x3d, 0xee, 0x46, 0xac, 0x4e, 0x71, 0x57, 0x1f, 0x1c, 0xd0, 0x78, 0x7f, 0xf4, 0xbb, 0xbc, 0x64, 0xf3, 0x87, 0xcf, 0x5e, 0xe6])]
        output_tags = [bytes([0xca, 0x27, 0xc8, 0x84, 0x8b, 0x20, 0x43, 0xfa, 0x42, 0x8a, 0xbb, 0xf2, 0xe2, 0x93, 0xcf, 0x77]),
                       bytes([0x9e, 0x44, 0x95, 0x5c, 0xcf, 0x82, 0xe9, 0x2a, 0x57, 0xa3, 0x1a, 0xaa, 0x5f, 0xd3, 0xd5, 0x0f]),
                       bytes([0xa4, 0x7d, 0xc4, 0xc7, 0x3b, 0x36, 0x2e, 0xe9, 0xfc, 0x79, 0x29, 0x3a, 0xef, 0x3a, 0xd9, 0x23])]
        krav_sane_encrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid
