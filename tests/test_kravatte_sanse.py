import numpy as np
from kravatte import KravatteSANSE


# Official Test Vectors
class TestOfficialTestVectors_SANSE:
    """
    Test Vectors Generated From KeccakTools https://github.com/gvanas/KeccakTools
    """

    def test_kravatte_SANSE_k_16_msg_24_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 24 Bytes
            Metadata Size - 128 Bytes
        """
        my_key = bytes([0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a])
        my_message = bytes([0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2])
        my_metadata = bytes([0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45])
        output_ciphertexts = [bytes([0x30, 0x49, 0xb8, 0x29, 0xab, 0x48, 0x7a, 0x4e, 0xb6, 0xac, 0x1d, 0xb7, 0x37, 0x80, 0x0a, 0xeb, 0xb7, 0x53, 0x61, 0xa3, 0x98, 0x82, 0x33, 0xe4]),
                              bytes([0x3a, 0xb3, 0x42, 0xf2, 0x77, 0x5b, 0x99, 0x5b, 0xf6, 0x8e, 0x80, 0x15, 0x5b, 0xd4, 0x3c, 0xb6, 0xbf, 0xc0, 0x7c, 0xe5, 0x6c, 0xa7, 0xac, 0x68]),
                              bytes([0x6c, 0x09, 0xb5, 0x83, 0x53, 0x6d, 0xab, 0x09, 0x7b, 0xd6, 0xd8, 0x0b, 0x4d, 0xed, 0xe6, 0xa4, 0xef, 0x0f, 0x41, 0x4e, 0xb1, 0x84, 0x94, 0xc7])]
        output_tags = [bytes([0x1a, 0xc9, 0x03, 0x38, 0x8d, 0x1d, 0x0a, 0x9c, 0x61, 0xa5, 0xc1, 0xe3, 0x21, 0x20, 0x3d, 0x6e, 0xb0, 0xf1, 0x31, 0x7c, 0xbc, 0x5e, 0xcc, 0xd8, 0x1b, 0xe0, 0x40, 0x87, 0x09, 0x89, 0x85, 0x39]),
                       bytes([0x11, 0x9d, 0x7b, 0x3f, 0xd4, 0x40, 0xc0, 0xbc, 0x3e, 0x79, 0x3f, 0x12, 0x50, 0x53, 0x0f, 0xeb, 0xbb, 0xb2, 0x21, 0x40, 0xc1, 0x92, 0xd5, 0xb2, 0x1b, 0xed, 0xca, 0xcc, 0x46, 0xf0, 0xd2, 0x2a]),
                       bytes([0x02, 0xa7, 0x80, 0x21, 0xcf, 0x30, 0xdc, 0x80, 0xac, 0xa6, 0x4c, 0xd9, 0xcf, 0x01, 0xaa, 0x55, 0xc0, 0x28, 0x6c, 0x79, 0xbd, 0x93, 0xab, 0x0c, 0xd7, 0x24, 0x95, 0xb1, 0x14, 0x33, 0xca, 0xab])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_0_meta_16(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 24 Bytes
            Metadata Size - 128 Bytes
        """
        my_key = bytes([0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02])
        my_message = bytes([])
        my_metadata = bytes([0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0])
        output_ciphertexts = [bytes([]),
                              bytes([]),
                              bytes([])]
        output_tags = [bytes([0x75, 0x40, 0xd3, 0x69, 0x06, 0xd7, 0xb8, 0x6f, 0xaf, 0x1c, 0x2a, 0x1b, 0x54, 0x00, 0x6a, 0x11, 0xa7, 0x8c, 0x7a, 0x17, 0xa4, 0x46, 0x43, 0x55, 0x46, 0xa9, 0xe8, 0x97, 0xd8, 0x6c, 0x07, 0xce]),
                       bytes([0xfb, 0x5f, 0x30, 0xdb, 0x1e, 0xbf, 0x5c, 0x4d, 0xd1, 0xc7, 0x7b, 0xb8, 0x65, 0x65, 0x37, 0x0d, 0x56, 0x5c, 0xca, 0x0c, 0xd4, 0x10, 0x1e, 0x1b, 0x14, 0xf0, 0x1e, 0x5c, 0xa8, 0x4d, 0x55, 0x18]),
                       bytes([0xb7, 0xa7, 0x6d, 0x18, 0x0d, 0xd4, 0x37, 0x8c, 0x86, 0xce, 0x1f, 0x38, 0x78, 0x84, 0xe2, 0xbc, 0xfc, 0x08, 0x0e, 0xdc, 0xaa, 0xa5, 0x19, 0xed, 0xd3, 0x55, 0x21, 0x3c, 0x18, 0xda, 0xba, 0x13])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_24_msg_24_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 24 Bytes
            Message Size - 24 Bytes
            Metadata Size - 128 Bytes
        """

        my_key = bytes([0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_message = bytes([0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a])
        my_metadata = bytes([0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd])
        output_ciphertexts = [bytes([0xb6, 0xd8, 0xb4, 0xde, 0x06, 0x05, 0xc2, 0x42, 0x87, 0x17, 0xe3, 0xb0, 0xf1, 0xb6, 0x5e, 0x57, 0x30, 0x6e, 0xcb, 0xee, 0xb4, 0x6d, 0x91, 0x66]),
                              bytes([0x20, 0x18, 0x41, 0x05, 0x70, 0x41, 0xcb, 0xf0, 0x54, 0x69, 0x9c, 0x85, 0xdc, 0x58, 0xfd, 0x43, 0x73, 0x0c, 0x48, 0xf6, 0xda, 0xee, 0x73, 0x97]),
                              bytes([0x13, 0xfd, 0x77, 0x04, 0xb3, 0xca, 0x48, 0x52, 0xf8, 0x7e, 0xcb, 0x99, 0x8d, 0xa7, 0x36, 0x0d, 0x85, 0xe2, 0x00, 0x9f, 0x59, 0x94, 0xa9, 0x69])]
        output_tags = [bytes([0x3a, 0x1c, 0x4d, 0x8b, 0x1e, 0x87, 0xb8, 0xe4, 0xdc, 0xa6, 0x05, 0x7d, 0x9f, 0x84, 0x6d, 0xf4, 0x44, 0x08, 0xfb, 0x7d, 0xee, 0x9f, 0x79, 0x0f, 0x18, 0xcd, 0x06, 0x42, 0xa7, 0x4f, 0xfd, 0xb4]),
                       bytes([0x63, 0xcb, 0x2a, 0xfd, 0x4a, 0x56, 0x48, 0xb7, 0x53, 0xb9, 0x70, 0xe5, 0xb3, 0x8c, 0x1f, 0x06, 0x9e, 0x43, 0xaf, 0x0a, 0xab, 0x8a, 0xdd, 0x15, 0x24, 0xc3, 0x9a, 0x28, 0x81, 0x57, 0x04, 0x70]),
                       bytes([0xc0, 0x8a, 0xea, 0xfa, 0x8c, 0xaa, 0x8b, 0x54, 0x51, 0xb5, 0xf6, 0xd6, 0xb7, 0x28, 0x46, 0x25, 0xc8, 0xe0, 0x5f, 0xe6, 0x58, 0x8a, 0x20, 0x1b, 0xdd, 0xfb, 0x9a, 0x06, 0x14, 0xbb, 0x83, 0x1d])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_32_msg_24_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 32 Bytes
            Message Size - 24 Bytes
            Metadata Size - 128 Bytes
        """
        # keyLen   256, dataLen   192, ADLen  1024 (in bits)
        my_key = bytes([0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa])
        my_message = bytes([0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22])
        my_metadata = bytes([0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5])
        output_ciphertexts = [bytes([0x91, 0xd7, 0xcc, 0x47, 0x17, 0x3c, 0x1d, 0xeb, 0x3b, 0xc7, 0xce, 0xbf, 0xdc, 0x31, 0x06, 0x53, 0x41, 0xb0, 0x05, 0xbd, 0xf6, 0x9a, 0xa2, 0x7f]),
                              bytes([0x51, 0xd4, 0x6b, 0x0a, 0xad, 0x19, 0xec, 0x3d, 0x81, 0xf2, 0x94, 0xba, 0xe6, 0x49, 0x8d, 0x77, 0xef, 0xa2, 0x36, 0x8b, 0x33, 0xad, 0xe4, 0x68]),
                              bytes([0x29, 0xf8, 0x37, 0x52, 0xfc, 0x42, 0xfd, 0x5e, 0x26, 0x6b, 0x12, 0xc9, 0x25, 0xec, 0x30, 0x3a, 0x82, 0x5a, 0xab, 0x5d, 0x76, 0x75, 0x57, 0x31])]
        output_tags = [bytes([0xf6, 0x1a, 0xd4, 0x25, 0xaf, 0xd4, 0x85, 0x77, 0x3d, 0xcf, 0x44, 0x0d, 0x0a, 0xbd, 0xa4, 0xcc, 0x7e, 0x5b, 0x59, 0x8c, 0x0a, 0x14, 0x5b, 0x3a, 0x4b, 0x4b, 0x18, 0x18, 0xdc, 0xee, 0x7c, 0xe3]),
                       bytes([0xf4, 0xa8, 0x3f, 0xec, 0x48, 0xee, 0xaf, 0xb4, 0x13, 0x47, 0x66, 0xab, 0x41, 0xb7, 0xa6, 0xa8, 0xd1, 0xe5, 0x25, 0xcc, 0x31, 0xf1, 0x29, 0x73, 0x3c, 0x4c, 0xea, 0x51, 0xf9, 0xf6, 0x27, 0x48]),
                       bytes([0x5e, 0x26, 0xb8, 0xa8, 0x23, 0x69, 0x94, 0x18, 0x28, 0x08, 0x56, 0x96, 0x5a, 0x8f, 0xed, 0x95, 0x52, 0xb6, 0xf0, 0xa2, 0x23, 0x25, 0x91, 0xc6, 0x84, 0xa8, 0x92, 0xff, 0x99, 0x27, 0xc8, 0x94])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_64_msg_24_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 64 Bytes
            Message Size - 24 Bytes
            Metadata Size - 128 Bytes
        """
        # keyLen   512, dataLen   192, ADLen  1024 (in bits)
        my_key = bytes([0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a])
        my_message = bytes([0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82])
        my_metadata = bytes([0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15])
        output_ciphertexts = [bytes([0x69, 0x11, 0x83, 0xb0, 0xd3, 0xfe, 0x73, 0x3f, 0x39, 0x0d, 0x6a, 0x49, 0x46, 0x8d, 0xc8, 0x91, 0x67, 0x26, 0x00, 0x8d, 0x48, 0xdd, 0xb0, 0x3a]),
                              bytes([0x67, 0xda, 0xf0, 0x4f, 0x92, 0x1b, 0x25, 0x12, 0x0d, 0x16, 0xc5, 0x1a, 0xbb, 0xa0, 0x27, 0x4c, 0x55, 0xc0, 0x74, 0x3c, 0x32, 0x2a, 0x44, 0x3b]),
                              bytes([0xfa, 0xdc, 0x8e, 0x34, 0x80, 0xfa, 0xf6, 0x92, 0x32, 0xec, 0x7e, 0x2d, 0x2a, 0x60, 0x1e, 0x5c, 0x02, 0x09, 0x03, 0xbd, 0x12, 0x07, 0xf2, 0x0d])]
        output_tags = [bytes([0xed, 0x7c, 0x66, 0x4f, 0xce, 0x89, 0xfc, 0xb6, 0x11, 0x5c, 0x2d, 0x8c, 0x4d, 0xc9, 0xac, 0xed, 0xad, 0x1c, 0x4a, 0x66, 0x9a, 0xa7, 0x71, 0x93, 0x68, 0x0a, 0xf0, 0xfe, 0xee, 0x3a, 0x41, 0xaf]),
                       bytes([0x03, 0x39, 0xa3, 0xf6, 0x34, 0x31, 0x7d, 0xeb, 0x7b, 0x67, 0x7b, 0xe4, 0x7d, 0x38, 0x43, 0xa4, 0xc5, 0x75, 0x98, 0x72, 0x8d, 0xbe, 0x8f, 0x73, 0x8c, 0x17, 0x51, 0xda, 0xb2, 0x19, 0xd5, 0x76]),
                       bytes([0xf0, 0xc3, 0x88, 0xdb, 0x7e, 0x17, 0xd8, 0xcc, 0x68, 0xe4, 0x8c, 0x44, 0x49, 0xe9, 0xd1, 0x64, 0x9a, 0xf8, 0x2a, 0xf0, 0xdc, 0xed, 0x07, 0x25, 0x55, 0x08, 0x2b, 0x88, 0x4a, 0x75, 0xfd, 0xc0])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_128_msg_128_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 128 Bytes
            Message Size - 128 Bytes
            Metadata Size - 128 Bytes
        """
        # keyLen  1024, dataLen  1024, ADLen  1024 (in bits)
        my_key = bytes([0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2])
        my_message = bytes([0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7])
        my_metadata = bytes([0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad])
        output_ciphertexts = [bytes([0xc7, 0xdf, 0x60, 0xd5, 0x72, 0x6a, 0x4c, 0x96, 0xa7, 0x01, 0x7c, 0xf2, 0x4c, 0x42, 0x85, 0x5e, 0x9d, 0x6a, 0xbd, 0x03, 0x28, 0x72, 0xe8, 0xf6, 0xd7, 0x88, 0x98, 0x9d, 0xc7, 0x19, 0x4b, 0xca, 0xa6, 0xd5, 0xb2, 0x1e, 0xc3, 0x81, 0xee, 0xf2, 0xa9, 0xe2, 0xd1, 0xfb, 0xbd, 0x6b, 0x8f, 0x1e, 0x2c, 0x4b, 0x84, 0xc2, 0xe3, 0x55, 0xa8, 0x09, 0x3f, 0x46, 0x75, 0xdf, 0x57, 0x5e, 0x98, 0x8a, 0x8d, 0xcb, 0x72, 0xd2, 0xf1, 0x18, 0x8a, 0x67, 0xaa, 0xeb, 0x92, 0x40, 0xf1, 0x48, 0x5c, 0xc0, 0xed, 0xbb, 0x1c, 0xdb, 0xe0, 0x04, 0x20, 0xa4, 0x50, 0x08, 0xeb, 0xf8, 0xf5, 0x1d, 0x6b, 0x4e, 0x45, 0xe3, 0x5a, 0x35, 0x6f, 0x4f, 0xbc, 0xb7, 0xc0, 0xc3, 0x51, 0xda, 0x0d, 0x4a, 0x91, 0x5a, 0x0b, 0xbc, 0xdb, 0xed, 0xaf, 0x64, 0xf4, 0xac, 0x55, 0x28, 0x3e, 0x0a, 0x24, 0xe8, 0x6c, 0x7d]),
                              bytes([0xcf, 0x37, 0x66, 0x8c, 0xda, 0xfd, 0x0b, 0xab, 0x5c, 0x5b, 0x5b, 0xf9, 0x23, 0x94, 0xc4, 0xf8, 0x49, 0x2c, 0x2c, 0x06, 0x3a, 0x78, 0x55, 0xc8, 0x07, 0xb9, 0xb0, 0x8f, 0xe0, 0x97, 0xf4, 0x91, 0xb7, 0x2f, 0xf4, 0x33, 0x65, 0xa4, 0xc0, 0x4d, 0x0b, 0x63, 0x05, 0x17, 0x44, 0xeb, 0x85, 0xdc, 0x07, 0x3f, 0x70, 0xaa, 0xe0, 0x98, 0xb3, 0x47, 0x45, 0x83, 0x55, 0x26, 0x48, 0x67, 0x88, 0x8e, 0xac, 0x09, 0x3c, 0x96, 0x40, 0x56, 0x3c, 0xae, 0xd8, 0x31, 0x36, 0x71, 0x9f, 0xf8, 0xb5, 0xe6, 0x4f, 0x1b, 0x30, 0x28, 0x87, 0x5a, 0xd9, 0x00, 0xe2, 0x70, 0x66, 0xf9, 0x90, 0xb7, 0x53, 0xed, 0xd9, 0x5c, 0x31, 0x32, 0x78, 0xa5, 0x81, 0x57, 0x72, 0x5e, 0x6f, 0xf7, 0x41, 0x6b, 0x6e, 0x87, 0xc5, 0x54, 0xe8, 0xbf, 0x71, 0x68, 0xc8, 0x2b, 0xac, 0xc3, 0x07, 0x9d, 0xea, 0x23, 0x0d, 0x1f]),
                              bytes([0xbe, 0x2e, 0xa4, 0x4c, 0x56, 0x3c, 0xa5, 0xef, 0x1b, 0x2c, 0xfe, 0x73, 0x6f, 0xf4, 0x5d, 0xc9, 0x71, 0xe0, 0x41, 0x8d, 0xe0, 0x73, 0x5d, 0x47, 0xa8, 0xf6, 0x4d, 0x55, 0x7d, 0x58, 0x1b, 0x05, 0x3b, 0x29, 0x5f, 0xf0, 0x6d, 0xe4, 0x47, 0x46, 0xa9, 0xcd, 0x60, 0xf9, 0x00, 0xf8, 0x86, 0xd8, 0x8c, 0x9f, 0x64, 0x1c, 0x68, 0x10, 0xbf, 0x7d, 0x1d, 0x3a, 0x91, 0x2a, 0xa1, 0x06, 0xf5, 0xe0, 0x26, 0xe8, 0x3e, 0xa3, 0x16, 0x9b, 0x16, 0xaa, 0x90, 0x1d, 0x5a, 0x94, 0x08, 0x0a, 0x73, 0x5e, 0x53, 0xfa, 0x94, 0xaf, 0x72, 0x13, 0x10, 0x04, 0xc2, 0xa1, 0x79, 0xaa, 0xb1, 0xc1, 0xdc, 0x14, 0x4e, 0x26, 0x99, 0x44, 0xac, 0x8d, 0x38, 0xcb, 0x88, 0x9b, 0x4c, 0x6c, 0x4c, 0x37, 0x62, 0x8b, 0xcb, 0x09, 0x17, 0x54, 0x03, 0xe1, 0x88, 0xa6, 0xe0, 0x50, 0x67, 0x4a, 0x74, 0xc4, 0x15, 0xf5])]
        output_tags = [bytes([0xaa, 0xbd, 0x84, 0x87, 0xfc, 0x3e, 0x15, 0xc9, 0x63, 0x10, 0x59, 0x89, 0x17, 0xfb, 0x32, 0xfd, 0x27, 0x6a, 0x8f, 0xba, 0x60, 0x83, 0xee, 0x8f, 0x74, 0x7f, 0x32, 0xfd, 0x45, 0x80, 0x96, 0xb2]),
                       bytes([0x55, 0xf1, 0x90, 0xf7, 0x17, 0x65, 0x62, 0x01, 0x6f, 0x5c, 0x11, 0xa7, 0xd5, 0x11, 0x67, 0x8b, 0xaf, 0x92, 0xeb, 0x02, 0xc3, 0x73, 0xa4, 0x95, 0x10, 0xde, 0xa6, 0x6b, 0xbf, 0x56, 0x3c, 0x5e]),
                       bytes([0x04, 0xda, 0x3a, 0x82, 0x30, 0x0e, 0x46, 0xc0, 0x7a, 0xaa, 0xcd, 0xed, 0x54, 0x18, 0xd5, 0xfb, 0xa9, 0x1b, 0x4e, 0x6e, 0x70, 0x15, 0x80, 0xe1, 0x5d, 0x08, 0xc2, 0x51, 0xf5, 0x5f, 0x83, 0xc6])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_32_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 32 Bytes
            Metadata Size - 128 Bytes
        """
        # keyLen   128, dataLen   256, ADLen  1024 (in bits)
        my_key = bytes([0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_message = bytes([0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a])
        my_metadata = bytes([0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd])
        output_ciphertexts = [bytes([0x26, 0x67, 0xa7, 0x7d, 0xaf, 0xf3, 0x9e, 0x3d, 0xd4, 0x0b, 0x65, 0xa9, 0x6a, 0xb7, 0xd2, 0xa1, 0xcb, 0x0c, 0xd8, 0x0c, 0x44, 0x15, 0x79, 0xa6, 0xbb, 0xb3, 0x9f, 0xec, 0x16, 0xc0, 0x14, 0xc5]),
                              bytes([0x30, 0x11, 0xb4, 0xbf, 0xe0, 0xfb, 0x2f, 0x3b, 0x7e, 0xd0, 0x2c, 0x53, 0xa0, 0xc6, 0x39, 0x6b, 0xd5, 0x4e, 0x6c, 0x75, 0xc3, 0xd7, 0x19, 0x19, 0xa8, 0x0b, 0x7a, 0xf8, 0xf6, 0x95, 0x89, 0xf3]),
                              bytes([0x1e, 0xed, 0x26, 0x4d, 0x63, 0x64, 0x93, 0xd8, 0x22, 0xa2, 0x29, 0xb3, 0xb9, 0xf2, 0xaf, 0x49, 0xe0, 0x0d, 0xa4, 0x36, 0xc0, 0x88, 0xd8, 0x6e, 0x48, 0x31, 0x61, 0x49, 0xce, 0xd5, 0x52, 0x12])]
        output_tags = [bytes([0x2a, 0xfc, 0x75, 0xe2, 0x3a, 0xf1, 0x65, 0x9d, 0xdb, 0x1e, 0x4d, 0x38, 0x0a, 0xcc, 0x69, 0x79, 0xed, 0x22, 0x83, 0x55, 0xb4, 0x47, 0x31, 0x3a, 0xde, 0x7b, 0xe3, 0x50, 0xfe, 0x88, 0x54, 0x17]),
                       bytes([0x19, 0x12, 0xac, 0x49, 0xb2, 0x04, 0x05, 0xc0, 0x27, 0x4f, 0xef, 0x04, 0xde, 0x4d, 0x97, 0xf4, 0x16, 0x7c, 0x9d, 0x7a, 0x85, 0xb0, 0xe6, 0x77, 0x96, 0x8e, 0xe8, 0xd4, 0xdb, 0x9d, 0xd5, 0xf3]),
                       bytes([0x4f, 0xb7, 0xc5, 0x8e, 0xc4, 0x32, 0xfb, 0xd8, 0x47, 0xd3, 0xb9, 0x11, 0x1d, 0x90, 0xcf, 0xd1, 0x8a, 0x95, 0x7a, 0xbc, 0xf8, 0x9a, 0x91, 0x75, 0x56, 0x80, 0x27, 0xc8, 0x83, 0xdb, 0x51, 0xd5])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_64_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 64 Bytes
            Metadata Size - 128 Bytes
        """
        # keyLen   128, dataLen   512, ADLen  1024 (in bits)
        my_key = bytes([0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2])
        my_message = bytes([0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59])
        my_metadata = bytes([0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd])
        output_ciphertexts = [bytes([0x16, 0xac, 0x29, 0xa1, 0xd0, 0x21, 0xad, 0xad, 0x58, 0x1e, 0x7a, 0xc8, 0xb5, 0xa1, 0x68, 0xb9, 0xed, 0xc1, 0x96, 0x48, 0x55, 0x5e, 0x60, 0xc0, 0xea, 0xb5, 0xcc, 0x98, 0x19, 0xa9, 0x22, 0xd6, 0x6e, 0x03, 0x09, 0xed, 0x00, 0x39, 0x2f, 0xc1, 0x8e, 0x0a, 0xfa, 0x8e, 0x16, 0xa1, 0x14, 0xfb, 0xe0, 0x81, 0xb0, 0xfe, 0x03, 0xbb, 0xed, 0x19, 0xee, 0xfe, 0xb4, 0x2b, 0x65, 0x96, 0x0b, 0x74]),
                              bytes([0xa8, 0xe5, 0x1d, 0x6b, 0x79, 0x39, 0xfe, 0xf4, 0xf6, 0x12, 0xb1, 0xbc, 0x93, 0x11, 0xf1, 0xe7, 0xee, 0xf0, 0xff, 0x24, 0x0f, 0xb2, 0x9f, 0x06, 0x20, 0x38, 0x51, 0x06, 0x4e, 0x42, 0x16, 0xbd, 0x15, 0x75, 0xd7, 0x79, 0x17, 0x3f, 0x51, 0x8e, 0xf4, 0x11, 0xc4, 0x5b, 0x33, 0xba, 0x3f, 0x53, 0x44, 0x76, 0x4a, 0xc6, 0xfd, 0xb9, 0x13, 0xd3, 0x7a, 0x1a, 0x89, 0xca, 0xcd, 0x9e, 0x48, 0x81]),
                              bytes([0x72, 0x85, 0xbe, 0xca, 0x14, 0xab, 0x4d, 0xd4, 0x68, 0x3d, 0x62, 0x25, 0x9e, 0xdf, 0x37, 0x56, 0xdc, 0x2a, 0x31, 0x5a, 0xf4, 0x59, 0xee, 0x24, 0x33, 0x09, 0x5d, 0x8e, 0x3b, 0xc8, 0x2b, 0x5e, 0xc8, 0xac, 0x57, 0xce, 0xbb, 0xa4, 0x78, 0x6d, 0xe2, 0x34, 0x02, 0x32, 0x53, 0x3a, 0x6f, 0x1e, 0xfb, 0xbd, 0xeb, 0x89, 0x88, 0x1a, 0x41, 0x01, 0x9e, 0x45, 0x61, 0xaa, 0x15, 0x73, 0x04, 0xcc])]
        output_tags = [bytes([0x73, 0x03, 0x5a, 0x1f, 0xd3, 0x96, 0xdd, 0xb3, 0xfc, 0xcf, 0x00, 0x5b, 0x3a, 0xc0, 0x2d, 0xe7, 0xaa, 0x91, 0xf9, 0x51, 0x3e, 0x06, 0x29, 0xc5, 0x06, 0x0f, 0xad, 0x3a, 0xff, 0xd9, 0xec, 0xf7]),
                       bytes([0xbe, 0x05, 0x9c, 0x6a, 0x65, 0xd8, 0x3a, 0x2b, 0xaa, 0x1c, 0x2e, 0x7a, 0x05, 0x6a, 0x66, 0x95, 0xb3, 0x53, 0x35, 0xc6, 0xbe, 0x20, 0xdc, 0x9b, 0x70, 0xdd, 0xe3, 0x44, 0xba, 0xdd, 0xe7, 0x6e]),
                       bytes([0x24, 0xb7, 0xc7, 0xf0, 0x79, 0xf3, 0x26, 0x9c, 0xde, 0x5a, 0xb7, 0xfd, 0xd6, 0xb8, 0xef, 0x0f, 0xef, 0xa9, 0x35, 0x15, 0xfe, 0x67, 0x35, 0xf7, 0xb7, 0xff, 0x50, 0xd0, 0x00, 0x2c, 0xf6, 0x6e])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_128(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 128 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen  1024 (in bits)
        my_key = bytes([0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92])
        my_message = bytes([0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97])
        my_metadata = bytes([0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d])
        output_ciphertexts = [bytes([0xfe, 0x40, 0xac, 0x63, 0xb7, 0x68, 0xd0, 0xaf, 0x6c, 0xfe, 0x72, 0x04, 0xd5, 0x5e, 0xf7, 0xd4, 0x45, 0x08, 0x4d, 0x63, 0xe9, 0x9b, 0x99, 0x85, 0xbf, 0x56, 0xf4, 0x09, 0x3f, 0x0b, 0x20, 0x60, 0x8f, 0x47, 0x2f, 0x3d, 0xf7, 0x3b, 0x56, 0xdf, 0x0a, 0x17, 0xa0, 0x83, 0x1a, 0x7f, 0x4c, 0x7a, 0x0d, 0xef, 0xb7, 0x1c, 0xd1, 0x39, 0xe3, 0x87, 0x16, 0x94, 0x5d, 0xdf, 0x7c, 0xd3, 0xd5, 0x02, 0xda, 0xac, 0x88, 0x7f, 0x9e, 0xd5, 0x73, 0x33, 0xeb, 0x31, 0xd0, 0x8f, 0x09, 0x68, 0xad, 0xcf, 0x84, 0xa4, 0x24, 0x13, 0x0a, 0xed, 0xd8, 0x3a, 0x15, 0xdb, 0xf1, 0x1a, 0xc2, 0xa8, 0x96, 0x60, 0x25, 0xac, 0x05, 0x29, 0xd6, 0x8d, 0x9a, 0xc1, 0xf3, 0x3f, 0xbd, 0x27, 0x44, 0x8d, 0x2e, 0x03, 0x85, 0xda, 0xf9, 0x1d, 0xd5, 0x57, 0x4c, 0x01, 0xb8, 0x81, 0xa2, 0x88, 0xa8, 0x1e, 0x61, 0x72]),
                              bytes([0xd4, 0x96, 0xf7, 0x3c, 0xef, 0x8d, 0x1e, 0x75, 0x0f, 0xad, 0x78, 0x38, 0x11, 0x2f, 0x18, 0x00, 0xe0, 0x3c, 0x13, 0x9f, 0x3a, 0x79, 0x32, 0x62, 0x23, 0x39, 0x64, 0x58, 0x27, 0xaa, 0xe5, 0x20, 0x90, 0x1e, 0xaf, 0xc5, 0xee, 0x5f, 0x42, 0x35, 0x14, 0xe9, 0x1f, 0x30, 0x4f, 0x06, 0x7c, 0x92, 0xd5, 0x5b, 0xce, 0x06, 0x0d, 0x73, 0x8c, 0xe7, 0xf2, 0xdc, 0x1e, 0x75, 0x90, 0x5b, 0xa4, 0xa3, 0xcd, 0x2b, 0x6d, 0xbe, 0xaa, 0x38, 0x6f, 0x66, 0x5d, 0x83, 0x0c, 0xf1, 0x46, 0x4c, 0x65, 0xc8, 0x09, 0x44, 0x6a, 0x1f, 0x73, 0xde, 0xf0, 0xf2, 0x43, 0x90, 0xde, 0xca, 0x4f, 0xc3, 0x06, 0x4e, 0x11, 0xb9, 0x68, 0x24, 0x6f, 0xdc, 0x9d, 0xc9, 0xd1, 0x8a, 0x1a, 0xd3, 0x41, 0xd3, 0x24, 0x59, 0x7c, 0x17, 0x71, 0x38, 0xeb, 0xe7, 0x00, 0xea, 0xba, 0x6c, 0xcf, 0x45, 0x85, 0x60, 0x2b, 0xf2]),
                              bytes([0x8d, 0x00, 0xe2, 0x09, 0xb3, 0x84, 0xf8, 0x52, 0x78, 0x04, 0xe2, 0xa5, 0xcf, 0x6e, 0x07, 0xf0, 0x1b, 0xb4, 0xe9, 0xfb, 0xbc, 0x9d, 0x6a, 0x11, 0x30, 0xab, 0x31, 0x99, 0x8b, 0x4f, 0xde, 0x11, 0xf6, 0x3f, 0x4c, 0x7e, 0x82, 0xd6, 0x4f, 0xc4, 0x93, 0x1c, 0x22, 0x5a, 0x0c, 0x15, 0xa1, 0x37, 0x3e, 0x88, 0x55, 0x1d, 0x10, 0x8c, 0x6f, 0xa7, 0xe7, 0xb6, 0x73, 0x42, 0xc7, 0x8e, 0x6e, 0x42, 0xe2, 0x36, 0x5c, 0x65, 0x2d, 0xb6, 0x3d, 0x94, 0x49, 0xd3, 0x96, 0x9f, 0xd9, 0x8d, 0x2e, 0x22, 0x1b, 0xee, 0x6d, 0xb5, 0xc4, 0xf8, 0x79, 0x30, 0xe5, 0x04, 0xab, 0xef, 0x9a, 0x99, 0xc0, 0xc4, 0xc8, 0xaa, 0x78, 0xc6, 0x60, 0x7d, 0xdf, 0x2d, 0x98, 0xeb, 0xf8, 0x66, 0x3b, 0xcd, 0x51, 0x90, 0x4b, 0x7a, 0xab, 0x9c, 0x57, 0xdf, 0x4f, 0x31, 0xe7, 0x89, 0xd7, 0xa0, 0xd0, 0xea, 0xbc, 0xe0])]
        output_tags = [bytes([0xcc, 0xb6, 0xa1, 0xca, 0x8a, 0x6c, 0x7d, 0xbf, 0x86, 0x38, 0xbc, 0xc9, 0x3b, 0x9a, 0xff, 0x26, 0x65, 0x90, 0xe9, 0x2b, 0xec, 0xb1, 0xf6, 0x0f, 0x47, 0x30, 0xf0, 0x84, 0x8a, 0xc5, 0xdb, 0x75]),
                       bytes([0xed, 0x0c, 0x25, 0xf0, 0xd5, 0xd8, 0xcc, 0x3d, 0x2a, 0x3d, 0x7f, 0x80, 0x39, 0xaa, 0x4a, 0x31, 0xf3, 0x30, 0x38, 0x25, 0xb6, 0xeb, 0xdd, 0x11, 0xca, 0x43, 0xc7, 0x03, 0x0b, 0x76, 0xd1, 0x20]),
                       bytes([0x0a, 0xe5, 0xcb, 0xf6, 0xce, 0x26, 0x18, 0xe4, 0x41, 0x3f, 0xef, 0xe5, 0xef, 0x9b, 0x81, 0x5d, 0x26, 0xad, 0x71, 0x00, 0x3a, 0xc0, 0x2f, 0x4b, 0x2a, 0xdb, 0xaa, 0x31, 0x5b, 0x95, 0x34, 0x93])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_0(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 0 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen     0 (in bits)
        my_key = bytes([0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12])
        my_message = bytes([0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17])
        my_metadata = bytes([])
        output_ciphertexts = [bytes([0xf0, 0x2c, 0x19, 0x78, 0x3b, 0xf5, 0x66, 0x4a, 0x87, 0x73, 0x8e, 0xf7, 0x5c, 0x7e, 0x6a, 0xe3, 0x78, 0xc3, 0xd2, 0x26, 0x8a, 0x9a, 0xdd, 0x4a, 0xe8, 0xfd, 0xbf, 0x5e, 0x67, 0xce, 0x72, 0xb2, 0xd6, 0xa5, 0xca, 0x33, 0x4a, 0x80, 0xdb, 0x57, 0x2d, 0xe7, 0xc8, 0x33, 0xc6, 0x93, 0xe8, 0xf8, 0x7d, 0xb6, 0x7a, 0xc1, 0x9d, 0x9e, 0xbd, 0xba, 0xcb, 0x2f, 0x0f, 0x4c, 0x2a, 0x0f, 0xa7, 0xc1, 0xa5, 0x48, 0x37, 0xa1, 0xad, 0xc7, 0x13, 0x1f, 0xfd, 0x1d, 0x5f, 0xbf, 0x89, 0x18, 0xe6, 0x74, 0xb1, 0x96, 0xd9, 0xe3, 0x6f, 0x6a, 0xbe, 0xb7, 0x03, 0x98, 0xf2, 0xc3, 0x78, 0xbd, 0x03, 0x90, 0x19, 0x06, 0x1e, 0x33, 0x39, 0x47, 0xcb, 0xa3, 0xec, 0x0b, 0x46, 0x68, 0x8e, 0x3f, 0x4d, 0x7e, 0x40, 0x79, 0x38, 0x6a, 0x25, 0xcd, 0x3a, 0x8d, 0xe2, 0xe3, 0x6c, 0xbc, 0x84, 0xd9, 0x4e, 0xbc]),
                              bytes([0xec, 0x91, 0xfc, 0x6f, 0x07, 0x0a, 0x88, 0xf4, 0x27, 0xaf, 0xd9, 0xae, 0x63, 0x46, 0x9c, 0x77, 0x83, 0x26, 0x5a, 0x45, 0x63, 0x3f, 0xa0, 0x8e, 0xca, 0x8e, 0xb5, 0xa4, 0x69, 0x80, 0x09, 0x8c, 0xe9, 0x03, 0x43, 0x69, 0xc9, 0x3e, 0xd6, 0xf9, 0x1d, 0x89, 0xe0, 0x04, 0xda, 0x9a, 0x9b, 0x4f, 0x10, 0xc6, 0x90, 0xcf, 0x6c, 0x0a, 0x94, 0x3e, 0x50, 0x89, 0xcc, 0x39, 0xf5, 0xc4, 0x58, 0x37, 0x19, 0x52, 0x71, 0xf1, 0x35, 0xec, 0x25, 0xe4, 0x7c, 0xf8, 0xdf, 0xee, 0xf6, 0x7a, 0x5f, 0x59, 0xf1, 0x0b, 0x1a, 0xfd, 0xbc, 0x2d, 0x40, 0xf4, 0x4e, 0xea, 0x1d, 0x72, 0x01, 0x2e, 0x7e, 0xc0, 0x18, 0x8d, 0x28, 0xc3, 0xf5, 0x9d, 0xe2, 0x3a, 0x19, 0xb1, 0x36, 0x8c, 0x29, 0xe0, 0xd2, 0xf8, 0x76, 0x42, 0xdf, 0xfc, 0x02, 0xc9, 0x2e, 0xec, 0x06, 0x40, 0x61, 0xd9, 0xea, 0xf5, 0x61, 0xd9]),
                              bytes([0x53, 0xc3, 0xee, 0xd6, 0xb9, 0x17, 0x0c, 0xe0, 0x2b, 0x38, 0x1e, 0x43, 0x69, 0x37, 0xc0, 0xbb, 0xbf, 0xfd, 0xb4, 0x15, 0x7f, 0x3e, 0x02, 0x51, 0x21, 0x0d, 0x78, 0x7b, 0x55, 0xe9, 0x5b, 0xa4, 0x05, 0x40, 0x2a, 0xb2, 0x2a, 0x24, 0x99, 0x99, 0xe5, 0x1d, 0x1c, 0xb0, 0x0a, 0xc2, 0x86, 0xe0, 0xb7, 0x8f, 0xb6, 0x92, 0xb6, 0xf4, 0xa1, 0xe0, 0x13, 0xaa, 0x06, 0x36, 0xb7, 0x18, 0x4f, 0xdc, 0x71, 0xbe, 0x17, 0xe4, 0xbd, 0x72, 0x0c, 0x79, 0x0b, 0x48, 0x5f, 0x75, 0x77, 0xf8, 0x0b, 0x21, 0xb7, 0xa4, 0x1b, 0x19, 0xa0, 0xa1, 0x3f, 0xb6, 0x94, 0x7c, 0x96, 0x53, 0x5c, 0x5c, 0xc9, 0xbb, 0xd7, 0x55, 0xb6, 0x9a, 0xdc, 0x68, 0x55, 0x7c, 0x2c, 0x68, 0x34, 0x55, 0x7a, 0x3b, 0x32, 0x1e, 0xc8, 0x7c, 0x74, 0x7f, 0x43, 0xe1, 0x09, 0x40, 0xd2, 0x9f, 0x6a, 0x2e, 0x7a, 0x41, 0xf3, 0xf7])]
        output_tags = [bytes([0x20, 0x17, 0xc9, 0xae, 0xd1, 0x79, 0xed, 0xea, 0xbe, 0xc5, 0x85, 0x45, 0xa5, 0x72, 0xef, 0xfd, 0x62, 0x39, 0xaf, 0xc7, 0xb5, 0x3d, 0xfd, 0xb1, 0xda, 0x6f, 0xd1, 0x9a, 0xcc, 0xd3, 0x4b, 0x54]),
                       bytes([0xbc, 0x15, 0xa0, 0x5b, 0x0c, 0xbd, 0x48, 0xdc, 0x98, 0xff, 0x1c, 0x7c, 0x2a, 0x51, 0x56, 0xf7, 0xaf, 0x5d, 0xf7, 0xd4, 0xeb, 0xee, 0x20, 0x75, 0x8d, 0x3c, 0xa3, 0xeb, 0xfc, 0x34, 0xd5, 0x91]),
                       bytes([0xe7, 0x13, 0x6f, 0x9f, 0x7f, 0x15, 0x0a, 0x47, 0x68, 0xcc, 0x9a, 0xbf, 0x80, 0xbc, 0xad, 0x6f, 0xd2, 0x30, 0xc4, 0x28, 0xdd, 0x18, 0x47, 0x8f, 0x18, 0x7e, 0x9a, 0x79, 0xc2, 0xa8, 0xb7, 0x9d])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_8(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 8 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen    64 (in bits)
        my_key = bytes([0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca])
        my_message = bytes([0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf])
        my_metadata = bytes([0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8])
        output_ciphertexts = [bytes([0xf7, 0x24, 0x41, 0x6a, 0xe1, 0x41, 0x97, 0xe0, 0x09, 0x85, 0x3f, 0x56, 0xab, 0x84, 0x5f, 0x31, 0xe7, 0xf4, 0x8d, 0x98, 0xf6, 0xbb, 0x7f, 0xd1, 0x33, 0x0d, 0x1c, 0xe1, 0xbf, 0x22, 0xea, 0x71, 0x1c, 0x49, 0xaf, 0xaa, 0x54, 0x4b, 0x5a, 0x0e, 0x9b, 0x0b, 0xff, 0x72, 0x35, 0x00, 0x35, 0xed, 0x94, 0x3c, 0x50, 0x82, 0x88, 0x95, 0xe6, 0xfe, 0x6f, 0x35, 0x64, 0x0e, 0x24, 0x8b, 0x92, 0xeb, 0xcd, 0x6d, 0x0b, 0x68, 0x05, 0x1a, 0x33, 0x34, 0x7f, 0xb1, 0x87, 0x31, 0x52, 0xc9, 0x24, 0xa5, 0x47, 0x84, 0x38, 0x2f, 0xfc, 0x75, 0x5a, 0x9e, 0x58, 0x8d, 0x8a, 0xb8, 0xe6, 0x60, 0xad, 0x8a, 0x0b, 0x38, 0x98, 0xb2, 0x49, 0xf0, 0xbe, 0xa4, 0xd6, 0xa0, 0x46, 0x4c, 0x31, 0x1b, 0x34, 0xb5, 0xcd, 0xd3, 0x2b, 0x03, 0xeb, 0x2e, 0x39, 0x0a, 0xa4, 0xe2, 0x95, 0xb1, 0x34, 0xfe, 0xf3, 0x00]),
                              bytes([0xda, 0x30, 0xf7, 0x46, 0x5d, 0x4f, 0x13, 0xc4, 0x1c, 0x2a, 0x73, 0x52, 0x93, 0x65, 0x47, 0xd6, 0xc8, 0x28, 0x24, 0x65, 0xdf, 0x3a, 0x6f, 0x7d, 0xf9, 0x14, 0x43, 0x37, 0xe3, 0x3d, 0xe7, 0x0a, 0xb9, 0x34, 0x61, 0xbf, 0xf6, 0xa4, 0x85, 0x0c, 0x39, 0xd8, 0x7e, 0x1c, 0x03, 0x4d, 0xc9, 0xbd, 0xc9, 0xbd, 0x50, 0x2e, 0x16, 0x66, 0xf6, 0x3a, 0xcc, 0xf1, 0xc4, 0xe8, 0xf0, 0xd9, 0xde, 0x4b, 0xe2, 0x24, 0x7c, 0x7c, 0x58, 0x01, 0x64, 0x23, 0x41, 0x9b, 0xe3, 0xe1, 0xe4, 0x61, 0xef, 0x40, 0x77, 0x24, 0xc6, 0xca, 0x90, 0x5f, 0x65, 0xbc, 0x68, 0x6f, 0x0b, 0xa7, 0xa2, 0xf4, 0x6a, 0x73, 0xce, 0x7c, 0x55, 0x06, 0x3c, 0x20, 0x72, 0x20, 0x2a, 0x82, 0xf2, 0x2c, 0xbb, 0x6b, 0xa8, 0xbc, 0x77, 0x6a, 0x09, 0x8e, 0x92, 0x78, 0xb5, 0xe7, 0xf3, 0x34, 0x70, 0xae, 0x06, 0xad, 0x3c, 0x19]),
                              bytes([0x7e, 0xfa, 0xeb, 0x6b, 0x50, 0xbb, 0x26, 0x67, 0x82, 0xb2, 0xe8, 0x41, 0x8d, 0x0f, 0xed, 0x35, 0x61, 0x4c, 0xaf, 0x4f, 0xae, 0x07, 0xa3, 0x70, 0x64, 0x3e, 0xc5, 0x16, 0x7f, 0xaf, 0x54, 0xe6, 0xcc, 0xa9, 0xd9, 0xcd, 0x40, 0x98, 0xc8, 0x0f, 0xa0, 0xb2, 0x4b, 0x89, 0xb0, 0x43, 0xdc, 0xba, 0xf9, 0x2e, 0xa2, 0xc8, 0xeb, 0xc3, 0x6f, 0x0d, 0xb4, 0x0f, 0x04, 0xb5, 0x3b, 0xe5, 0xa8, 0xd4, 0x15, 0xdf, 0x53, 0x7a, 0x9c, 0xcc, 0x63, 0x55, 0xb9, 0xd9, 0xe3, 0x7e, 0x5e, 0xb6, 0x9e, 0xad, 0xf8, 0x4b, 0x0e, 0x20, 0x37, 0xe6, 0x81, 0x5d, 0xa1, 0x92, 0x20, 0x4d, 0xe0, 0x1b, 0x97, 0x1a, 0x13, 0x22, 0xda, 0xcc, 0xb9, 0xbd, 0xa8, 0xf2, 0x5b, 0x40, 0x40, 0xb4, 0x93, 0xed, 0x36, 0x9f, 0xb7, 0xda, 0x8d, 0x03, 0x56, 0x57, 0x38, 0xcc, 0xef, 0x82, 0x56, 0xdf, 0x09, 0xf8, 0x0d, 0xf1])]
        output_tags = [bytes([0xf5, 0xfd, 0x70, 0x18, 0x02, 0x2e, 0x09, 0x3f, 0x22, 0x0a, 0x60, 0xf7, 0xd6, 0xfd, 0x41, 0xea, 0x54, 0x5c, 0x25, 0x0b, 0x70, 0x15, 0x07, 0xf8, 0xec, 0xc4, 0xc1, 0x52, 0x13, 0xe8, 0xfc, 0x15]),
                       bytes([0xaf, 0x92, 0x8a, 0xb7, 0xab, 0x9d, 0x1b, 0xa2, 0x3e, 0x93, 0x5d, 0x70, 0xfb, 0x80, 0x4d, 0x8f, 0x5a, 0x7a, 0xe2, 0xae, 0xc9, 0x20, 0x38, 0xe7, 0x21, 0xcd, 0x2f, 0x44, 0xd7, 0x48, 0x49, 0xd4]),
                       bytes([0xef, 0xad, 0xf1, 0x14, 0x34, 0x93, 0x31, 0xc8, 0x92, 0xd6, 0x50, 0x2b, 0x2d, 0x18, 0x20, 0x9d, 0x8e, 0xdc, 0x4f, 0x38, 0x99, 0xb9, 0xce, 0xdd, 0x04, 0xe5, 0xd7, 0xe2, 0xd3, 0x6c, 0x22, 0x6f])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_16(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 16 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen   128 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_message = bytes([0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87])
        my_metadata = bytes([0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30])
        output_ciphertexts = [bytes([0xb6, 0x9e, 0xaa, 0xf2, 0x48, 0x92, 0x1b, 0x7c, 0xfd, 0x8a, 0x6d, 0x0e, 0xb1, 0xdd, 0x1c, 0x01, 0x64, 0x56, 0x15, 0x3c, 0xec, 0xf2, 0xa7, 0x64, 0xd0, 0x31, 0xe2, 0xf9, 0x72, 0x30, 0x10, 0xe0, 0x52, 0x31, 0x69, 0xb1, 0x22, 0xec, 0xa4, 0x81, 0x8e, 0x40, 0x62, 0x24, 0xb0, 0xeb, 0xa8, 0xb7, 0x55, 0x45, 0xf2, 0x16, 0xe7, 0x86, 0xe6, 0xd3, 0x69, 0x41, 0x4f, 0x75, 0xf9, 0xbc, 0xca, 0xfe, 0x34, 0xf5, 0xb8, 0x22, 0x0c, 0x99, 0x66, 0x82, 0x86, 0x2c, 0x60, 0x87, 0x1c, 0x09, 0xfc, 0x54, 0x7b, 0x3c, 0xe2, 0x29, 0x20, 0x3c, 0xe9, 0xb6, 0x62, 0xaa, 0x1e, 0x74, 0xdd, 0x4d, 0x0c, 0x4a, 0xeb, 0x3d, 0x5a, 0x73, 0x4c, 0xfe, 0xdc, 0x40, 0x64, 0x16, 0x88, 0xf9, 0x3b, 0xda, 0x8f, 0x5f, 0x2b, 0xe7, 0xe5, 0xdb, 0x4e, 0x20, 0xcb, 0x5c, 0x13, 0xd6, 0x05, 0xb4, 0x54, 0x14, 0x97, 0x48]),
                              bytes([0x37, 0x52, 0x7b, 0x29, 0xc8, 0xce, 0xe2, 0xd7, 0x9d, 0x5e, 0x6f, 0xec, 0xbd, 0x4d, 0xd7, 0x84, 0xf6, 0x34, 0xf5, 0x55, 0x40, 0xe2, 0xa4, 0x0e, 0xef, 0x7b, 0x3f, 0xbb, 0x9a, 0xa2, 0xab, 0xb2, 0x42, 0xd3, 0x3c, 0x78, 0x1b, 0x29, 0x96, 0x8c, 0xc9, 0x2a, 0xeb, 0x08, 0xea, 0x8f, 0x21, 0x7f, 0x40, 0x1e, 0x35, 0x4f, 0x4e, 0xd5, 0x27, 0xe9, 0x0d, 0xe2, 0x9a, 0xe8, 0x55, 0x63, 0xf6, 0xaf, 0xd9, 0xe8, 0x7a, 0x8b, 0x1d, 0xc3, 0x9f, 0x90, 0xd5, 0xdb, 0x31, 0x53, 0xeb, 0x0d, 0x00, 0x40, 0x01, 0x90, 0xd7, 0x3e, 0xdd, 0xea, 0x47, 0x48, 0x9c, 0x89, 0x64, 0x06, 0x46, 0x82, 0x7d, 0x33, 0x7b, 0x33, 0xea, 0x39, 0xcb, 0xc9, 0x95, 0xe0, 0x36, 0xa5, 0xeb, 0x08, 0xa9, 0xb2, 0x55, 0x5c, 0x31, 0x06, 0xea, 0x03, 0xbd, 0x6d, 0x97, 0x58, 0x7b, 0xe8, 0x9a, 0x8a, 0x38, 0xc3, 0x86, 0x31]),
                              bytes([0x05, 0x7a, 0x47, 0xcb, 0x50, 0x78, 0x13, 0xf3, 0xef, 0xc9, 0xd2, 0x0f, 0x79, 0xa4, 0xdf, 0x2a, 0xa1, 0x12, 0x31, 0x55, 0x75, 0x60, 0x49, 0xa1, 0xea, 0xe7, 0x85, 0x09, 0x89, 0x01, 0x54, 0xf8, 0x95, 0xd2, 0x23, 0x77, 0x42, 0xb5, 0x2c, 0x61, 0xb5, 0x31, 0xa2, 0xd4, 0x2f, 0xc7, 0x85, 0xf5, 0x08, 0xc4, 0xe4, 0x82, 0xed, 0x03, 0xc8, 0xb6, 0xd3, 0xad, 0x8c, 0xdd, 0x48, 0x53, 0x60, 0x4b, 0x49, 0xf9, 0x16, 0x61, 0x06, 0xb8, 0xdd, 0xa0, 0x73, 0xce, 0x2b, 0x2e, 0x36, 0x84, 0x5d, 0x4c, 0x69, 0x27, 0xf6, 0x89, 0x31, 0x2f, 0xd8, 0xc6, 0x5b, 0x94, 0xed, 0x69, 0xf3, 0x31, 0xee, 0xbc, 0x48, 0xa6, 0xe7, 0x5f, 0x25, 0x80, 0x5d, 0xf2, 0xf0, 0x38, 0xb4, 0xa4, 0x44, 0xd7, 0x5a, 0xfb, 0xe6, 0xf0, 0x6b, 0x7e, 0xa3, 0x43, 0xa0, 0xb7, 0x58, 0xed, 0x03, 0x3c, 0x25, 0x89, 0xdd, 0x44])]
        output_tags = [bytes([0x88, 0x24, 0xa1, 0xf1, 0x26, 0xd2, 0x1a, 0xb5, 0xf4, 0xce, 0x7e, 0x2e, 0xbd, 0xa8, 0xf8, 0x30, 0xa9, 0xa0, 0xa8, 0x02, 0x67, 0xee, 0x9b, 0xb0, 0x64, 0xd7, 0xef, 0x05, 0xaf, 0x83, 0x08, 0x54]),
                       bytes([0x94, 0xf3, 0xc6, 0x33, 0xcd, 0xc4, 0xc8, 0x5b, 0xe8, 0x9e, 0xa1, 0xa6, 0x8b, 0xe5, 0x84, 0x49, 0x26, 0x77, 0xb8, 0xa8, 0xf2, 0x10, 0x18, 0xa9, 0x8f, 0xf4, 0x16, 0x76, 0x59, 0x76, 0x16, 0xfc]),
                       bytes([0x62, 0xb2, 0xc7, 0x76, 0x7c, 0xbc, 0x9e, 0x3f, 0xec, 0x04, 0xcc, 0xec, 0xcf, 0xc0, 0xc5, 0xea, 0xde, 0xb4, 0xcd, 0xd2, 0xcb, 0xf0, 0xb9, 0xe4, 0xa3, 0xf3, 0x9f, 0x57, 0x9d, 0x1e, 0x22, 0xa7])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_32(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 32 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen   256 (in bits)
        my_key = bytes([0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_message = bytes([0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7])
        my_metadata = bytes([0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40])
        output_ciphertexts = [bytes([0xea, 0xbb, 0x77, 0x15, 0x4a, 0x0a, 0x38, 0x43, 0x05, 0x2f, 0x67, 0x81, 0x2d, 0x17, 0x46, 0x72, 0x4f, 0xfd, 0x6e, 0x9a, 0x34, 0x52, 0xaf, 0x82, 0xed, 0xbc, 0xb9, 0xa5, 0x0d, 0x96, 0xeb, 0x35, 0x81, 0x27, 0xd4, 0x57, 0x51, 0x4f, 0x60, 0xbb, 0x89, 0xd9, 0x60, 0xa5, 0x27, 0x76, 0x76, 0x66, 0x59, 0xea, 0xf7, 0x40, 0x64, 0xf3, 0x36, 0x11, 0x3b, 0xff, 0x5c, 0xa4, 0xc7, 0x11, 0x9f, 0xb7, 0xd0, 0xe0, 0x62, 0x40, 0xb7, 0xcd, 0xfe, 0xfe, 0x13, 0xac, 0xb6, 0x3c, 0xf5, 0xb0, 0x47, 0x10, 0x95, 0x52, 0xab, 0xb4, 0xcd, 0xcc, 0x06, 0xd7, 0x7c, 0xd6, 0xb6, 0xf8, 0xe4, 0xd1, 0x41, 0x84, 0xaa, 0x58, 0xdd, 0x3b, 0x08, 0x43, 0x54, 0xa0, 0x93, 0xd0, 0xaa, 0x11, 0xa8, 0x35, 0xc5, 0xd7, 0x5b, 0xbe, 0xce, 0x78, 0x6e, 0x30, 0xa0, 0x59, 0x11, 0x34, 0x6d, 0x83, 0xf4, 0xbd, 0xc3, 0xca]),
                              bytes([0xda, 0xd0, 0x8f, 0xb1, 0x8f, 0x14, 0xb7, 0xe6, 0xbb, 0xec, 0x4c, 0x5c, 0xce, 0xc8, 0x39, 0xdd, 0xb5, 0x70, 0x42, 0x9a, 0xdd, 0xa0, 0xa7, 0x1c, 0x02, 0xb6, 0x8b, 0x42, 0x3a, 0x48, 0x77, 0x35, 0x10, 0x0c, 0x4a, 0x72, 0x6c, 0x3d, 0x61, 0x0b, 0x65, 0x8b, 0x9e, 0x4c, 0xfc, 0xde, 0x58, 0xfa, 0xd0, 0xa9, 0x42, 0xa9, 0x15, 0xd9, 0xed, 0x69, 0x2b, 0x42, 0x5e, 0xd2, 0xc8, 0x5f, 0x1f, 0xec, 0x5a, 0x85, 0x3b, 0x25, 0x00, 0xbe, 0xe2, 0xe0, 0x8d, 0x83, 0xcb, 0x79, 0xf3, 0x49, 0x2e, 0xde, 0x18, 0x9a, 0xc5, 0x9c, 0xdc, 0x05, 0xb2, 0xc5, 0x4a, 0xc7, 0x4c, 0xc3, 0xbe, 0xc5, 0x7a, 0xd7, 0x5c, 0x7a, 0x3e, 0xff, 0xef, 0xf9, 0xf1, 0x77, 0x0d, 0x07, 0x8b, 0x30, 0x22, 0x92, 0x8a, 0x06, 0x77, 0x01, 0x0a, 0x37, 0x5b, 0x49, 0xc4, 0xfc, 0x73, 0xf6, 0xcf, 0x5a, 0x6e, 0xf5, 0xd0, 0x97]),
                              bytes([0xd6, 0x06, 0xf2, 0x69, 0x9b, 0xb0, 0x10, 0x7b, 0x12, 0x0f, 0xb9, 0xca, 0x44, 0x33, 0x56, 0x39, 0xa8, 0xf3, 0x68, 0x79, 0x29, 0x63, 0x27, 0x99, 0xe7, 0xa0, 0x41, 0x83, 0xbc, 0x1e, 0x57, 0x97, 0xd9, 0xb2, 0x14, 0xc6, 0xbe, 0x4b, 0xfe, 0xf5, 0xeb, 0xaa, 0xe8, 0x41, 0x3f, 0x04, 0xb5, 0x88, 0x1f, 0x22, 0xf5, 0xe2, 0x72, 0x45, 0xe2, 0x72, 0xe4, 0x16, 0x5e, 0x5b, 0x5b, 0xbf, 0xfe, 0x50, 0xed, 0xeb, 0x2a, 0xd4, 0x9e, 0x40, 0xe7, 0xb0, 0x97, 0x47, 0x09, 0x8f, 0x32, 0x30, 0x44, 0x6c, 0xe0, 0x53, 0x6a, 0x33, 0xe9, 0x28, 0x63, 0xd6, 0x1e, 0xf1, 0xfb, 0x58, 0xfa, 0xbd, 0x9a, 0xab, 0x17, 0x1d, 0xd4, 0xe4, 0xdd, 0xad, 0xb6, 0x87, 0xd1, 0x27, 0x24, 0x06, 0x48, 0xc2, 0x46, 0x57, 0x3e, 0xb0, 0xca, 0xff, 0x2a, 0x1c, 0x1e, 0x0d, 0xa9, 0xe0, 0x46, 0x44, 0x0e, 0x01, 0xf9, 0x3a])]
        output_tags = [bytes([0x8b, 0x01, 0x72, 0x98, 0x60, 0xcf, 0x1c, 0x76, 0x19, 0xa3, 0x02, 0xc1, 0x8e, 0xe5, 0x57, 0xd7, 0x65, 0x28, 0xbe, 0xc5, 0x24, 0xa4, 0xc6, 0xcb, 0x69, 0xb8, 0xfd, 0x08, 0xbd, 0x99, 0x44, 0xea]),
                       bytes([0xf0, 0x72, 0x77, 0x5d, 0xb0, 0x5b, 0xf5, 0x39, 0xf1, 0x00, 0xe0, 0x9f, 0x01, 0xaa, 0xcd, 0xd9, 0x40, 0x26, 0x90, 0x2d, 0x6c, 0x0f, 0xa9, 0x1c, 0xc6, 0x6f, 0xb0, 0x10, 0x06, 0x02, 0xc9, 0xc3]),
                       bytes([0xbe, 0x72, 0x80, 0xdd, 0x0c, 0x45, 0xc3, 0xc8, 0xd7, 0x6b, 0x49, 0x6c, 0xed, 0x57, 0x34, 0xfc, 0x69, 0x7e, 0x18, 0x0f, 0x40, 0xf5, 0x8f, 0x07, 0xce, 0x85, 0x37, 0x3e, 0x3d, 0x67, 0x38, 0x62])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_64(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 64 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2])
        my_message = bytes([0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7])
        my_metadata = bytes([0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f])
        output_ciphertexts = [bytes([0x2c, 0x87, 0xa3, 0x68, 0x23, 0xbf, 0x57, 0x58, 0x09, 0x05, 0xd5, 0xd4, 0xfd, 0x48, 0x74, 0x11, 0xfd, 0x63, 0x18, 0x79, 0xb7, 0x9a, 0x43, 0x20, 0xf5, 0xf3, 0x9e, 0x5a, 0x7e, 0x92, 0x0d, 0x47, 0x21, 0xef, 0x1e, 0x51, 0x32, 0x9d, 0x50, 0x5e, 0xa4, 0x15, 0xed, 0xc0, 0x74, 0x51, 0x42, 0x0a, 0xd8, 0xb6, 0x42, 0xd7, 0xe6, 0x1f, 0xf3, 0xca, 0x14, 0xf4, 0x01, 0x81, 0x7e, 0x41, 0x74, 0xa8, 0x40, 0xe5, 0x2b, 0xce, 0x3f, 0x1a, 0xa5, 0xf7, 0x7b, 0xfd, 0x3c, 0x4f, 0xcb, 0x8f, 0x87, 0x8c, 0xe2, 0x0f, 0x5c, 0x5f, 0x78, 0xed, 0xb6, 0xbb, 0x06, 0xeb, 0xa7, 0xc8, 0xe7, 0xe4, 0x8d, 0x27, 0x53, 0xa8, 0x20, 0x87, 0x7a, 0x44, 0x14, 0xdf, 0x64, 0xef, 0x3a, 0xaa, 0x84, 0xad, 0xc0, 0x0f, 0x99, 0xf2, 0x76, 0xad, 0x94, 0x8a, 0x9d, 0x08, 0xd7, 0xae, 0xb6, 0xc5, 0x30, 0x68, 0x0d, 0xc9]),
                              bytes([0x4f, 0x5e, 0x2e, 0xc8, 0xfd, 0x46, 0xbb, 0x82, 0x83, 0xaf, 0x84, 0xfc, 0xaa, 0x7a, 0xc7, 0xf5, 0xf9, 0x92, 0x20, 0x15, 0x95, 0x8f, 0x68, 0x3a, 0x95, 0xc4, 0x3e, 0x0f, 0x23, 0x73, 0xbf, 0xa7, 0xc8, 0x59, 0x31, 0xa9, 0x93, 0x48, 0xc4, 0x2e, 0x95, 0x7e, 0x95, 0x74, 0x45, 0x93, 0xdf, 0xb8, 0xea, 0x46, 0xb9, 0xc2, 0x76, 0x5a, 0xb7, 0xeb, 0xe4, 0xbe, 0xff, 0xda, 0xf2, 0x88, 0x7e, 0xa4, 0x01, 0xc0, 0xad, 0x26, 0x21, 0x2b, 0xa9, 0x61, 0x3b, 0xd0, 0x94, 0x12, 0xaa, 0xc8, 0xbe, 0x79, 0x5f, 0x9a, 0xc9, 0x02, 0x1c, 0x42, 0xb0, 0x2a, 0xc9, 0xec, 0xf4, 0xce, 0x79, 0x0b, 0xed, 0xb6, 0x62, 0x6a, 0x3b, 0x1c, 0xa2, 0x27, 0xfb, 0xf9, 0x95, 0xdd, 0xa0, 0x8b, 0x10, 0x28, 0xcd, 0xf4, 0xa2, 0x5e, 0xad, 0xcc, 0x02, 0x77, 0x90, 0xc6, 0xc9, 0xa0, 0x1d, 0x96, 0x9c, 0x24, 0x7a, 0xc3]),
                              bytes([0x9d, 0xe6, 0xa5, 0x66, 0xde, 0x94, 0x3e, 0xeb, 0x3c, 0x6e, 0xcb, 0xfe, 0xd3, 0xc5, 0x7e, 0x66, 0xa7, 0x5c, 0x2f, 0xa9, 0x52, 0x98, 0xfb, 0xc4, 0x7b, 0x2e, 0x32, 0xf2, 0x6e, 0xc6, 0x1d, 0x04, 0x9d, 0x49, 0x71, 0x30, 0x21, 0xb0, 0x73, 0xa0, 0x3d, 0x83, 0x0c, 0xb9, 0x01, 0xd9, 0xf8, 0x9b, 0x0c, 0x41, 0x6f, 0xa6, 0xe0, 0xdd, 0x0f, 0x22, 0x3f, 0xf8, 0xb0, 0xe6, 0x05, 0x60, 0xb7, 0x89, 0xb5, 0xa5, 0x3f, 0xbe, 0x13, 0xbb, 0xed, 0x32, 0x43, 0x60, 0xb3, 0x66, 0x05, 0x9c, 0xfa, 0xde, 0xab, 0x3c, 0x7a, 0xe6, 0x07, 0xf9, 0x4d, 0xcd, 0x1b, 0xd4, 0x6e, 0x68, 0x83, 0x86, 0xe8, 0x95, 0x3f, 0x29, 0xa4, 0x15, 0xfa, 0x22, 0x0a, 0x79, 0x6a, 0xa4, 0xcd, 0x66, 0xb6, 0x1d, 0x82, 0x1e, 0x1e, 0x4a, 0x50, 0xd6, 0xf6, 0xad, 0xec, 0xca, 0xaf, 0xa4, 0xd7, 0xcc, 0xaa, 0xb7, 0x7e, 0x30])]
        output_tags = [bytes([0x9c, 0x6b, 0x2a, 0x7f, 0x33, 0x4d, 0x41, 0x54, 0xf6, 0x7d, 0x6a, 0xc5, 0x85, 0x5c, 0xf5, 0x9e, 0x47, 0x47, 0xde, 0x9c, 0xb8, 0xca, 0xab, 0xb3, 0x53, 0xf7, 0x55, 0xa0, 0xb8, 0x16, 0x25, 0x1c]),
                       bytes([0x4b, 0x6e, 0x53, 0xf3, 0xe5, 0xb2, 0xae, 0xcd, 0x1e, 0x89, 0xe3, 0x6f, 0xb2, 0x12, 0x9a, 0x6d, 0x37, 0x7e, 0x60, 0x97, 0x84, 0x2b, 0x3c, 0x0a, 0xfa, 0xce, 0xc3, 0x32, 0xf1, 0xfe, 0x91, 0x31]),
                       bytes([0x1d, 0x13, 0x8b, 0x3f, 0x38, 0xaf, 0x21, 0x21, 0x76, 0xf2, 0x81, 0x54, 0x3c, 0xfa, 0x47, 0xd7, 0xf7, 0xca, 0x34, 0x87, 0xb3, 0x34, 0x9a, 0xe5, 0xca, 0xb9, 0x69, 0x75, 0x95, 0xc4, 0x93, 0x7a])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_256(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 256 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen  2048 (in bits)
        my_key = bytes([0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12])
        my_message = bytes([0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17])
        my_metadata = bytes([0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19])
        output_ciphertexts = [bytes([0x20, 0xe0, 0xa0, 0xff, 0x76, 0x55, 0xbb, 0x0a, 0x31, 0x8f, 0xfe, 0x06, 0x41, 0x7d, 0xc1, 0x4f, 0xcc, 0xac, 0x80, 0x9f, 0x96, 0x9c, 0x87, 0x19, 0xb1, 0x1b, 0x2f, 0xb3, 0x32, 0xb9, 0x60, 0x41, 0xaa, 0x79, 0x39, 0x90, 0xf2, 0x0d, 0x46, 0x5d, 0x31, 0x2d, 0xbf, 0xe7, 0x25, 0x07, 0xe7, 0x49, 0xea, 0xfb, 0x00, 0xa1, 0x49, 0x38, 0x5a, 0x61, 0x81, 0xd1, 0x84, 0xc0, 0x9a, 0xd8, 0x49, 0xcb, 0xf2, 0x5d, 0x9a, 0x57, 0xf0, 0x06, 0xc2, 0x83, 0xf0, 0xd8, 0xd9, 0xbe, 0x5d, 0xa0, 0x32, 0x68, 0x8b, 0x1c, 0xd0, 0x32, 0x23, 0xd9, 0xfb, 0x86, 0xa2, 0xa1, 0xfd, 0x30, 0x50, 0x16, 0xf9, 0x0f, 0x02, 0x4f, 0xe0, 0x33, 0x68, 0x1c, 0xe1, 0x25, 0x83, 0xec, 0x66, 0x4d, 0xa0, 0x38, 0x3e, 0xfb, 0xab, 0x8b, 0x08, 0xe5, 0x84, 0x73, 0xbc, 0xd7, 0x79, 0xca, 0xa1, 0x22, 0x1b, 0x23, 0xe0, 0x08]),
                              bytes([0x70, 0x8c, 0xc6, 0xb9, 0xfd, 0x36, 0xb3, 0xc3, 0x8e, 0x83, 0x43, 0x33, 0x5d, 0xd6, 0xd7, 0x6f, 0xfa, 0xdc, 0x38, 0x2b, 0x8f, 0x27, 0x96, 0x3a, 0xdc, 0xb6, 0xaa, 0xb5, 0x17, 0x20, 0xa6, 0xc0, 0xd2, 0xb5, 0x60, 0xb3, 0x81, 0x10, 0xd4, 0x6b, 0x39, 0x2e, 0xc4, 0xe5, 0x77, 0x86, 0x2b, 0x1f, 0x9f, 0x10, 0xf6, 0xdd, 0x01, 0xce, 0x42, 0xab, 0x5a, 0x35, 0xd8, 0x75, 0x95, 0x33, 0x46, 0x0c, 0x93, 0xaa, 0x15, 0x49, 0x43, 0xd0, 0x80, 0x02, 0x42, 0x1b, 0xc3, 0xe6, 0xac, 0x98, 0x61, 0xf5, 0x9a, 0xe4, 0x17, 0xc3, 0xba, 0xc7, 0x9c, 0xe0, 0x18, 0x3c, 0xa1, 0x87, 0x57, 0xba, 0xcd, 0xa4, 0x73, 0x93, 0x67, 0x71, 0x8f, 0x07, 0x68, 0x57, 0x49, 0x71, 0x8a, 0xdb, 0x00, 0x8b, 0x1e, 0x80, 0xb7, 0x62, 0xd0, 0x2b, 0x3b, 0x41, 0x8c, 0x32, 0x87, 0x43, 0x06, 0x85, 0xde, 0x28, 0x79, 0xfa]),
                              bytes([0xd6, 0x19, 0xf7, 0x71, 0x67, 0xae, 0x08, 0x8c, 0x0b, 0x76, 0x66, 0xd8, 0x6b, 0x3c, 0x2f, 0x0b, 0x87, 0x9a, 0xca, 0xd3, 0xf3, 0x5d, 0x6e, 0xe3, 0xef, 0xbf, 0xa0, 0xaa, 0xd2, 0x24, 0x20, 0xc4, 0x41, 0x08, 0x37, 0xd4, 0xe9, 0xbf, 0x00, 0xd0, 0xce, 0x66, 0x23, 0x46, 0x69, 0x5e, 0xe8, 0xc9, 0x98, 0xab, 0xf4, 0x75, 0x13, 0x81, 0x5f, 0x73, 0x28, 0x09, 0x93, 0x18, 0xa1, 0xd6, 0xfd, 0x18, 0xd2, 0x8f, 0xa3, 0xb1, 0xea, 0x7a, 0xe8, 0x8c, 0xb6, 0x1c, 0xdb, 0xab, 0xc8, 0x05, 0x35, 0x5e, 0x80, 0x41, 0x4f, 0xd6, 0x7b, 0x71, 0x07, 0x55, 0xf8, 0x30, 0xfe, 0x79, 0x0d, 0xe6, 0x87, 0x30, 0xc4, 0xfb, 0x22, 0x37, 0xa1, 0x22, 0x13, 0xc8, 0x47, 0x60, 0x12, 0xe6, 0x2b, 0xf3, 0x84, 0x64, 0xa4, 0xf3, 0x05, 0xf6, 0x9e, 0xb1, 0xb8, 0xb4, 0xda, 0xbc, 0xd8, 0x18, 0x14, 0xef, 0x57, 0x7a])]
        output_tags = [bytes([0xda, 0x88, 0xe6, 0x7f, 0x77, 0x87, 0x8e, 0x1d, 0xac, 0x4c, 0x8a, 0x39, 0x61, 0x87, 0x9a, 0xf3, 0xba, 0xb4, 0x72, 0x2b, 0x72, 0xea, 0xea, 0xce, 0xe3, 0x06, 0x99, 0x9b, 0x7b, 0xad, 0x31, 0x2c]),
                       bytes([0xe7, 0xd0, 0x27, 0x7e, 0x7c, 0x52, 0x1f, 0xb6, 0x85, 0xe3, 0x2a, 0x69, 0xd0, 0xe5, 0x4b, 0x83, 0x91, 0x2f, 0xaa, 0x19, 0xeb, 0x0b, 0x0f, 0x02, 0x07, 0x5d, 0xa3, 0xcd, 0x54, 0x04, 0x1f, 0xcc]),
                       bytes([0xff, 0x2b, 0x34, 0xd2, 0x59, 0x8d, 0x89, 0x57, 0xb6, 0x50, 0x58, 0x29, 0x3e, 0x60, 0x38, 0x2b, 0x0a, 0x2b, 0x83, 0xb2, 0x63, 0x06, 0xf3, 0x03, 0x17, 0x37, 0xae, 0x25, 0xba, 0x9c, 0x2b, 0xa2])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_128_meta_384(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 128 Bytes
            Metadata Size - 384 Bytes
        """
        # keyLen   128, dataLen  1024, ADLen  3072 (in bits)
        my_key = bytes([0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92])
        my_message = bytes([0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97])
        my_metadata = bytes([0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d])
        output_ciphertexts = [bytes([0x6e, 0x53, 0x9f, 0xf1, 0xe6, 0xad, 0x64, 0x11, 0x5d, 0xee, 0x01, 0x7f, 0xbb, 0xa2, 0xc8, 0x1a, 0xb2, 0x80, 0x90, 0x98, 0xde, 0x9b, 0xbf, 0xe0, 0x00, 0x2a, 0x13, 0x22, 0x07, 0xbb, 0x30, 0x0a, 0x6b, 0xad, 0x9a, 0x70, 0xb8, 0x16, 0xa7, 0x2f, 0x21, 0xbf, 0xfe, 0xa3, 0xed, 0xff, 0xfd, 0x93, 0xdc, 0xba, 0xf0, 0x3e, 0xbf, 0xdb, 0x0c, 0x2a, 0x61, 0x24, 0x3b, 0x5a, 0xbb, 0xe0, 0xae, 0x8c, 0x0a, 0x65, 0x67, 0x00, 0xe8, 0x4a, 0xe7, 0x2a, 0x7f, 0xcd, 0x06, 0x75, 0x1a, 0x38, 0x52, 0x1c, 0x8a, 0xce, 0xc5, 0xf1, 0x4f, 0xd9, 0xf5, 0x9c, 0x8b, 0xae, 0x6e, 0x95, 0x64, 0x81, 0xcf, 0x38, 0x98, 0x56, 0x43, 0xf8, 0x09, 0x41, 0x51, 0xef, 0xf7, 0xc7, 0xef, 0x48, 0x21, 0x24, 0xe6, 0x54, 0xf9, 0xc9, 0x31, 0x6b, 0x3e, 0xe1, 0x21, 0xb6, 0x75, 0x1a, 0x9a, 0xd8, 0x82, 0xf3, 0x57, 0xda]),
                              bytes([0xb0, 0xa2, 0x3a, 0x5a, 0x02, 0xea, 0x87, 0x2f, 0x9c, 0x23, 0xaf, 0xda, 0x59, 0x94, 0xd9, 0x64, 0x2e, 0xc9, 0x99, 0x98, 0xbb, 0x89, 0x9a, 0x44, 0x49, 0x11, 0xfd, 0x79, 0xf4, 0x3b, 0x1f, 0x48, 0x76, 0x32, 0x1b, 0x01, 0xa2, 0xe9, 0x1d, 0x47, 0x62, 0xdc, 0x79, 0xe8, 0x1f, 0x29, 0xdc, 0x1f, 0xe9, 0x63, 0xa8, 0x04, 0x82, 0x2d, 0xbc, 0xf3, 0x21, 0x75, 0xa4, 0x03, 0x15, 0x9d, 0x31, 0xd1, 0x0a, 0xf4, 0xe7, 0xdf, 0x49, 0xc2, 0x6c, 0x48, 0x78, 0xb9, 0x58, 0x1f, 0xac, 0x6b, 0x97, 0x40, 0x35, 0xfa, 0x37, 0xc2, 0x5d, 0x57, 0xd2, 0x8c, 0xb9, 0x73, 0x3d, 0x97, 0x87, 0x1a, 0x04, 0x67, 0xfa, 0x24, 0xc6, 0x95, 0x85, 0x05, 0x6a, 0x9f, 0xff, 0x7f, 0x03, 0xfe, 0x39, 0xfa, 0x0a, 0xdd, 0x53, 0xc6, 0xaa, 0x39, 0xad, 0x54, 0xd2, 0x4f, 0xcc, 0x9a, 0x6b, 0x93, 0x95, 0xb7, 0x85, 0x43]),
                              bytes([0x96, 0x14, 0xa5, 0x35, 0x18, 0x32, 0x4a, 0xd4, 0x9d, 0xc3, 0x93, 0x86, 0x3b, 0x97, 0x37, 0xf0, 0x0a, 0xe5, 0xfc, 0xdc, 0xb1, 0x1e, 0xe6, 0x6a, 0x5b, 0xae, 0xf0, 0x4e, 0xd0, 0xb8, 0xc1, 0x6f, 0xa0, 0xb9, 0xa8, 0x54, 0xd3, 0x28, 0x6e, 0x4d, 0x6a, 0x7d, 0x0e, 0x4e, 0x8b, 0x8f, 0xd1, 0xb6, 0xfe, 0xba, 0x8f, 0x38, 0x8e, 0xad, 0xbe, 0x10, 0x71, 0x93, 0xa4, 0x40, 0xf2, 0x22, 0x4b, 0x05, 0x28, 0xdc, 0x50, 0x84, 0xab, 0x14, 0xa7, 0x72, 0xd0, 0x49, 0x63, 0xac, 0x89, 0xad, 0x6b, 0x62, 0xf2, 0x18, 0x51, 0xd7, 0x69, 0x93, 0x6f, 0x4d, 0x41, 0xc8, 0x71, 0xb9, 0xc4, 0x47, 0x0c, 0xc2, 0x78, 0xa4, 0x19, 0x46, 0x98, 0x92, 0xe2, 0xc0, 0x64, 0xe3, 0x52, 0x6e, 0x93, 0xe6, 0x1d, 0xfc, 0xa6, 0xc8, 0x94, 0x43, 0x8f, 0x6c, 0x56, 0xa6, 0x68, 0xb9, 0x36, 0x5f, 0xfe, 0xff, 0xdc, 0x15])]
        output_tags = [bytes([0x1f, 0x15, 0x4c, 0xf8, 0x0c, 0xac, 0x79, 0xe0, 0x03, 0x08, 0x10, 0x01, 0x22, 0x8e, 0xe0, 0xbb, 0x97, 0x42, 0xf3, 0x05, 0x5f, 0xfd, 0x90, 0x3a, 0x4c, 0x85, 0x9a, 0x06, 0xda, 0xa0, 0xbb, 0xa3]),
                       bytes([0xb4, 0x63, 0x9a, 0xb8, 0xb7, 0xb6, 0x1f, 0x5a, 0x1d, 0x28, 0xf2, 0x56, 0x4d, 0x34, 0x1c, 0x85, 0x34, 0x70, 0x33, 0x18, 0x06, 0xc9, 0x47, 0x0d, 0x0f, 0x96, 0x1e, 0xe0, 0xd1, 0x19, 0x32, 0x56]),
                       bytes([0xe0, 0x32, 0x26, 0x7e, 0x83, 0xdf, 0x0d, 0x9d, 0x1d, 0x57, 0xe2, 0x27, 0xbd, 0xf7, 0xb0, 0xc5, 0xed, 0x74, 0xef, 0x15, 0xe4, 0xf4, 0xf5, 0x03, 0x5a, 0xde, 0x22, 0xd1, 0x41, 0x3a, 0x19, 0xd1])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_32_meta_256(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 32 Bytes
            Metadata Size - 256 Bytes
        """
        # keyLen   128, dataLen   256, ADLen  2048 (in bits)
        my_key = bytes([0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72])
        my_message = bytes([0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba])
        my_metadata = bytes([0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79])
        output_ciphertexts = [bytes([0x33, 0x80, 0x4d, 0x68, 0x64, 0x85, 0xe0, 0x96, 0x13, 0xcd, 0xd8, 0x65, 0x60, 0xf3, 0x30, 0x43, 0xb7, 0x3c, 0xe7, 0x44, 0xbf, 0xc7, 0xf7, 0x1f, 0xad, 0x5d, 0x50, 0xa7, 0x27, 0xfb, 0x37, 0xdb]),
                              bytes([0xed, 0xe2, 0x36, 0x95, 0x0a, 0x5e, 0x0b, 0x1c, 0x19, 0x05, 0xd2, 0x9a, 0x43, 0x05, 0x44, 0xca, 0x48, 0xc1, 0xb5, 0x5a, 0xf1, 0xdb, 0x45, 0x98, 0xf9, 0x86, 0x98, 0x52, 0xb3, 0x00, 0xad, 0x86]),
                              bytes([0xf4, 0x54, 0x7c, 0x68, 0x2e, 0x64, 0x29, 0xdb, 0x41, 0xc6, 0x7a, 0x7f, 0x56, 0xca, 0x7f, 0x3a, 0x0e, 0x3d, 0x0a, 0x28, 0xe4, 0x45, 0xdf, 0x39, 0x66, 0x62, 0xcb, 0x43, 0x2b, 0xd3, 0xf2, 0xda])]
        output_tags = [bytes([0x11, 0xde, 0x78, 0x68, 0x82, 0x49, 0x35, 0xfd, 0x26, 0xbb, 0x42, 0xb9, 0x6a, 0x7f, 0x57, 0x79, 0x09, 0x55, 0xff, 0x90, 0x6c, 0xb2, 0x0f, 0x01, 0xa9, 0x95, 0xb6, 0xd5, 0x7d, 0xb3, 0x6b, 0x33]),
                       bytes([0x43, 0xa9, 0x14, 0xb2, 0xb6, 0x43, 0x73, 0x4b, 0x73, 0x3a, 0x5a, 0xf9, 0x78, 0xf9, 0xc1, 0x4c, 0xe0, 0xf1, 0x8c, 0x17, 0x7d, 0xe9, 0xcd, 0xdf, 0x1a, 0x71, 0x1d, 0xe9, 0x26, 0xb9, 0x27, 0xcd]),
                       bytes([0xd6, 0x3c, 0xa6, 0xa8, 0xd5, 0xc5, 0xc4, 0x20, 0x40, 0x45, 0xd5, 0x7a, 0x4d, 0x61, 0x13, 0x93, 0x87, 0xb9, 0xa2, 0x72, 0x22, 0x14, 0x71, 0x2c, 0x6f, 0xa9, 0xc1, 0xce, 0x96, 0x0c, 0xd8, 0xa1])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_32_meta_199(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 32 Bytes
            Metadata Size - 199 Bytes
        """
        # keyLen   128, dataLen   256, ADLen  1592 (in bits)
        my_key = bytes([0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2])
        my_message = bytes([0xf4, 0xf1, 0xee, 0xeb, 0xe8, 0xe5, 0xe2, 0xdf, 0xdc, 0xd9, 0xd6, 0xd3, 0xd0, 0xcd, 0xca, 0xc7, 0xc4, 0xc1, 0xbe, 0xbb, 0xb8, 0xb5, 0xb2, 0xaf, 0xac, 0xa9, 0xa6, 0xa3, 0xa0, 0x9d, 0x9a, 0x97])
        my_metadata = bytes([0x01, 0xfe, 0xfb, 0xf8, 0xf5, 0xf2, 0xef, 0xec, 0xe9, 0xe6, 0xe3, 0xe0, 0xdd, 0xda, 0xd7, 0xd4, 0xd1, 0xce, 0xcb, 0xc8, 0xc5, 0xc2, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3, 0xb0, 0xad, 0xaa, 0xa7, 0xa4, 0xa1, 0x9e, 0x9b, 0x98, 0x95, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83, 0x80, 0x7d, 0x7a, 0x77, 0x74, 0x71, 0x6e, 0x6b, 0x68, 0x65, 0x62, 0x5f, 0x5c, 0x59, 0x56, 0x53, 0x50, 0x4d, 0x4a, 0x47, 0x44, 0x40, 0x3d, 0x3a, 0x37, 0x34, 0x31, 0x2e, 0x2b, 0x28, 0x25, 0x22, 0x1f, 0x1c, 0x19, 0x16, 0x13, 0x10, 0x0d, 0x0a, 0x07, 0x04, 0x01, 0xfe, 0xfb, 0xf8, 0xf5, 0xf2, 0xef, 0xec, 0xe9, 0xe6, 0xe3, 0xe0, 0xdd, 0xda, 0xd7, 0xd4, 0xd1, 0xce, 0xcb, 0xc8, 0xc5, 0xc2, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3, 0xb0, 0xad, 0xaa, 0xa7, 0xa4, 0xa1, 0x9e, 0x9b, 0x98, 0x95, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83, 0x7f, 0x7c, 0x79, 0x76, 0x73, 0x70, 0x6d, 0x6a, 0x67, 0x64, 0x61, 0x5e, 0x5b, 0x58, 0x55, 0x52, 0x4f, 0x4c, 0x49, 0x46, 0x43, 0x40, 0x3d, 0x3a, 0x37, 0x34, 0x31, 0x2e, 0x2b, 0x28, 0x25, 0x22, 0x1f, 0x1c, 0x19, 0x16, 0x13, 0x10, 0x0d, 0x0a, 0x07, 0x04, 0x01, 0xfe, 0xfb, 0xf8, 0xf5, 0xf2, 0xef, 0xec, 0xe9, 0xe6, 0xe3, 0xe0, 0xdd, 0xda, 0xd7, 0xd4, 0xd1, 0xce, 0xcb, 0xc8, 0xc5, 0xc2, 0xbe, 0xbb, 0xb8, 0xb5, 0xb2, 0xaf, 0xac])
        output_ciphertexts = [bytes([0xad, 0x12, 0x8a, 0xa5, 0x03, 0x46, 0xba, 0x33, 0x84, 0x80, 0xc3, 0x23, 0xf6, 0xb2, 0x58, 0xc9, 0x2b, 0x1d, 0xf6, 0x5b, 0x58, 0xd5, 0xab, 0xdb, 0x8a, 0xa6, 0x31, 0x11, 0x0f, 0x6a, 0x7f, 0xd5]),
                              bytes([0x7d, 0x36, 0xfd, 0xd4, 0x62, 0x0d, 0x82, 0xa1, 0xfc, 0xb9, 0x2c, 0xa1, 0xbd, 0x54, 0xca, 0x4d, 0x12, 0xe4, 0x5f, 0xbc, 0x78, 0xb3, 0x6d, 0x56, 0xff, 0xdd, 0xa9, 0x3c, 0xc0, 0x99, 0xf6, 0xb5]),
                              bytes([0x84, 0xf7, 0x96, 0x96, 0x16, 0xfb, 0x0e, 0x72, 0xbf, 0x43, 0x5f, 0xc2, 0xf3, 0xc7, 0x29, 0xdc, 0x70, 0x3c, 0x0a, 0x76, 0x3a, 0x4d, 0xce, 0xda, 0x9d, 0x7e, 0xc1, 0x37, 0xfa, 0x98, 0x70, 0x88])]
        output_tags = [bytes([0xe3, 0xc2, 0x0d, 0xa7, 0x51, 0xb0, 0x82, 0xd9, 0xb1, 0x38, 0xe7, 0x14, 0x02, 0x15, 0x06, 0x63, 0xe0, 0xb2, 0xf5, 0xca, 0x84, 0x4f, 0x88, 0x98, 0xf5, 0x7e, 0xab, 0x09, 0x89, 0x12, 0xcd, 0x66]),
                       bytes([0xf2, 0xd7, 0x01, 0xf5, 0x4d, 0x46, 0xdd, 0x7d, 0x90, 0x8e, 0x8a, 0x4a, 0x52, 0x86, 0xe8, 0x2a, 0xfb, 0xaf, 0x9f, 0x38, 0x9b, 0xc0, 0xda, 0xde, 0xae, 0x1c, 0x1f, 0x5a, 0xc5, 0x0f, 0x42, 0xd5]),
                       bytes([0x0b, 0x80, 0x0f, 0xd7, 0x2a, 0x8e, 0xbb, 0x93, 0x9b, 0x7f, 0xb3, 0xd7, 0xcd, 0x6d, 0xd8, 0xe5, 0xee, 0x53, 0x77, 0x1a, 0x64, 0x7d, 0x0a, 0x08, 0x8b, 0xac, 0x42, 0xce, 0xaa, 0x93, 0x03, 0x87])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_32_meta_200(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 32 Bytes
            Metadata Size - 200 Bytes
        """
        # keyLen   128, dataLen   256, ADLen  1600 (in bits)
        my_key = bytes([0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea])
        my_message = bytes([0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32])
        my_metadata = bytes([0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x34, 0x2d, 0x26, 0x1f, 0x18, 0x11, 0x0a, 0x03, 0xfc, 0xf5, 0xee, 0xe7, 0xe0, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x53, 0x4c, 0x45, 0x3e, 0x37, 0x30, 0x29, 0x22, 0x1b, 0x14, 0x0d, 0x06, 0xff, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9, 0xc2, 0xbb, 0xb4, 0xad, 0xa6, 0x9f, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf6, 0xef, 0xe8, 0xe1, 0xda, 0xd3, 0xcc, 0xc5, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42])
        output_ciphertexts = [bytes([0xf0, 0x0a, 0x6c, 0xdc, 0xde, 0x83, 0x55, 0xeb, 0x77, 0xab, 0xb4, 0xfd, 0x4b, 0xd8, 0x33, 0xa9, 0x83, 0x2a, 0x2d, 0x9a, 0x70, 0x93, 0x61, 0x4d, 0xa1, 0xd3, 0x79, 0x7c, 0x70, 0x76, 0x17, 0xfe]),
                              bytes([0x15, 0xf0, 0x3d, 0x26, 0xef, 0x05, 0x50, 0x43, 0x17, 0x3c, 0xba, 0xcc, 0x87, 0xc3, 0x81, 0xcb, 0x87, 0x50, 0xd5, 0x85, 0x14, 0x05, 0x8f, 0xfb, 0x3a, 0x48, 0x67, 0x83, 0xbe, 0xe5, 0xdd, 0xe8]),
                              bytes([0x24, 0x14, 0x3e, 0x29, 0xda, 0xbe, 0x8c, 0xef, 0xcb, 0xe2, 0x42, 0x17, 0xa5, 0xc8, 0x97, 0x73, 0x5c, 0x22, 0x70, 0x88, 0xf6, 0xea, 0xcd, 0xb5, 0x03, 0xe0, 0xcd, 0xf9, 0x75, 0x26, 0xd5, 0x57])]
        output_tags = [bytes([0xdc, 0x66, 0x5c, 0xeb, 0xfe, 0x08, 0x82, 0x04, 0xb4, 0x58, 0xd2, 0xa0, 0xd7, 0xfb, 0x5d, 0x24, 0x47, 0x84, 0xd6, 0x0e, 0x17, 0x0e, 0x9d, 0xe4, 0x4a, 0xfb, 0xa8, 0x3d, 0x39, 0x1e, 0xd9, 0x16]),
                       bytes([0xcf, 0x90, 0x94, 0x7f, 0xdf, 0x66, 0x7a, 0x8c, 0xc0, 0x9e, 0x0e, 0xfd, 0xc3, 0x05, 0xf3, 0xd5, 0x41, 0xf0, 0x29, 0x0b, 0x4e, 0xf1, 0x4d, 0x1f, 0x4e, 0x22, 0x82, 0x83, 0x01, 0xa2, 0xe4, 0x7a]),
                       bytes([0xe3, 0xd3, 0xf6, 0xd5, 0x29, 0x27, 0x4d, 0x3a, 0x99, 0x15, 0x80, 0xe4, 0x8e, 0x63, 0x9b, 0xd6, 0xdd, 0xf4, 0xa3, 0x00, 0x9a, 0x90, 0xac, 0x72, 0xe7, 0xb0, 0x67, 0x26, 0xd4, 0x8e, 0x94, 0x0b])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_32_meta_512(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 32 Bytes
            Metadata Size - 1024 Bytes
        """
        # keyLen   128, dataLen   256, ADLen  4096 (in bits)
        my_key = bytes([0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72])
        my_message = bytes([0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba])
        my_metadata = bytes([0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79])
        output_ciphertexts = [bytes([0x8e, 0x19, 0x16, 0x1c, 0x8b, 0x9e, 0x9a, 0x73, 0xb8, 0xfb, 0xc4, 0x82, 0x71, 0xf8, 0xf9, 0x96, 0x82, 0x0d, 0x60, 0xbf, 0xe3, 0xd3, 0x15, 0xc7, 0x9e, 0xee, 0x21, 0xee, 0x21, 0x49, 0x18, 0xf1]),
                              bytes([0xfa, 0xc0, 0x99, 0x28, 0xc3, 0xb6, 0x80, 0x1c, 0x2d, 0x38, 0x2e, 0x1e, 0xf7, 0xc1, 0x8b, 0xe4, 0x47, 0xf2, 0x70, 0xb5, 0x3f, 0x1d, 0xba, 0xc9, 0xf6, 0x37, 0xe3, 0x4d, 0xb9, 0xb6, 0xe9, 0xe8]),
                              bytes([0xd1, 0xa0, 0x7d, 0x6a, 0x23, 0x11, 0x37, 0x10, 0x6d, 0x57, 0x1e, 0x59, 0x98, 0x90, 0x11, 0x33, 0xec, 0xc5, 0x64, 0xbc, 0xb0, 0xb7, 0x45, 0xa7, 0x68, 0xd0, 0x48, 0xfa, 0xda, 0xf5, 0x8b, 0xdf])]
        output_tags = [bytes([0xd8, 0x83, 0xa7, 0x5e, 0x05, 0x2b, 0x88, 0x5d, 0xc6, 0x97, 0x93, 0xda, 0xfd, 0x77, 0x2e, 0xf4, 0xe0, 0x43, 0xcd, 0x55, 0x3d, 0x74, 0x72, 0x77, 0x26, 0xdf, 0x11, 0xca, 0x73, 0x60, 0xb9, 0x00]),
                       bytes([0xca, 0xaa, 0x69, 0xa2, 0x71, 0x03, 0x1f, 0x8a, 0xd1, 0x7a, 0xf6, 0xf4, 0x09, 0xfe, 0x38, 0x77, 0x20, 0x2d, 0x8f, 0x3b, 0x7f, 0xef, 0x4e, 0x99, 0x36, 0x4d, 0xdc, 0x3e, 0xf4, 0xd5, 0xd7, 0x1b]),
                       bytes([0x86, 0xf5, 0xaa, 0x71, 0xf7, 0x2e, 0xb6, 0x95, 0x41, 0x25, 0xb4, 0x67, 0xde, 0xae, 0xf6, 0x98, 0x90, 0x9b, 0xdc, 0xd4, 0x45, 0x3d, 0x59, 0x09, 0xed, 0x6d, 0x83, 0x6b, 0x43, 0x97, 0x95, 0x16])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SANSE_k_16_msg_32_meta_1024(self, test_workers):
        """
        Kravatte SANSE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 32 Bytes
            Metadata Size - 1024 Bytes
        """
        # keyLen   128, dataLen   256, ADLen  8192 (in bits)
        my_key = bytes([0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72])
        my_message = bytes([0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x15, 0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba])
        my_metadata = bytes([0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79, 0x79, 0x72, 0x6b, 0x64, 0x5d, 0x56, 0x4f, 0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x98, 0x91, 0x8a, 0x83, 0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb7, 0xb0, 0xa9, 0xa2, 0x9b, 0x94, 0x8d, 0x86, 0x7f, 0x78, 0x71, 0x6a, 0x63, 0x5c, 0x55, 0x4e, 0x47, 0x40, 0x39, 0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89, 0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43, 0x3c, 0x35, 0x2e, 0x27, 0x20, 0x19, 0x12, 0x0b, 0x04, 0xfd, 0xf5, 0xee, 0xe7, 0xe0, 0xd9, 0xd2, 0xcb, 0xc4, 0xbd, 0xb6, 0xaf, 0xa8, 0xa1, 0x9a, 0x93, 0x8c, 0x85, 0x7e, 0x77, 0x70, 0x69, 0x62, 0x5b, 0x54, 0x4d, 0x46, 0x3f, 0x38, 0x31, 0x2a, 0x23, 0x1c, 0x14, 0x0d, 0x06, 0xff, 0xf8, 0xf1, 0xea, 0xe3, 0xdc, 0xd5, 0xce, 0xc7, 0xc0, 0xb9, 0xb2, 0xab, 0xa4, 0x9d, 0x96, 0x8f, 0x88, 0x81, 0x7a, 0x73, 0x6c, 0x65, 0x5e, 0x57, 0x50, 0x49, 0x42, 0x3b, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca, 0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x68, 0x61, 0x5a, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8, 0xb1, 0xaa, 0xa3, 0x9c, 0x95, 0x8e, 0x87, 0x80, 0x79])
        output_ciphertexts = [bytes([0xab, 0x18, 0xc5, 0x47, 0x93, 0x35, 0x0c, 0xa4, 0x7a, 0x30, 0xe0, 0x84, 0x7f, 0x8c, 0x39, 0x40, 0xa0, 0x05, 0x25, 0xd7, 0x80, 0xf9, 0x0d, 0x0b, 0x8f, 0xf3, 0xcd, 0x4f, 0x36, 0xf6, 0xfa, 0x11]),
                              bytes([0x68, 0xe8, 0x3f, 0x8e, 0x16, 0x0a, 0x03, 0xa6, 0x1e, 0x1e, 0x4d, 0x0a, 0x08, 0x23, 0xc7, 0xa7, 0x11, 0xdd, 0x6b, 0xa4, 0x11, 0x12, 0x19, 0xca, 0x76, 0x12, 0xdc, 0x9b, 0xf5, 0x6c, 0x14, 0x51]),
                              bytes([0x29, 0xbf, 0xa6, 0x8a, 0x79, 0xa6, 0xf1, 0xe5, 0x57, 0x4d, 0xa8, 0x60, 0xe9, 0x73, 0x05, 0x50, 0x77, 0x2d, 0x46, 0xe0, 0x61, 0x9c, 0xca, 0x40, 0xbb, 0xdc, 0xae, 0xe7, 0x66, 0xc3, 0x6a, 0x7a])]
        output_tags = [bytes([0x58, 0x06, 0x85, 0x88, 0x56, 0x3d, 0xf9, 0x51, 0x1d, 0x13, 0x6e, 0x7e, 0xfc, 0xa0, 0xca, 0x6a, 0x46, 0x3e, 0x0b, 0xb9, 0x44, 0x25, 0x62, 0x47, 0x45, 0xc2, 0x3d, 0x13, 0xb6, 0x13, 0xea, 0x12]),
                       bytes([0x28, 0x7d, 0x8e, 0xa2, 0x6a, 0x5c, 0x68, 0x4e, 0x5b, 0xb5, 0xa6, 0x11, 0x66, 0x0c, 0x4f, 0x1b, 0x4d, 0x16, 0x41, 0xd7, 0x61, 0xd9, 0xe0, 0x4f, 0x11, 0x0b, 0x60, 0xdd, 0x77, 0x07, 0x82, 0xb8]),
                       bytes([0x0f, 0xaf, 0x56, 0x97, 0x0b, 0x4b, 0x97, 0x1d, 0xd7, 0x88, 0x73, 0xce, 0xcb, 0x6a, 0xe2, 0x0c, 0xf5, 0x33, 0xae, 0x75, 0x70, 0x01, 0xf3, 0x8d, 0x00, 0x62, 0x0f, 0x6c, 0x66, 0xdf, 0x77, 0xef])]

        krav_sane_encrypt = KravatteSANSE(my_key, workers=test_workers)
        krav_sane_decrypt = KravatteSANSE(my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_tag == output_tags[0]
        assert real_c_text == output_ciphertexts[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sane_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sane_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid
