import hashlib
import numpy as np
from kravatte import KravatteSAE


# Official Test Vectors
class TestOfficialTestVectors_SAE:
    """
    Test Vectors Generated From KeccakTools https://github.com/gvanas/KeccakTools
    """

    def test_kravatte_SAE_k_16_msg_128_meta_64_nonce_24(self, test_workers):
        """
        Kravatte SAE Test Encryption/Decryption Tests:
            Key Size - 16 Bytes
            Message Size - 4096 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 24 Bytes
        """
        my_key = bytes([0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce,
                        0xcd, 0xcc, 0xcb, 0xca])
        my_message = bytes([0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f,
                            0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24,
                            0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19,
                            0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e,
                            0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03,
                            0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8,
                            0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed,
                            0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2,
                            0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7,
                            0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc,
                            0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1,
                            0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba])
        my_metadata = bytes([0xd3, 0x54, 0xd4, 0x55, 0xd5, 0x56, 0xd6, 0x57, 0xd7, 0x58, 0xd8,
                             0x59, 0xd9, 0x5a, 0xda, 0x5b, 0xdb, 0x5c, 0xdc, 0x5d, 0xdd, 0x5e,
                             0xde, 0x5f, 0xdf, 0x60, 0xe0, 0x61, 0xe1, 0x62, 0xe2, 0x63, 0xe3,
                             0x64, 0xe4, 0x65, 0xe5, 0x66, 0xe6, 0x67, 0xe7, 0x68, 0xe8, 0x69,
                             0xe9, 0x6a, 0xea, 0x6b, 0xeb, 0x6c, 0xec, 0x6d, 0xed, 0x6e, 0xee,
                             0x6f, 0xef, 0x70, 0xf0, 0x71, 0xf1, 0x72, 0xf2, 0x73])
        my_nonce = bytes([0x97, 0x88, 0x79, 0x6a, 0x5b, 0x4c, 0x3d, 0x2e, 0x1f, 0x10, 0x01,
                          0xf2, 0xe3, 0xd4, 0xc5, 0xb6, 0xa6, 0x97, 0x88, 0x79, 0x6a, 0x5b,
                          0x4c, 0x3d])
        output_ciphertexts = [bytes([0xfb, 0xea, 0x17, 0x2b, 0x51, 0xe9, 0x91, 0xc4, 0x9a, 0x1f,
                                     0xc5, 0xe3, 0xfa, 0xca, 0x0a, 0x3f, 0x3c, 0x5a, 0x62, 0x5d,
                                     0x41, 0x69, 0xe5, 0x0f, 0x6a, 0x5e, 0x93, 0xfb, 0x47, 0x2f,
                                     0xe2, 0x44, 0x6b, 0x59, 0x06, 0x26, 0x5b, 0x09, 0x8e, 0x7f,
                                     0xf0, 0x78, 0x64, 0x31, 0x65, 0x3f, 0xa4, 0x95, 0xf0, 0x0f,
                                     0xc9, 0xfe, 0x20, 0xce, 0x92, 0xea, 0x1e, 0x02, 0x4d, 0x4a,
                                     0x35, 0xb2, 0x91, 0x77, 0x3d, 0xc1, 0x36, 0xcd, 0xf3, 0x8c,
                                     0x0b, 0xd6, 0xa2, 0x00, 0xe4, 0x3f, 0xe1, 0x63, 0xe9, 0x9c,
                                     0x27, 0x2b, 0x85, 0x89, 0xa0, 0x58, 0xd6, 0xf3, 0x84, 0xb7,
                                     0xe6, 0x07, 0x04, 0xad, 0xc4, 0xb0, 0x82, 0xe4, 0x56, 0xec,
                                     0xe6, 0xb9, 0x4c, 0x2f, 0xaf, 0x7b, 0x88, 0x40, 0xa7, 0xd4,
                                     0x93, 0x1c, 0xd0, 0x9b, 0x0f, 0x30, 0x07, 0x46, 0xa2, 0x4e,
                                     0xac, 0x37, 0xe7, 0x3f, 0xc9, 0x3e, 0x28, 0x20]),
                              bytes([0x0c, 0x8c, 0x93, 0x1a, 0xdc, 0x3d, 0xfd, 0x05, 0x37, 0xfa,
                                     0x14, 0x83, 0x73, 0x06, 0x84, 0x84, 0xaf, 0x62, 0xe8, 0x64,
                                     0xc7, 0x1d, 0x73, 0xd0, 0x19, 0x7b, 0x6f, 0xaf, 0xd2, 0xa4,
                                     0xef, 0xc4, 0x22, 0x52, 0xf4, 0xe9, 0x46, 0x0d, 0xce, 0xbc,
                                     0x24, 0x41, 0xb6, 0x28, 0x07, 0x4b, 0x2e, 0x4d, 0xea, 0xb5,
                                     0xe1, 0xf3, 0xdb, 0x18, 0xe5, 0x0d, 0xa9, 0x50, 0xe2, 0x3c,
                                     0xf3, 0x7d, 0x94, 0xfa, 0x92, 0x03, 0x1c, 0x9f, 0x47, 0x7e,
                                     0x73, 0x7f, 0x68, 0x4d, 0xe0, 0x0d, 0x81, 0x99, 0xb7, 0x90,
                                     0x5d, 0xac, 0x36, 0xd5, 0x76, 0xeb, 0xb9, 0xd0, 0x27, 0xaa,
                                     0x61, 0x37, 0x72, 0xef, 0x5f, 0xdc, 0x2e, 0xce, 0x9f, 0x99,
                                     0xf7, 0x6f, 0x76, 0xb5, 0x97, 0x26, 0x63, 0x4f, 0xa0, 0xe2,
                                     0x86, 0xd2, 0x52, 0x6c, 0x9a, 0x80, 0xfd, 0x6e, 0xf1, 0xf5,
                                     0x97, 0xd6, 0x89, 0x81, 0x54, 0xd4, 0x59, 0xac]),
                              bytes([0x7e, 0x07, 0x0f, 0x70, 0xa0, 0x44, 0xc5, 0xfe, 0xc8, 0x76,
                                     0xeb, 0x91, 0xc2, 0xe0, 0x56, 0x9d, 0xa5, 0xaf, 0x71, 0xfe,
                                     0x7c, 0xe8, 0x63, 0x65, 0x8e, 0x8d, 0x82, 0x89, 0x83, 0xd1,
                                     0x18, 0x12, 0x67, 0x30, 0x0a, 0x31, 0x4b, 0x4e, 0xf1, 0x1f,
                                     0xab, 0xda, 0xf6, 0x24, 0x4c, 0xcf, 0xdf, 0x68, 0xaa, 0x9a,
                                     0xe9, 0x61, 0x55, 0xb2, 0x67, 0x65, 0x3c, 0x5b, 0x12, 0xa8,
                                     0xfe, 0xa2, 0x09, 0xb1, 0x30, 0x3f, 0x11, 0x4b, 0x13, 0x72,
                                     0xd8, 0x94, 0xab, 0xc9, 0xc5, 0x1e, 0x4d, 0xf5, 0x67, 0xc2,
                                     0xdc, 0x54, 0x56, 0xe5, 0xcc, 0xfd, 0x42, 0x8c, 0x03, 0x95,
                                     0x52, 0x92, 0x53, 0x8c, 0xca, 0x06, 0xb9, 0xe1, 0x86, 0x44,
                                     0xc0, 0xc0, 0x01, 0x73, 0xae, 0x5e, 0xf6, 0x44, 0x82, 0x95,
                                     0xaa, 0x63, 0xf4, 0xc1, 0xf9, 0x41, 0xa1, 0xf9, 0x60, 0xbb,
                                     0x76, 0x4c, 0xd6, 0xe1, 0x3b, 0x32, 0x0a, 0x03])]
        output_tags = [bytes([0xea, 0xea, 0x2d, 0xa3, 0x9f, 0xcf, 0xc5, 0x82, 0x69, 0x29, 0x97,
                              0xa4, 0x5d, 0x59, 0xe8, 0x82]),
                       bytes([0x16, 0x03, 0xac, 0x03, 0x30, 0xab, 0x5a, 0x10, 0x70, 0x54, 0x0b,
                              0x44, 0x81, 0xf5, 0x7f, 0x69]),
                       bytes([0xc8, 0x47, 0x05, 0xf3, 0x44, 0x6b, 0x21, 0x1c, 0xa7, 0xa1, 0x65,
                              0x48, 0x2e, 0x9d, 0xd4, 0x25])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_24_msg_128_meta_64_nonce_24(self, test_workers):
        """
        Kravatte SAE Test Encryption/Decryption Tests:
            Key Size - 24 Bytes
            Message Size - 4096 Bytes
            Metadata Size - 64 Bytes
            Nonce Size - 24 Bytes
        """
        my_key = bytes([0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e,
                        0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02])
        my_nonce = bytes([0xcf, 0xc0, 0xb1, 0xa2, 0x93, 0x84, 0x75, 0x66, 0x57, 0x48, 0x39, 0x2a,
                          0x1b, 0x0c, 0xfd, 0xee, 0xde, 0xcf, 0xc0, 0xb1, 0xa2, 0x93, 0x84, 0x75])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66,
                            0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a,
                            0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e,
                            0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42,
                            0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36,
                            0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a,
                            0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e,
                            0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12,
                            0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06,
                            0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa,
                            0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_metadata = bytes([0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91,
                             0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97,
                             0x17, 0x98, 0x18, 0x99, 0x19, 0x9a, 0x1a, 0x9b, 0x1b, 0x9c, 0x1c, 0x9d,
                             0x1d, 0x9e, 0x1e, 0x9f, 0x1f, 0xa0, 0x20, 0xa1, 0x21, 0xa2, 0x22, 0xa3,
                             0x23, 0xa4, 0x24, 0xa5, 0x25, 0xa6, 0x26, 0xa7, 0x27, 0xa8, 0x28, 0xa9,
                             0x29, 0xaa, 0x2a, 0xab])
        output_ciphertexts = [bytes([0x99, 0x51, 0x14, 0x0e, 0x28, 0x0e, 0x0f, 0xef, 0x51, 0x22,
                                     0xd7, 0x66, 0x6a, 0x5f, 0xce, 0xf7, 0x3c, 0x88, 0xe3, 0xf9,
                                     0xe5, 0xfb, 0xb5, 0x94, 0xb4, 0x99, 0x20, 0xde, 0x69, 0x62,
                                     0x5d, 0x70, 0x9b, 0xaf, 0xb3, 0x1b, 0xf8, 0xdf, 0x19, 0x89,
                                     0xd0, 0x35, 0xce, 0x6c, 0x67, 0xbd, 0x3d, 0xb7, 0x35, 0x5d,
                                     0xc6, 0xf7, 0xf7, 0x81, 0xcf, 0x92, 0xe5, 0xcd, 0x40, 0x09,
                                     0xf1, 0x65, 0xb5, 0xf7, 0xf4, 0xa1, 0x09, 0xe5, 0x8c, 0xa4,
                                     0xf0, 0xb6, 0x0c, 0x5c, 0x83, 0x08, 0x74, 0x62, 0x9f, 0x1d,
                                     0x34, 0x0d, 0x7a, 0x24, 0x01, 0x8a, 0x99, 0x19, 0x34, 0x49,
                                     0x8d, 0x51, 0xfc, 0x87, 0x99, 0xf5, 0x4e, 0x12, 0x7d, 0x16,
                                     0xef, 0x36, 0x48, 0xed, 0x4d, 0xc6, 0x0e, 0xcb, 0xbf, 0x86,
                                     0x08, 0x6b, 0x9a, 0x3c, 0x80, 0x3b, 0x0e, 0x4f, 0x2a, 0x52,
                                     0x41, 0x04, 0x24, 0xad, 0xc2, 0x60, 0x28, 0xc0]),
                              bytes([0x3e, 0x7a, 0x5d, 0xc6, 0x9f, 0x74, 0xa5, 0x6d, 0x92, 0x26,
                                     0xe4, 0x7d, 0xbb, 0x0a, 0xac, 0xd3, 0x7b, 0x07, 0xe0, 0x84,
                                     0xa9, 0x83, 0xd7, 0x59, 0x2e, 0x0a, 0x14, 0x8f, 0x3b, 0xc3,
                                     0x62, 0xc9, 0x41, 0xfe, 0xf2, 0x8e, 0x61, 0xbc, 0xd6, 0x07,
                                     0x2f, 0x5b, 0x64, 0x97, 0x1f, 0xa7, 0x5c, 0x8b, 0x38, 0xd8,
                                     0x52, 0xa7, 0x0b, 0x5e, 0x83, 0x8c, 0xbb, 0x8c, 0x76, 0x11,
                                     0x1b, 0x5a, 0x6c, 0x98, 0x2c, 0xe2, 0x50, 0xd4, 0x14, 0x8f,
                                     0xbb, 0xcb, 0x30, 0x56, 0x37, 0xaf, 0x4b, 0x94, 0x0e, 0xa2,
                                     0xa3, 0x38, 0x69, 0xb0, 0xae, 0x8c, 0x58, 0x9d, 0x91, 0x5b,
                                     0xf3, 0x3b, 0x36, 0x7f, 0xb1, 0xf1, 0xd9, 0x25, 0xdf, 0x39,
                                     0x82, 0xdb, 0x6d, 0x72, 0x73, 0x6f, 0x69, 0x80, 0x76, 0xf0,
                                     0xae, 0xbe, 0x69, 0x32, 0x03, 0x74, 0xe4, 0x52, 0x3d, 0x60,
                                     0xd2, 0xef, 0xbd, 0x8b, 0xee, 0x76, 0xa6, 0xf9]),
                              bytes([0x40, 0x9c, 0x68, 0x6b, 0x83, 0xa5, 0x2a, 0x50, 0x27, 0x1e,
                                     0xa2, 0x01, 0x5a, 0x08, 0x6c, 0xbb, 0x1d, 0xd6, 0x87, 0x75,
                                     0x8a, 0x61, 0x20, 0x96, 0x27, 0x92, 0x86, 0x43, 0x6b, 0x58,
                                     0x5d, 0x4e, 0xb5, 0xb8, 0x91, 0x5a, 0x02, 0xd6, 0x69, 0xec,
                                     0xe0, 0xdb, 0x61, 0x38, 0x93, 0xcd, 0xd5, 0xa5, 0x49, 0x85,
                                     0xfe, 0x0c, 0x3a, 0x34, 0xe4, 0xdb, 0x96, 0xd0, 0x9c, 0x2e,
                                     0x84, 0x1f, 0xf7, 0x76, 0x6f, 0xa4, 0x8e, 0x36, 0x20, 0x7f,
                                     0x26, 0x4f, 0xd5, 0x50, 0x45, 0x29, 0xa1, 0x0c, 0xb2, 0xca,
                                     0xf8, 0x70, 0x28, 0xcc, 0x90, 0x66, 0x88, 0x10, 0x27, 0x95,
                                     0xfe, 0xaf, 0x56, 0x37, 0x12, 0xaf, 0x26, 0x2b, 0x16, 0x22,
                                     0x76, 0xd4, 0x3f, 0xb3, 0xc1, 0xa5, 0x4e, 0x37, 0x35, 0x87,
                                     0x9f, 0x5a, 0x61, 0x9b, 0x50, 0xc4, 0x63, 0xa3, 0x16, 0xca,
                                     0x7c, 0xe1, 0x78, 0x88, 0x2a, 0x97, 0x77, 0x66])]
        output_tags = [bytes([0x50, 0x69, 0x78, 0x0d, 0xb4, 0x4d, 0xc9, 0x69, 0x33, 0x46, 0x76,
                              0x20, 0xf1, 0xaa, 0xca, 0xf2]),
                       bytes([0xc0, 0x1d, 0x49, 0xcb, 0x8e, 0x93, 0x86, 0x4e, 0x0c, 0x45, 0x4c,
                              0x3e, 0x6d, 0x0e, 0xa3, 0x8e]),
                       bytes([0x7b, 0x00, 0xa4, 0xba, 0x13, 0x99, 0x39, 0xa9, 0x5e, 0xed, 0x12,
                              0x51, 0xa3, 0x14, 0xee, 0x55])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_32_msg_128_meta_64_nonce_24(self, test_workers):

        my_key = bytes([0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e,
                        0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42,
                        0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a])
        my_nonce = bytes([0x07, 0xf8, 0xe9, 0xda, 0xcb, 0xbc, 0xad, 0x9e, 0x8f, 0x80, 0x71,
                          0x62, 0x53, 0x44, 0x35, 0x26, 0x16, 0x07, 0xf8, 0xe9, 0xda, 0xcb,
                          0xbc, 0xad])
        my_message = bytes([0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f,
                            0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94,
                            0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89,
                            0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e,
                            0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73,
                            0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68,
                            0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d,
                            0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52,
                            0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47,
                            0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c,
                            0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
                            0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a])
        my_metadata = bytes([0x43, 0xc4, 0x44, 0xc5, 0x45, 0xc6, 0x46, 0xc7, 0x47, 0xc8, 0x48,
                             0xc9, 0x49, 0xca, 0x4a, 0xcb, 0x4b, 0xcc, 0x4c, 0xcd, 0x4d, 0xce,
                             0x4e, 0xcf, 0x4f, 0xd0, 0x50, 0xd1, 0x51, 0xd2, 0x52, 0xd3, 0x53,
                             0xd4, 0x54, 0xd5, 0x55, 0xd6, 0x56, 0xd7, 0x57, 0xd8, 0x58, 0xd9,
                             0x59, 0xda, 0x5a, 0xdb, 0x5b, 0xdc, 0x5c, 0xdd, 0x5d, 0xde, 0x5e,
                             0xdf, 0x5f, 0xe0, 0x60, 0xe1, 0x61, 0xe2, 0x62, 0xe3])

        output_ciphertexts = [bytes([0xec, 0xef, 0x16, 0xba, 0x20, 0x40, 0x61, 0xe5, 0x60, 0x0c,
                                     0x52, 0xfb, 0xd3, 0xc4, 0xc5, 0x71, 0xc7, 0xdc, 0x32, 0xfe,
                                     0x7b, 0xfd, 0xa0, 0x88, 0x00, 0xa2, 0x2e, 0x17, 0x21, 0x3d,
                                     0xcf, 0xba, 0x34, 0x5f, 0xf8, 0x28, 0xb5, 0x11, 0xc4, 0xaa,
                                     0xd3, 0xbf, 0xa1, 0x11, 0xa1, 0x45, 0x05, 0x2b, 0x5d, 0xea,
                                     0xcf, 0x97, 0xd7, 0x4d, 0x51, 0x65, 0xb6, 0xa6, 0x92, 0x70,
                                     0xff, 0x2c, 0xb4, 0x1e, 0xff, 0xa5, 0x0e, 0xa1, 0x80, 0xac,
                                     0x4b, 0x16, 0x2e, 0x20, 0x8c, 0xda, 0xc2, 0x70, 0x59, 0x30,
                                     0x1f, 0x37, 0xae, 0x88, 0x27, 0xfd, 0x04, 0xfa, 0xd7, 0x80,
                                     0xac, 0x89, 0x57, 0x5b, 0x3b, 0x79, 0xdd, 0x05, 0x3d, 0xef,
                                     0x11, 0xcf, 0xc0, 0x2c, 0xdb, 0x1b, 0xb1, 0x96, 0x6b, 0xe9,
                                     0x83, 0xa5, 0x5b, 0x8a, 0x9d, 0xe0, 0x1d, 0x15, 0x9c, 0x60,
                                     0x11, 0x30, 0xbd, 0x4e, 0x8f, 0xe1, 0x8f, 0xa6]),
                              bytes([0xc2, 0xb1, 0xf0, 0x3a, 0xa1, 0x48, 0x0d, 0x03, 0x90, 0x8f,
                                     0xf8, 0xf6, 0x40, 0xa7, 0xe3, 0x0e, 0x90, 0x06, 0x36, 0x95,
                                     0x9f, 0xd7, 0x24, 0x62, 0xf9, 0xe8, 0xd8, 0x80, 0xe8, 0x4d,
                                     0x5b, 0xa7, 0xab, 0x32, 0xe2, 0xf7, 0x21, 0xd7, 0x2e, 0xe4,
                                     0x81, 0x3d, 0xbb, 0x4a, 0xda, 0xd5, 0x13, 0x02, 0x71, 0xb1,
                                     0xfe, 0xfa, 0x27, 0x77, 0x29, 0x0c, 0xd0, 0x1c, 0xab, 0x5a,
                                     0x62, 0x67, 0xd6, 0x88, 0xd1, 0x00, 0xb1, 0x73, 0x05, 0x57,
                                     0xfc, 0xa3, 0x16, 0x40, 0x53, 0xd2, 0xd4, 0x61, 0x40, 0xd6,
                                     0xc4, 0xcc, 0x2b, 0x86, 0x6e, 0x4f, 0x9b, 0xee, 0xe9, 0xc1,
                                     0x82, 0x19, 0xf1, 0xc9, 0xd5, 0x43, 0x3c, 0x58, 0xdc, 0xe7,
                                     0x97, 0x37, 0x83, 0x49, 0xfa, 0x7a, 0x86, 0xf1, 0xfa, 0x7b,
                                     0x23, 0xed, 0x93, 0x09, 0xbc, 0xa0, 0xdb, 0xb2, 0x3e, 0xc0,
                                     0x4b, 0xbe, 0x71, 0x3b, 0x04, 0xb6, 0xc9, 0xb3]),
                              bytes([0xde, 0x82, 0xef, 0xd7, 0x9b, 0x16, 0x14, 0xaf, 0x00, 0xe1,
                                     0xcf, 0x6e, 0x9f, 0x3f, 0x65, 0x52, 0xed, 0x2c, 0xf5, 0x5a,
                                     0x2e, 0x64, 0x2e, 0x8f, 0x58, 0x96, 0x76, 0x5f, 0x39, 0xb0,
                                     0xd3, 0x42, 0xeb, 0x41, 0x32, 0x6b, 0xa3, 0x8f, 0x0f, 0x91,
                                     0x6c, 0x4a, 0xd0, 0xf5, 0x76, 0xe5, 0xe4, 0x01, 0x51, 0x13,
                                     0xbd, 0x53, 0xf7, 0x34, 0xf8, 0x79, 0x9c, 0xe1, 0x0f, 0xd7,
                                     0xd8, 0x92, 0x37, 0xe8, 0x2f, 0xc4, 0xd2, 0x59, 0x47, 0x29,
                                     0xfe, 0x03, 0xd3, 0xb4, 0x1d, 0xef, 0x13, 0xde, 0xcb, 0x1f,
                                     0xee, 0x0d, 0x7c, 0x35, 0x61, 0x11, 0x95, 0xa7, 0xcd, 0x06,
                                     0x5c, 0x5a, 0xba, 0xa8, 0x83, 0x98, 0x85, 0x1d, 0xd0, 0x13,
                                     0xb7, 0x16, 0xc4, 0xec, 0x4d, 0xb3, 0x2e, 0xaf, 0x14, 0x7a,
                                     0x0b, 0x24, 0x67, 0x99, 0xd7, 0x16, 0x5d, 0x4a, 0xcd, 0xf4,
                                     0xb9, 0xee, 0x26, 0x6c, 0x7a, 0x33, 0x86, 0xeb])]

        output_tags = [bytes([0x50, 0xab, 0x19, 0xf1, 0xbd, 0x21, 0x90, 0x91, 0x04, 0x7e, 0xc9,
                              0x49, 0xca, 0xd8, 0xad, 0x44]),
                       bytes([0xa0, 0xd3, 0x67, 0x7a, 0xcf, 0x88, 0xc5, 0x6c, 0x8d, 0xc7, 0x63,
                              0x04, 0x5d, 0xa9, 0x37, 0x3b]),
                       bytes([0x25, 0x13, 0x26, 0xac, 0xb4, 0xf0, 0x97, 0x17, 0xe9, 0xde, 0x39,
                              0x6f, 0x03, 0x78, 0x79, 0xfa])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_64_msg_128_meta_64_nonce_24(self, test_workers):
        # performTestKravatte_SAE_OneInput(64*8, 24*8, 128*8, 64*8, spongeChecksum);
        # keyLen   512, nonceLen   192, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a])
        my_nonce = bytes([0x67, 0x58, 0x49, 0x3a, 0x2b, 0x1c, 0x0d, 0xfe, 0xef, 0xe0, 0xd1, 0xc2, 0xb3, 0xa4, 0x95, 0x86, 0x76, 0x67, 0x58, 0x49, 0x3a, 0x2b, 0x1c, 0x0d])
        my_message = bytes([0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a])
        my_metadata = bytes([0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b, 0xab, 0x2c, 0xac, 0x2d, 0xad, 0x2e, 0xae, 0x2f, 0xaf, 0x30, 0xb0, 0x31, 0xb1, 0x32, 0xb2, 0x33, 0xb3, 0x34, 0xb4, 0x35, 0xb5, 0x36, 0xb6, 0x37, 0xb7, 0x38, 0xb8, 0x39, 0xb9, 0x3a, 0xba, 0x3b, 0xbb, 0x3c, 0xbc, 0x3d, 0xbd, 0x3e, 0xbe, 0x3f, 0xbf, 0x40, 0xc0, 0x41, 0xc1, 0x42, 0xc2, 0x43])
        output_ciphertexts = [bytes([0x14, 0x31, 0x14, 0xf2, 0xe9, 0x44, 0x82, 0x11, 0x1c, 0x92, 0xe3, 0xe2, 0xb3, 0x51, 0x59, 0x47, 0x58, 0x49, 0xf8, 0xbd, 0x49, 0x9a, 0x2c, 0x9b, 0x0d, 0x8e, 0xaa, 0x05, 0xa8, 0x89, 0x83, 0xac, 0x63, 0xb9, 0xc5, 0xa9, 0xcd, 0xd9, 0x72, 0xfc, 0x76, 0xdb, 0x25, 0x14, 0x3f, 0x43, 0xbc, 0x9d, 0x79, 0x2b, 0xc8, 0xe7, 0x0b, 0x5e, 0x9a, 0x7b, 0xa6, 0xbe, 0xea, 0x89, 0x9a, 0xff, 0xaf, 0xe5, 0x43, 0x2e, 0x75, 0x42, 0xf3, 0x1b, 0x90, 0xd8, 0x22, 0x8e, 0x19, 0xa7, 0xfd, 0x29, 0x19, 0x40, 0xd2, 0xe6, 0x40, 0xc3, 0xbf, 0x11, 0xe8, 0xa1, 0xea, 0xeb, 0x1a, 0x5c, 0x8b, 0x84, 0x08, 0x9e, 0xd1, 0x98, 0xeb, 0x80, 0x69, 0xde, 0x02, 0x48, 0x53, 0x8a, 0xf8, 0xd3, 0xe0, 0x61, 0x0d, 0xe6, 0x90, 0x97, 0x62, 0x45, 0x69, 0x2d, 0xb7, 0x8f, 0xae, 0x35, 0xa5, 0xf4, 0xbe, 0x0f, 0xac, 0xde]),
                              bytes([0xf8, 0xf7, 0xeb, 0x00, 0x42, 0x32, 0xf6, 0x47, 0xa0, 0xb2, 0x04, 0x90, 0xf8, 0xe0, 0x0d, 0x13, 0xe0, 0xd5, 0x86, 0x3b, 0xc0, 0x19, 0x29, 0x57, 0x40, 0xf9, 0x4b, 0x6a, 0x4e, 0x54, 0x3b, 0xb3, 0xff, 0x4f, 0x05, 0x85, 0x80, 0x85, 0xb7, 0xbd, 0xb6, 0x2e, 0x54, 0xbf, 0xeb, 0x64, 0x7c, 0xd3, 0x97, 0xf9, 0x6d, 0xe1, 0x68, 0xac, 0xea, 0xee, 0xfe, 0x12, 0xf3, 0xa6, 0xcd, 0xe9, 0x88, 0xa0, 0x5a, 0x43, 0x9c, 0x08, 0x1f, 0xc2, 0xb7, 0x42, 0x85, 0x51, 0xd6, 0xf3, 0x46, 0x85, 0x14, 0xcd, 0x63, 0xae, 0x0b, 0xee, 0xa5, 0x18, 0x66, 0xe3, 0x2f, 0xd4, 0xb7, 0xdc, 0x0c, 0x38, 0x1f, 0xcf, 0x85, 0x7d, 0xa6, 0x2a, 0x82, 0x0a, 0xfb, 0x5d, 0xbf, 0xce, 0x3a, 0x2f, 0x65, 0x46, 0xfb, 0x8c, 0x39, 0xa5, 0xb6, 0x01, 0x3c, 0x1e, 0x59, 0x84, 0x77, 0x81, 0x76, 0xdd, 0x2b, 0xf0, 0x66, 0xfe]),
                              bytes([0xe6, 0x5b, 0xca, 0x05, 0xb7, 0xd0, 0x55, 0xf7, 0xb1, 0xe9, 0xb6, 0x32, 0xcb, 0x09, 0x9f, 0x1e, 0xd5, 0x0b, 0xf9, 0x10, 0xbe, 0x77, 0x5a, 0x42, 0x71, 0x63, 0x05, 0xd6, 0x2e, 0xae, 0x59, 0xbc, 0x12, 0x8b, 0x69, 0x2b, 0x3f, 0xf0, 0xe0, 0x41, 0x20, 0xb2, 0x9b, 0x56, 0x75, 0xfc, 0x15, 0x9a, 0xea, 0xa5, 0x86, 0x1d, 0xc0, 0xf1, 0x82, 0xa5, 0x88, 0x67, 0x68, 0x6d, 0x14, 0x06, 0xff, 0xdb, 0x52, 0x34, 0x74, 0xa0, 0x97, 0xdb, 0xb5, 0x8b, 0xb0, 0x03, 0xe2, 0x94, 0xd6, 0x09, 0x6b, 0xf9, 0x11, 0x11, 0xd4, 0x65, 0x96, 0x5e, 0x93, 0x40, 0xbf, 0x34, 0x23, 0x81, 0x98, 0xc0, 0x4d, 0x6c, 0x27, 0x39, 0x89, 0xba, 0x45, 0x66, 0x5c, 0xc9, 0x74, 0x60, 0x4d, 0x99, 0x65, 0xd5, 0x05, 0x22, 0x8c, 0xc5, 0xc0, 0x2a, 0xda, 0x9b, 0x14, 0x52, 0x70, 0x65, 0x70, 0xba, 0x96, 0x80, 0x51, 0xa1])]
        output_tags = [bytes([0x77, 0xd7, 0x06, 0x62, 0x10, 0x43, 0xc4, 0x53, 0xe1, 0x38, 0x2c, 0x84, 0x19, 0x56, 0x04, 0xfb]),
                       bytes([0x0e, 0x02, 0xad, 0xc3, 0x4e, 0x77, 0x07, 0x39, 0xb3, 0xfa, 0xf8, 0x5c, 0x26, 0xa1, 0x46, 0x7c]),
                       bytes([0xe3, 0xaf, 0x10, 0x04, 0x00, 0x46, 0x60, 0xd9, 0x2f, 0xac, 0x42, 0x30, 0xc6, 0x03, 0x07, 0xa6])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_16_msg_128_meta_64_nonce_32(self, test_workers):
        # performTestKravatte_SAE_OneInput(16*8, 32*8, 128*8, 64*8, spongeChecksum);
        # keyLen   128, nonceLen   256, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02])
        my_nonce = bytes([0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf6, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2])
        my_metadata = bytes([0x0b, 0x8c, 0x0c, 0x8d, 0x0d, 0x8e, 0x0e, 0x8f, 0x0f, 0x90, 0x10, 0x91, 0x11, 0x92, 0x12, 0x93, 0x13, 0x94, 0x14, 0x95, 0x15, 0x96, 0x16, 0x97, 0x17, 0x98, 0x18, 0x99, 0x19, 0x9a, 0x1a, 0x9b, 0x1b, 0x9c, 0x1c, 0x9d, 0x1d, 0x9e, 0x1e, 0x9f, 0x1f, 0xa0, 0x20, 0xa1, 0x21, 0xa2, 0x22, 0xa3, 0x23, 0xa4, 0x24, 0xa5, 0x25, 0xa6, 0x26, 0xa7, 0x27, 0xa8, 0x28, 0xa9, 0x29, 0xaa, 0x2a, 0xab])
        output_ciphertexts = [bytes([0xfb, 0x24, 0x07, 0x2c, 0xf7, 0xc5, 0x1d, 0x80, 0x9e, 0x09, 0xa5, 0x81, 0xa3, 0x03, 0x65, 0xba, 0x2b, 0x5c, 0xe2, 0xc1, 0xf4, 0x8c, 0xcd, 0xfd, 0x77, 0x8e, 0x20, 0x68, 0xa8, 0xec, 0xe2, 0x6e, 0xae, 0xe1, 0x39, 0x72, 0x77, 0x78, 0x9b, 0x68, 0x8a, 0xf6, 0x0a, 0x92, 0x98, 0x08, 0x11, 0x8d, 0x08, 0x2a, 0xe3, 0xe2, 0x62, 0x5a, 0xfe, 0x98, 0xb6, 0x42, 0xcf, 0x74, 0xee, 0xf9, 0x19, 0x3c, 0x4a, 0xed, 0x63, 0x9a, 0x7b, 0xdf, 0xc7, 0xfc, 0xe4, 0x2e, 0xe4, 0x02, 0x03, 0xcc, 0x9e, 0x02, 0x20, 0x6c, 0x06, 0xa5, 0xa3, 0x00, 0xe5, 0xf1, 0x4b, 0xfb, 0x11, 0xd7, 0x37, 0xfb, 0x9a, 0x39, 0x42, 0x95, 0x39, 0xbe, 0xe6, 0xc1, 0xab, 0x20, 0xb4, 0x1f, 0x1e, 0x7b, 0x4d, 0xbd, 0xbe, 0x7f, 0x64, 0x7d, 0xb5, 0x81, 0xac, 0x17, 0xc3, 0x6b, 0xc9, 0x14, 0xa6, 0xb4, 0x40, 0xfb, 0xa8, 0xa2]),
                              bytes([0xd8, 0x1d, 0x46, 0x98, 0x80, 0xca, 0xe5, 0x56, 0x62, 0x9f, 0xd2, 0xf5, 0x4e, 0x76, 0xf3, 0x40, 0x70, 0xcb, 0x23, 0x72, 0x07, 0xc2, 0x9c, 0xc3, 0xa0, 0x1a, 0x2c, 0x17, 0x01, 0xc4, 0x79, 0xd7, 0x2d, 0x53, 0xb3, 0xed, 0x7f, 0x8e, 0x09, 0x98, 0x66, 0xbf, 0x2f, 0x5e, 0x61, 0x8d, 0xa8, 0x01, 0xb3, 0x1f, 0x3c, 0x08, 0xf8, 0x35, 0x84, 0x2a, 0x84, 0x3d, 0xbc, 0x00, 0x72, 0x3b, 0x13, 0xe0, 0xfd, 0x3e, 0x84, 0x70, 0xd2, 0x20, 0xda, 0xd3, 0x74, 0x7a, 0x2a, 0x53, 0xfd, 0x19, 0x52, 0x51, 0xcd, 0xc5, 0xfb, 0xdf, 0x9f, 0x98, 0xfb, 0xa3, 0x10, 0xca, 0xb8, 0x6e, 0x1f, 0xa6, 0x63, 0x6a, 0x91, 0x86, 0x5b, 0x3a, 0x9c, 0x17, 0x44, 0xc4, 0xa1, 0x01, 0xde, 0x8f, 0xb1, 0x2f, 0x80, 0x7c, 0xa4, 0xdf, 0x89, 0x84, 0x2e, 0x73, 0x00, 0xc9, 0xca, 0x40, 0x8d, 0xbe, 0xe6, 0x43, 0xc3, 0x7c]),
                              bytes([0x50, 0x39, 0xbe, 0xea, 0xc4, 0x0a, 0x28, 0xe0, 0x48, 0xc5, 0x75, 0xea, 0x6b, 0x42, 0x8e, 0xc7, 0xe2, 0xb7, 0x36, 0xbf, 0xb2, 0xb3, 0xcd, 0xda, 0xcc, 0xdd, 0x87, 0xc2, 0x0d, 0xeb, 0x97, 0x66, 0x6d, 0x2c, 0x0e, 0x83, 0x27, 0xa2, 0xdb, 0x06, 0xa4, 0x43, 0x62, 0x42, 0xf8, 0x8e, 0xc9, 0xf2, 0x66, 0x3e, 0xc2, 0x18, 0x53, 0xe0, 0x77, 0xa3, 0xf8, 0x25, 0x60, 0xc2, 0x95, 0x51, 0x3b, 0xf2, 0x8b, 0xeb, 0x30, 0xf3, 0x12, 0xad, 0x0b, 0x11, 0xd6, 0x10, 0x2c, 0x5d, 0x3f, 0xe7, 0x67, 0xa2, 0x77, 0x2c, 0xcd, 0x44, 0x3c, 0x73, 0x71, 0xfe, 0xff, 0x70, 0x31, 0xe2, 0x73, 0x53, 0x73, 0x29, 0x4a, 0xe8, 0x17, 0xe5, 0x56, 0x73, 0x62, 0x99, 0xcd, 0x3c, 0x9b, 0xb3, 0x86, 0xba, 0xee, 0x25, 0x69, 0x66, 0x71, 0x96, 0xcf, 0xcb, 0x0a, 0x53, 0x3c, 0xcf, 0x2d, 0x7d, 0x8c, 0x23, 0x6e, 0x40])]
        output_tags = [bytes([0x81, 0x99, 0xf5, 0xf3, 0x8e, 0x19, 0xa5, 0x01, 0x45, 0x20, 0xac, 0xd6, 0x64, 0x9f, 0xbe, 0x68]),
                       bytes([0x28, 0xd9, 0xd0, 0xa1, 0x3f, 0xbf, 0xb6, 0x54, 0x37, 0x98, 0x57, 0x4a, 0x47, 0x3d, 0x70, 0xca]),
                       bytes([0x66, 0x4e, 0x77, 0xcc, 0x59, 0xa3, 0xf1, 0x1b, 0x83, 0x3b, 0x32, 0x06, 0x17, 0x3f, 0xe9, 0x40])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_16_msg_128_meta_64_nonce_64(self, test_workers):
        # performTestKravatte_SAE_OneInput(16*8, 64*8, 128*8, 64*8, spongeChecksum);
        # keyLen   128, nonceLen   512, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2])
        my_nonce = bytes([0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf6, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23])
        my_message = bytes([0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2])
        my_metadata = bytes([0xeb, 0x6c, 0xec, 0x6d, 0xed, 0x6e, 0xee, 0x6f, 0xef, 0x70, 0xf0, 0x71, 0xf1, 0x72, 0xf2, 0x73, 0xf3, 0x74, 0xf4, 0x75, 0xf5, 0x76, 0xf6, 0x77, 0xf7, 0x78, 0xf8, 0x79, 0xf9, 0x7a, 0xfa, 0x7b, 0xfb, 0x7c, 0xfc, 0x7d, 0xfd, 0x7e, 0xfe, 0x7f, 0xff, 0x80, 0x00, 0x81, 0x01, 0x82, 0x02, 0x83, 0x03, 0x84, 0x04, 0x85, 0x05, 0x86, 0x06, 0x87, 0x07, 0x88, 0x08, 0x89, 0x09, 0x8a, 0x0a, 0x8b])
        output_ciphertexts = [bytes([0x2e, 0x9f, 0x8e, 0xf8, 0x23, 0x28, 0x35, 0xc8, 0x18, 0x1a, 0x93, 0x26, 0x5b, 0xee, 0x4b, 0xa4, 0x8c, 0x5e, 0xd3, 0xe4, 0x87, 0x86, 0x62, 0x83, 0x92, 0xea, 0x4d, 0xdc, 0xbb, 0x77, 0xc3, 0xb5, 0xca, 0x78, 0x30, 0xea, 0xa5, 0x0d, 0xe7, 0x4e, 0xdf, 0x01, 0xb0, 0x80, 0xc7, 0x77, 0x4f, 0x48, 0xc5, 0xf0, 0x2d, 0xf9, 0xb8, 0xae, 0xc5, 0x7d, 0xd3, 0xb9, 0x50, 0x97, 0x60, 0x89, 0xff, 0x24, 0xc1, 0xcc, 0x13, 0x46, 0x89, 0x53, 0x0b, 0xe8, 0xa8, 0x91, 0xe8, 0xc3, 0xfa, 0xc8, 0x6d, 0x28, 0xc2, 0x4e, 0x43, 0xc6, 0x4e, 0x7b, 0xb0, 0x92, 0xf8, 0x7f, 0xbf, 0x50, 0xe7, 0x54, 0x0a, 0xc2, 0xbf, 0xf7, 0x22, 0x90, 0x42, 0x20, 0x51, 0xfe, 0x99, 0x0e, 0x37, 0x83, 0x61, 0x13, 0xb1, 0x8b, 0x65, 0xe1, 0xa1, 0xb5, 0x6a, 0xab, 0xc0, 0x0f, 0xaf, 0x56, 0xd0, 0x04, 0x86, 0x12, 0x6d, 0xc3]),
                              bytes([0x09, 0x08, 0x06, 0x68, 0x51, 0x46, 0x7b, 0xee, 0x12, 0x26, 0xb4, 0x55, 0xd0, 0x85, 0x74, 0x3d, 0x11, 0xda, 0xa0, 0x21, 0x8d, 0xab, 0xca, 0x19, 0x07, 0x80, 0x0c, 0x00, 0xdf, 0x2d, 0x9d, 0x32, 0x97, 0x39, 0x17, 0x05, 0x89, 0xd4, 0xc3, 0x4d, 0xcb, 0x9b, 0x2f, 0x5f, 0x13, 0x30, 0x86, 0xa0, 0x45, 0x4c, 0x59, 0x5b, 0x82, 0xd6, 0x0f, 0x5a, 0x7b, 0x5b, 0x39, 0x7c, 0x5c, 0xfa, 0x24, 0xbd, 0x66, 0x10, 0x00, 0xbc, 0xf1, 0xcd, 0x44, 0xa3, 0x79, 0xcd, 0xa7, 0xfa, 0x15, 0x0d, 0x49, 0x82, 0xd2, 0x93, 0x8c, 0xb4, 0xb4, 0xc7, 0xca, 0x41, 0xf9, 0x29, 0xdb, 0x61, 0xf2, 0xb6, 0x03, 0xfe, 0x6c, 0x4e, 0xc4, 0xf9, 0x7b, 0xc4, 0xdb, 0xf8, 0xd9, 0xb6, 0x28, 0xab, 0xf9, 0xbe, 0xff, 0x57, 0xfd, 0xbf, 0x4f, 0xd9, 0xae, 0xc9, 0x91, 0xa3, 0x2e, 0xd1, 0x34, 0xe9, 0x26, 0xc4, 0x96, 0xbe]),
                              bytes([0xe9, 0x4a, 0x37, 0x72, 0xca, 0x3a, 0xaf, 0x19, 0x61, 0x93, 0x1f, 0x25, 0xbf, 0x2a, 0xb8, 0x7b, 0x55, 0xd0, 0x9d, 0x9f, 0xfd, 0x22, 0x63, 0xde, 0xbb, 0x32, 0x51, 0x7f, 0xd3, 0x42, 0x80, 0x0a, 0x55, 0x33, 0x52, 0x3a, 0xc3, 0xbc, 0x58, 0x17, 0x36, 0x4c, 0xb3, 0xa1, 0xef, 0xf2, 0xdc, 0x61, 0x5f, 0x74, 0xd5, 0x3d, 0xac, 0x1f, 0x6e, 0x14, 0xdc, 0x40, 0xf5, 0xe9, 0x5c, 0x71, 0x2a, 0x74, 0x5e, 0x3a, 0xbf, 0x11, 0x2c, 0x84, 0x6b, 0x05, 0xb5, 0x78, 0x71, 0xd3, 0xfa, 0x73, 0x23, 0xa7, 0x07, 0xf0, 0x46, 0xd9, 0x6a, 0xbe, 0x28, 0x02, 0xac, 0xb9, 0xeb, 0x2d, 0xf6, 0xe1, 0x58, 0xb2, 0xd9, 0x17, 0x7c, 0x6f, 0xbc, 0xfc, 0x02, 0x3f, 0x5e, 0x3a, 0x80, 0x87, 0xcd, 0xc3, 0x74, 0x3c, 0xa2, 0x7e, 0x12, 0x00, 0x69, 0xa8, 0x9d, 0xb9, 0x3a, 0x40, 0x4f, 0x11, 0xf3, 0x7b, 0xd0, 0xa6])]
        output_tags = [bytes([0x6f, 0x6a, 0x3e, 0x0b, 0x51, 0x29, 0x9a, 0x75, 0x9b, 0x42, 0xd5, 0xcd, 0x4d, 0x6b, 0xc3, 0xfb]),
                       bytes([0xa8, 0xee, 0x46, 0x4d, 0xfa, 0xde, 0xa1, 0xe2, 0x37, 0xff, 0x30, 0x3d, 0xba, 0x13, 0xf7, 0x0b]),
                       bytes([0x4b, 0x9e, 0x56, 0x5d, 0xd7, 0x84, 0x73, 0x6c, 0xeb, 0x46, 0x00, 0x8d, 0x25, 0x69, 0x72, 0xb1])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_16_msg_128_meta_64_nonce_128(self, test_workers):
        # performTestKravatte_SAE_OneInput(16*8, 128*8, 128*8, 64*8, spongeChecksum);
        # keyLen   128, nonceLen  1024, dataLen  1024, ADLen   512 (in bits)
        my_key = bytes([0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2])
        my_nonce = bytes([0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf6, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x05, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x14, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x23, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x32, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x41, 0x31, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f, 0x50, 0x40, 0x31, 0x22, 0x13, 0x04, 0xf5, 0xe6, 0xd7, 0xc8, 0xb9, 0xaa, 0x9b, 0x8c, 0x7d, 0x6e, 0x5f])
        my_message = bytes([0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92])
        my_metadata = bytes([0xab, 0x2c, 0xac, 0x2d, 0xad, 0x2e, 0xae, 0x2f, 0xaf, 0x30, 0xb0, 0x31, 0xb1, 0x32, 0xb2, 0x33, 0xb3, 0x34, 0xb4, 0x35, 0xb5, 0x36, 0xb6, 0x37, 0xb7, 0x38, 0xb8, 0x39, 0xb9, 0x3a, 0xba, 0x3b, 0xbb, 0x3c, 0xbc, 0x3d, 0xbd, 0x3e, 0xbe, 0x3f, 0xbf, 0x40, 0xc0, 0x41, 0xc1, 0x42, 0xc2, 0x43, 0xc3, 0x44, 0xc4, 0x45, 0xc5, 0x46, 0xc6, 0x47, 0xc7, 0x48, 0xc8, 0x49, 0xc9, 0x4a, 0xca, 0x4b])
        output_ciphertexts = [bytes([0x58, 0xfb, 0xd4, 0x87, 0x15, 0x73, 0xc1, 0xf3, 0xde, 0x97, 0xf5, 0x31, 0x52, 0x7a, 0x3c, 0x2d, 0xbf, 0xee, 0x1e, 0x0e, 0x62, 0x07, 0xd6, 0xe7, 0x7f, 0xa9, 0x48, 0xb5, 0x99, 0x14, 0x83, 0x77, 0x06, 0x74, 0xf5, 0xea, 0x05, 0x22, 0xf9, 0x51, 0xde, 0x1e, 0x43, 0x91, 0xaa, 0xf7, 0x0c, 0x1e, 0x55, 0xc9, 0x2c, 0x92, 0x88, 0x10, 0xaa, 0xc0, 0x0f, 0x9a, 0x10, 0x1f, 0x99, 0x1b, 0xac, 0xd5, 0xb8, 0x54, 0x08, 0x3a, 0x0e, 0x62, 0x54, 0x25, 0x6c, 0x00, 0xad, 0x2b, 0xae, 0x28, 0x9b, 0x7d, 0x03, 0x2f, 0xd6, 0xed, 0x8e, 0xb1, 0x5c, 0x07, 0x1a, 0x2e, 0x41, 0xa6, 0xf2, 0x4d, 0xfb, 0xd2, 0x30, 0x78, 0x53, 0xcb, 0x8d, 0xe6, 0x0a, 0x66, 0x3d, 0x99, 0xe6, 0x9a, 0x11, 0x05, 0x9c, 0x58, 0x5e, 0x19, 0x61, 0xc8, 0xeb, 0x7d, 0x07, 0x70, 0x70, 0xa5, 0x90, 0xab, 0xd3, 0xd8, 0xd1, 0x29]),
                              bytes([0xb3, 0xde, 0x25, 0xb4, 0xba, 0x16, 0xfd, 0x07, 0x27, 0xf9, 0x66, 0x76, 0x16, 0xee, 0x2c, 0x14, 0x04, 0x45, 0xba, 0x32, 0x57, 0xf5, 0x25, 0x65, 0xb7, 0x64, 0xf6, 0x18, 0xcc, 0xc0, 0xdd, 0x86, 0x53, 0x46, 0xf1, 0xb3, 0x4c, 0x8d, 0x22, 0x68, 0x4c, 0xcc, 0x02, 0x12, 0xf8, 0xb8, 0xc5, 0xf5, 0x5a, 0x15, 0x22, 0x5e, 0x48, 0x8a, 0xf9, 0x01, 0x84, 0x26, 0xd9, 0x22, 0xb4, 0xc7, 0xd5, 0x96, 0x2a, 0x9c, 0x1c, 0xa0, 0x75, 0x54, 0xf4, 0xd4, 0x29, 0x9e, 0x83, 0x58, 0xb0, 0xf1, 0x59, 0x8f, 0x71, 0xc5, 0x23, 0x6b, 0xe2, 0xad, 0x67, 0xed, 0x01, 0xa5, 0x7d, 0x77, 0x55, 0x46, 0xb1, 0x66, 0xce, 0xde, 0x22, 0x19, 0x15, 0xd1, 0x90, 0x3e, 0xf5, 0x9c, 0x0a, 0xe8, 0x18, 0x37, 0x97, 0x29, 0xcf, 0x6c, 0xd3, 0x3f, 0xf9, 0x83, 0x4a, 0x81, 0xb6, 0x18, 0x70, 0xd8, 0xd4, 0xfa, 0x13, 0x69]),
                              bytes([0x89, 0xb4, 0xc6, 0x85, 0xeb, 0x56, 0xe6, 0x42, 0x2c, 0xbb, 0x35, 0x2c, 0x3b, 0x45, 0x61, 0xb9, 0x85, 0xd9, 0x53, 0x6a, 0x77, 0x7e, 0x1e, 0xe8, 0xa7, 0xed, 0xf9, 0x74, 0x53, 0x22, 0xd4, 0x97, 0x2f, 0x01, 0x02, 0xbd, 0x39, 0xad, 0xad, 0xe5, 0x15, 0xe6, 0xf2, 0xf2, 0xcc, 0x73, 0x96, 0xd8, 0xc4, 0x89, 0xd8, 0x7e, 0x3c, 0xea, 0x8b, 0x8e, 0xd9, 0x44, 0xfe, 0x38, 0xd5, 0xe1, 0x7f, 0x3a, 0x73, 0xd3, 0xef, 0xa5, 0xda, 0x02, 0xb8, 0xb4, 0xe2, 0x89, 0xcf, 0x10, 0x54, 0x64, 0x0b, 0xab, 0x86, 0x9b, 0x9f, 0xd3, 0x29, 0x92, 0x00, 0x04, 0x62, 0x42, 0x2b, 0x38, 0xf3, 0xcd, 0xaf, 0x22, 0x19, 0x22, 0x23, 0xe8, 0xf8, 0x5a, 0xd9, 0x27, 0xde, 0xbf, 0x0d, 0x6a, 0xfb, 0x41, 0xf2, 0x49, 0xc5, 0x9e, 0x0b, 0x46, 0x38, 0x7c, 0x19, 0xf1, 0x34, 0xa1, 0xe4, 0x58, 0xdc, 0x87, 0xe5, 0xb0])]
        output_tags = [bytes([0x92, 0x8b, 0x2a, 0x7a, 0x6b, 0x77, 0x7e, 0x34, 0x86, 0xd5, 0xd5, 0xb8, 0x7e, 0xcd, 0x53, 0xe4]),
                       bytes([0x96, 0x39, 0xa3, 0x83, 0x08, 0x55, 0xb5, 0x26, 0x69, 0x58, 0x1a, 0x91, 0x61, 0x23, 0xa0, 0x10]),
                       bytes([0x39, 0x99, 0x8b, 0xc9, 0xfd, 0xe1, 0xdd, 0x80, 0xc5, 0x9c, 0x97, 0x92, 0xd9, 0x79, 0x52, 0xc8])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_16_msg_256_meta_64_nonce_32(self, test_workers):
        # performTestKravatte_SAE_OneInput(16*8, 32*8, 256*8, 64*8, spongeChecksum);
        # keyLen   128, nonceLen   256, dataLen  2048, ADLen   512 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_nonce = bytes([0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85, 0x76, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b])
        output_ciphertexts = [bytes([0xc9, 0x03, 0xaa, 0x23, 0x02, 0x81, 0x30, 0xaf, 0x80, 0x4f, 0xb3, 0x7e, 0xc1, 0xdf, 0x8e, 0xf0, 0x5c, 0xad, 0xc7, 0xec, 0x70, 0xf7, 0x25, 0xc7, 0x52, 0x74, 0x70, 0xf5, 0xe4, 0x8b, 0xe5, 0xf2, 0xcf, 0xa9, 0x10, 0xe1, 0x14, 0x5a, 0xb9, 0x2b, 0x0a, 0x2e, 0x9f, 0x33, 0x58, 0xa1, 0xf1, 0xd2, 0x57, 0xbb, 0xc2, 0x9a, 0x53, 0x3e, 0x9f, 0xf1, 0x9e, 0xc3, 0x9f, 0x79, 0x55, 0xff, 0xed, 0x78, 0x7b, 0x8f, 0x41, 0xa3, 0x17, 0xcb, 0xcc, 0x14, 0x2c, 0xc9, 0x8e, 0x5b, 0x17, 0x50, 0x4c, 0xa9, 0x7e, 0x6d, 0x2e, 0xa8, 0x11, 0xf8, 0xac, 0xda, 0x31, 0x43, 0xa6, 0x19, 0xed, 0x26, 0x18, 0x33, 0xa8, 0x94, 0x09, 0x63, 0x3f, 0x33, 0xbb, 0x98, 0xc3, 0xf1, 0x27, 0x48, 0xaa, 0x21, 0xff, 0x4f, 0x5e, 0xf0, 0x77, 0x6a, 0xe5, 0xcf, 0x62, 0xcc, 0xb8, 0x25, 0xe7, 0xaf, 0xc1, 0xbc, 0xe6, 0xac, 0xd3, 0xd8, 0x23, 0xc4, 0x63, 0xbb, 0xdf, 0x4e, 0x77, 0x18, 0xfc, 0x7e, 0xb9, 0xe5, 0x23, 0xb3, 0xdc, 0x30, 0x15, 0x4c, 0x42, 0x06, 0x19, 0x1c, 0x9e, 0xec, 0x5b, 0x57, 0xbd, 0xe8, 0x48, 0x2a, 0x42, 0xf7, 0x19, 0xad, 0x3a, 0x02, 0xa6, 0xf0, 0xa5, 0x25, 0xb7, 0x9c, 0x3b, 0x09, 0xa2, 0x60, 0x70, 0xe6, 0x99, 0xcb, 0x38, 0x6a, 0xcb, 0x26, 0x2f, 0xee, 0x6d, 0x5a, 0x72, 0xdd, 0x2e, 0x0e, 0x3f, 0x0a, 0xdf, 0x02, 0x6d, 0xc6, 0xa8, 0xc0, 0x96, 0x3d, 0xf8, 0x9d, 0x75, 0x6e, 0x5b, 0x3e, 0xa5, 0x8d, 0xe9, 0x18, 0xf3, 0xae, 0xd4, 0x77, 0x61, 0x75, 0x83, 0x95, 0x3b, 0x72, 0x96, 0xb6, 0xc5, 0x84, 0x58, 0x4f, 0x5d, 0x23, 0xc8, 0xd7, 0xc2, 0xd8, 0xed, 0x47, 0x76, 0x09, 0x28, 0xef, 0x1b, 0x1a, 0x89, 0x35, 0xa8, 0x82, 0x7d, 0xdf, 0x15, 0xa4, 0x91, 0x6b, 0x05, 0x2f, 0x1f, 0x3b]),
                              bytes([0x35, 0xf2, 0x7b, 0x11, 0x6b, 0x49, 0x30, 0xff, 0x1b, 0x4a, 0x4f, 0xe5, 0x42, 0x8e, 0x3c, 0x8e, 0xbc, 0xc3, 0x94, 0x5f, 0x60, 0xf0, 0xa5, 0x65, 0x26, 0x47, 0xdc, 0x35, 0xdb, 0x92, 0x67, 0x1f, 0x51, 0xda, 0x75, 0x74, 0x5c, 0x1e, 0x21, 0x88, 0xef, 0x19, 0x22, 0xbe, 0x1c, 0xb7, 0x96, 0xdd, 0x7f, 0x5b, 0x22, 0xe7, 0x81, 0xb1, 0x40, 0x64, 0x22, 0x75, 0x63, 0x74, 0xbe, 0xc8, 0x9d, 0xbc, 0x04, 0x6e, 0x64, 0xde, 0xca, 0xb5, 0x5b, 0x33, 0xec, 0x34, 0xad, 0xf8, 0xab, 0xf8, 0xf2, 0xa2, 0xc8, 0xcd, 0xf5, 0x1d, 0x6f, 0x74, 0x65, 0x86, 0xc5, 0xb1, 0x1c, 0x70, 0xb0, 0xff, 0x3d, 0x72, 0xc5, 0xcc, 0x6e, 0x03, 0xd4, 0xae, 0x19, 0x2f, 0x63, 0xcc, 0xef, 0xab, 0x87, 0xe1, 0x4d, 0x46, 0xcc, 0xb2, 0x28, 0x87, 0x71, 0xbe, 0x78, 0xd7, 0x92, 0x20, 0x86, 0x56, 0xaa, 0x30, 0x1e, 0xee, 0xfe, 0x2d, 0x49, 0x52, 0x6b, 0xb9, 0xa8, 0x6c, 0xec, 0x64, 0x8f, 0xac, 0xe5, 0xab, 0x64, 0xd4, 0x32, 0xda, 0x97, 0x06, 0x0c, 0x17, 0x73, 0xe9, 0xb0, 0x00, 0x5e, 0x08, 0x92, 0x55, 0xb3, 0x74, 0x01, 0x7e, 0x2b, 0x89, 0x82, 0x0b, 0xe9, 0x19, 0x8c, 0xb6, 0xd0, 0x06, 0x1e, 0x18, 0xdc, 0x1f, 0xb3, 0x68, 0x26, 0x69, 0x87, 0x46, 0x2d, 0xd9, 0xb1, 0x12, 0x99, 0xf6, 0xa3, 0x56, 0xc8, 0x43, 0x5d, 0x1b, 0x37, 0xd9, 0x26, 0x7d, 0xee, 0x9e, 0xfa, 0x84, 0xcc, 0x10, 0x5a, 0x0e, 0x8c, 0x1c, 0x05, 0x5c, 0x34, 0x74, 0x65, 0x9f, 0xe0, 0x65, 0xae, 0x5d, 0x6d, 0x9b, 0x87, 0xa6, 0xf5, 0x7c, 0x4c, 0x54, 0x3c, 0x41, 0xba, 0xdf, 0x44, 0x62, 0xe9, 0x6d, 0x20, 0x54, 0x48, 0x12, 0x41, 0x84, 0x8a, 0x41, 0xb4, 0xeb, 0x24, 0x1b, 0x6c, 0xd1, 0x71, 0x33, 0xcd, 0xe2, 0xdb, 0x00, 0x5c, 0x9d]),
                              bytes([0x09, 0x84, 0xf1, 0x29, 0x2c, 0x6e, 0x2d, 0xcf, 0x01, 0x3c, 0xea, 0x9d, 0x67, 0x48, 0xfd, 0x62, 0x8a, 0x31, 0x4e, 0xa6, 0x17, 0xdb, 0x19, 0x67, 0xa4, 0x23, 0x01, 0xaf, 0x17, 0x34, 0x2d, 0x3f, 0x75, 0x90, 0xb0, 0x64, 0xae, 0xbc, 0x90, 0x06, 0xe9, 0x5b, 0xf9, 0xf5, 0x00, 0xdd, 0x5c, 0x75, 0x78, 0xa4, 0x89, 0x87, 0x71, 0x8d, 0x90, 0x02, 0xfa, 0xde, 0x52, 0x35, 0x94, 0x1b, 0x52, 0x65, 0x71, 0xde, 0xe9, 0x32, 0x1c, 0x99, 0x5b, 0xfd, 0x4b, 0x35, 0xb3, 0x5e, 0x89, 0x81, 0x68, 0x6a, 0x42, 0x76, 0x17, 0x9a, 0x10, 0x47, 0x4b, 0xbc, 0x73, 0x7f, 0x4e, 0x40, 0xe4, 0x2e, 0x83, 0x25, 0x3d, 0xfa, 0x4a, 0xa6, 0x6f, 0x0e, 0x37, 0xe7, 0x0b, 0xf3, 0x2f, 0x1d, 0x01, 0xf3, 0xf8, 0xd2, 0xfb, 0x32, 0x97, 0xeb, 0x85, 0xef, 0x9f, 0x29, 0x85, 0x17, 0x41, 0x87, 0xee, 0xca, 0x8b, 0x2d, 0x7e, 0xb6, 0x6b, 0xd8, 0xf0, 0xfc, 0xd9, 0x17, 0x5a, 0x63, 0x08, 0xbc, 0x0c, 0xf9, 0xe7, 0x6f, 0xb0, 0xad, 0x66, 0x64, 0xe3, 0x12, 0x53, 0x81, 0x09, 0xc7, 0xfc, 0xab, 0xb7, 0x8f, 0x02, 0x7a, 0xbb, 0x36, 0x44, 0xbd, 0xe4, 0x5e, 0xb8, 0xab, 0x73, 0x22, 0x1a, 0xb8, 0x21, 0x22, 0x66, 0x31, 0xbe, 0x94, 0xef, 0x16, 0x40, 0xff, 0x4b, 0xc1, 0x92, 0x73, 0x0e, 0xd1, 0xe3, 0x66, 0xb9, 0x90, 0xa2, 0xcf, 0x15, 0xfa, 0x67, 0x9f, 0x9b, 0x2c, 0xb6, 0x5a, 0x8b, 0x28, 0x07, 0xfd, 0xa9, 0xbd, 0xdf, 0x57, 0x25, 0x7f, 0x36, 0xf9, 0xc4, 0xea, 0x94, 0xc1, 0xb6, 0x0f, 0x5b, 0xdb, 0x89, 0xd6, 0xae, 0x1c, 0x0f, 0x35, 0x33, 0xc6, 0xb7, 0x2d, 0x19, 0x2a, 0x27, 0xa1, 0x1f, 0xf7, 0x08, 0xfb, 0xd9, 0x9b, 0x05, 0x5f, 0x18, 0xc1, 0xdc, 0x58, 0x12, 0xe4, 0x38, 0x97, 0xc7, 0x3f, 0x12, 0xfd])]
        output_tags = [bytes([0xa3, 0x9a, 0x92, 0x85, 0x3a, 0xa9, 0xd9, 0x5d, 0x1a, 0x84, 0xf7, 0x99, 0xcb, 0xc6, 0x34, 0x83]),
                       bytes([0xf0, 0x6c, 0x5a, 0xac, 0x25, 0x22, 0x2b, 0x78, 0x36, 0xac, 0x23, 0x86, 0x81, 0x29, 0xbb, 0x66]),
                       bytes([0x00, 0xd3, 0xd3, 0xf0, 0x10, 0x64, 0x09, 0x95, 0xf2, 0x60, 0xaa, 0x1a, 0x2b, 0x61, 0x5e, 0xce])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_16_msg_512_meta_64_nonce_32(self, test_workers):
        # performTestKravatte_SAE_OneInput(16*8, 32*8, 512*8, 64*8, spongeChecksum);
        # keyLen   128, nonceLen   256, dataLen  4096, ADLen   512 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_nonce = bytes([0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85, 0x76, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b])
        output_ciphertexts = [bytes([0xc9, 0x03, 0xaa, 0x23, 0x02, 0x81, 0x30, 0xaf, 0x80, 0x4f, 0xb3, 0x7e, 0xc1, 0xdf, 0x8e, 0xf0, 0x5c, 0xad, 0xc7, 0xec, 0x70, 0xf7, 0x25, 0xc7, 0x52, 0x74, 0x70, 0xf5, 0xe4, 0x8b, 0xe5, 0xf2, 0xcf, 0xa9, 0x10, 0xe1, 0x14, 0x5a, 0xb9, 0x2b, 0x0a, 0x2e, 0x9f, 0x33, 0x58, 0xa1, 0xf1, 0xd2, 0x57, 0xbb, 0xc2, 0x9a, 0x53, 0x3e, 0x9f, 0xf1, 0x9e, 0xc3, 0x9f, 0x79, 0x55, 0xff, 0xed, 0x78, 0x7b, 0x8f, 0x41, 0xa3, 0x17, 0xcb, 0xcc, 0x14, 0x2c, 0xc9, 0x8e, 0x5b, 0x17, 0x50, 0x4c, 0xa9, 0x7e, 0x6d, 0x2e, 0xa8, 0x11, 0xf8, 0xac, 0xda, 0x31, 0x43, 0xa6, 0x19, 0xed, 0x26, 0x18, 0x33, 0xa8, 0x94, 0x09, 0x63, 0x3f, 0x33, 0xbb, 0x98, 0xc3, 0xf1, 0x27, 0x48, 0xaa, 0x21, 0xff, 0x4f, 0x5e, 0xf0, 0x77, 0x6a, 0xe5, 0xcf, 0x62, 0xcc, 0xb8, 0x25, 0xe7, 0xaf, 0xc1, 0xbc, 0xe6, 0xac, 0xd3, 0xd8, 0x23, 0xc4, 0x63, 0xbb, 0xdf, 0x4e, 0x77, 0x18, 0xfc, 0x7e, 0xb9, 0xe5, 0x23, 0xb3, 0xdc, 0x30, 0x15, 0x4c, 0x42, 0x06, 0x19, 0x1c, 0x9e, 0xec, 0x5b, 0x57, 0xbd, 0xe8, 0x48, 0x2a, 0x42, 0xf7, 0x19, 0xad, 0x3a, 0x02, 0xa6, 0xf0, 0xa5, 0x25, 0xb7, 0x9c, 0x3b, 0x09, 0xa2, 0x60, 0x70, 0xe6, 0x99, 0xcb, 0x38, 0x6a, 0xcb, 0x26, 0x2f, 0xee, 0x6d, 0x5a, 0x72, 0xdd, 0x2e, 0x0e, 0x3f, 0x0a, 0xdf, 0x02, 0x6d, 0xc6, 0xa8, 0xc0, 0x96, 0x3d, 0xf8, 0x9d, 0x75, 0x6e, 0x5b, 0x3e, 0xa5, 0x8d, 0xe9, 0x18, 0xf3, 0xae, 0xd4, 0x77, 0x61, 0x75, 0x83, 0x95, 0x3b, 0x72, 0x96, 0xb6, 0xc5, 0x84, 0x58, 0x4f, 0x5d, 0x23, 0xc8, 0xd7, 0xc2, 0xd8, 0xed, 0x47, 0x76, 0x09, 0x28, 0xef, 0x1b, 0x1a, 0x89, 0x35, 0xa8, 0x82, 0x7d, 0xdf, 0x15, 0xa4, 0x91, 0x6b, 0x05, 0x2f, 0x1f, 0x3b, 0xb9, 0xc0, 0xf8, 0xce, 0xbd, 0x4b, 0x80, 0x93, 0xc8, 0xd5, 0xe6, 0x47, 0xd4, 0x57, 0x90, 0xb5, 0x17, 0xe2, 0xf2, 0x19, 0x08, 0x75, 0xc3, 0xb1, 0xdc, 0xa9, 0x07, 0xda, 0x28, 0x79, 0xb5, 0x1f, 0x26, 0xa6, 0x53, 0x6a, 0x62, 0xe8, 0x9a, 0x20, 0x43, 0xa9, 0xd7, 0x8b, 0xd4, 0xda, 0x1e, 0xec, 0xef, 0x11, 0x83, 0x03, 0xdf, 0xb8, 0x79, 0x6a, 0xa3, 0x56, 0xac, 0xd8, 0xef, 0xf4, 0x4d, 0xa1, 0x5b, 0xd4, 0xb5, 0x0d, 0xdf, 0xc9, 0x10, 0xf4, 0xb2, 0x7c, 0x78, 0x64, 0x82, 0x17, 0x0d, 0x5e, 0x05, 0xb4, 0x18, 0xa0, 0x9a, 0xa8, 0x9f, 0xe8, 0x31, 0x87, 0x03, 0x91, 0x6c, 0x0b, 0x1a, 0x37, 0x69, 0x9f, 0x4b, 0x7b, 0xb7, 0xdb, 0xd4, 0xca, 0x2b, 0x57, 0x96, 0xef, 0x12, 0x2f, 0x96, 0xa4, 0x56, 0x0b, 0xd5, 0x02, 0xbe, 0x25, 0x57, 0x2b, 0x4e, 0xf3, 0x04, 0x90, 0x1b, 0x1e, 0xf6, 0xa6, 0x02, 0x55, 0xf8, 0x47, 0x67, 0xc3, 0xcc, 0x7f, 0x35, 0xbb, 0x00, 0x89, 0x40, 0x89, 0x96, 0xc6, 0xe9, 0x1e, 0xfe, 0x8a, 0x0f, 0x29, 0x0e, 0x5d, 0xcd, 0x2a, 0xcd, 0x2b, 0xb1, 0xdb, 0x8e, 0xa6, 0xb9, 0x0a, 0xe7, 0xa5, 0x80, 0x0e, 0xa8, 0xf2, 0xcf, 0x23, 0x0b, 0x9c, 0x83, 0xbd, 0xf9, 0x44, 0x27, 0x72, 0x0b, 0xbf, 0x8c, 0x3c, 0x8e, 0xe3, 0xb0, 0x98, 0xbb, 0xd8, 0x17, 0x27, 0x3e, 0x68, 0xf9, 0xf3, 0x89, 0x00, 0xbf, 0x39, 0x14, 0xba, 0x34, 0x39, 0xd8, 0x22, 0x19, 0x4d, 0x91, 0xf9, 0xb7, 0x19, 0xe2, 0x2f, 0x66, 0xc8, 0xbc, 0x72, 0x84, 0x5f, 0xfb, 0x18, 0x17, 0xd8, 0xea, 0xa4, 0x4a, 0x17, 0x01, 0x01, 0x9e, 0xb3, 0x47, 0x95, 0x09, 0x2c, 0xf2, 0xe0, 0x68, 0xa2, 0xd8, 0x08, 0xcc, 0xd3, 0x95, 0xe2, 0x3a, 0x90, 0xa7, 0xfb, 0x08, 0xd1, 0x9e, 0x83, 0xf9, 0x5c, 0xa3, 0xa1]),
                              bytes([0x91, 0xbf, 0xc7, 0x71, 0xec, 0x7e, 0xa7, 0xfc, 0x41, 0x05, 0xa3, 0x73, 0x75, 0x17, 0x62, 0xd6, 0x47, 0x12, 0x54, 0x2e, 0x34, 0xbf, 0x7c, 0x0c, 0xdf, 0xd0, 0x0d, 0x83, 0x79, 0xf5, 0x95, 0xdf, 0x01, 0x20, 0xb0, 0xaf, 0x2c, 0xd9, 0x7a, 0x07, 0x10, 0xfe, 0xa2, 0xc3, 0xd4, 0x97, 0x72, 0x52, 0x18, 0xbf, 0x64, 0x75, 0xc1, 0xc3, 0x00, 0xe8, 0xa0, 0x39, 0xe1, 0xd5, 0x3d, 0x18, 0x7d, 0x9a, 0x1a, 0x11, 0x0d, 0x1c, 0xe6, 0x7a, 0xae, 0x07, 0x7d, 0x30, 0x80, 0xad, 0x78, 0xfb, 0x10, 0xd1, 0xb6, 0x97, 0x05, 0x97, 0x14, 0x1f, 0x0f, 0xc4, 0x7e, 0x06, 0x4e, 0x70, 0x6e, 0x24, 0xeb, 0x53, 0xdb, 0xb9, 0x1e, 0x61, 0x65, 0x15, 0xfd, 0x8b, 0x5b, 0x27, 0x21, 0xd6, 0x79, 0x78, 0xd8, 0x56, 0x5d, 0xa1, 0xc2, 0x7a, 0xea, 0x3f, 0x8e, 0xea, 0x00, 0x92, 0x7c, 0x4b, 0x6d, 0x66, 0x56, 0x3e, 0x92, 0x69, 0xc1, 0x52, 0xf2, 0xad, 0x27, 0xa7, 0x83, 0xd7, 0xc4, 0xe8, 0x42, 0x96, 0xea, 0xf5, 0x72, 0xb2, 0x2d, 0x4d, 0x60, 0x25, 0x38, 0x36, 0x1c, 0x7e, 0x56, 0xc7, 0xcc, 0x3d, 0x45, 0x9a, 0x3d, 0x43, 0xf2, 0x33, 0x07, 0xc3, 0x91, 0xf0, 0x0f, 0x36, 0xa2, 0x36, 0x53, 0xdf, 0x24, 0x80, 0xe8, 0xba, 0x7f, 0xe2, 0x6d, 0x73, 0xe5, 0x3c, 0x73, 0x9b, 0x16, 0x56, 0x63, 0xd9, 0x8d, 0xcc, 0xd9, 0xd9, 0x82, 0x10, 0xeb, 0x9d, 0x58, 0x1c, 0x19, 0xec, 0x51, 0xc9, 0xd2, 0x13, 0xab, 0x4d, 0x35, 0x24, 0x88, 0xac, 0x28, 0x22, 0xe2, 0xeb, 0xa7, 0x38, 0x97, 0x73, 0xb0, 0xf3, 0x54, 0x7f, 0x47, 0x15, 0x7c, 0xf4, 0x49, 0x05, 0xe1, 0x99, 0xb6, 0x74, 0x8b, 0x11, 0x04, 0x59, 0xdb, 0x5f, 0x23, 0x57, 0x1f, 0xd8, 0x80, 0xe7, 0x0f, 0x92, 0x28, 0x8a, 0xd0, 0xe8, 0xf3, 0x3f, 0x2a, 0xca, 0xd1, 0xdb, 0xa4, 0x6a, 0xe4, 0xf6, 0x60, 0x11, 0x0b, 0x08, 0xe3, 0x33, 0xbf, 0xeb, 0xe1, 0xea, 0xb9, 0xe0, 0xe5, 0x26, 0x0e, 0x38, 0xef, 0xdf, 0x94, 0x95, 0x9e, 0x1d, 0x01, 0xcb, 0x42, 0x57, 0xd2, 0x53, 0x07, 0x84, 0x81, 0x7d, 0xed, 0xa8, 0xc7, 0x68, 0xfc, 0x61, 0x92, 0x73, 0xab, 0x5f, 0x3c, 0xfd, 0xd1, 0x81, 0x62, 0xff, 0xc0, 0x86, 0x15, 0x32, 0x91, 0xed, 0xbb, 0xb9, 0xcb, 0x2e, 0x04, 0xdf, 0x3d, 0x4f, 0x5e, 0xd1, 0x14, 0xbd, 0x29, 0xec, 0x8b, 0x31, 0x69, 0x34, 0x47, 0x1e, 0x41, 0x64, 0x71, 0x0f, 0x5e, 0x92, 0xbd, 0xf0, 0xc4, 0x7f, 0x9e, 0xf2, 0xd2, 0x6f, 0x63, 0xf3, 0x77, 0x8c, 0x74, 0x78, 0x83, 0x68, 0x00, 0x97, 0xf9, 0xad, 0x15, 0x95, 0x37, 0xaf, 0x6d, 0x6d, 0xd2, 0x4d, 0xe0, 0xa3, 0x4b, 0xc6, 0x9c, 0xbb, 0x0a, 0xb5, 0xa9, 0xf5, 0x2d, 0xfa, 0x27, 0x1e, 0x92, 0x9b, 0x8c, 0xc9, 0xd1, 0x1c, 0x42, 0xfa, 0x33, 0x42, 0x8b, 0x40, 0x75, 0x83, 0x06, 0x57, 0xe1, 0xc1, 0x97, 0x42, 0xc6, 0x6e, 0xb6, 0xe4, 0xe7, 0xb9, 0xd1, 0x69, 0x48, 0x58, 0xab, 0x98, 0x8b, 0x0e, 0x25, 0x79, 0xb8, 0x1e, 0x0a, 0xd6, 0x00, 0x44, 0xa5, 0x57, 0x71, 0x3e, 0xb5, 0x12, 0xf8, 0xb9, 0xa2, 0xba, 0xeb, 0xa6, 0xe0, 0x33, 0xa3, 0xc0, 0x0b, 0xe9, 0xf8, 0xda, 0xc9, 0x09, 0xaf, 0x54, 0xef, 0x13, 0x28, 0x82, 0xee, 0x67, 0xc5, 0x7f, 0xff, 0xe4, 0x02, 0xb9, 0x01, 0x0d, 0x9e, 0x14, 0xed, 0xd6, 0x0e, 0xef, 0x00, 0xdc, 0xd9, 0xed, 0xed, 0x8b, 0x35, 0x75, 0x47, 0xd1, 0xb9, 0x26, 0x2f, 0x64, 0x75, 0x32, 0x29, 0xb7, 0xa2, 0x0b, 0x50, 0x6b, 0x46, 0x93, 0xfe, 0xca, 0x72, 0xce, 0xbd, 0x4f, 0x1e, 0x05, 0x23, 0xe7, 0xec, 0x04, 0x8a, 0x94, 0x27, 0xb2, 0xb0, 0xe2]),
                              bytes([0x17, 0x60, 0xf6, 0x6f, 0xe5, 0xac, 0x9e, 0x2d, 0x5a, 0x06, 0xaa, 0x84, 0x02, 0x99, 0xea, 0x12, 0xe6, 0x5f, 0x5e, 0xf9, 0xac, 0xc3, 0xab, 0x30, 0x4c, 0x6f, 0x4a, 0xbc, 0xc7, 0xda, 0x51, 0xae, 0x65, 0xf0, 0x96, 0x8c, 0x0a, 0x97, 0x2e, 0xe9, 0x48, 0x5c, 0x8f, 0x00, 0xbf, 0x7f, 0xb5, 0xec, 0x90, 0x76, 0x63, 0x3f, 0x03, 0xeb, 0xfd, 0x6a, 0x01, 0x74, 0x22, 0xa6, 0xb1, 0x26, 0x1d, 0x54, 0x20, 0x0f, 0x69, 0xb9, 0xbf, 0xc7, 0x4f, 0xf3, 0xeb, 0x62, 0x88, 0x04, 0xec, 0x1a, 0xb8, 0xb9, 0xd9, 0x93, 0xfc, 0x12, 0x0d, 0x69, 0xd8, 0x14, 0x15, 0x67, 0xe0, 0x31, 0x97, 0xbb, 0x63, 0x5b, 0xf3, 0x88, 0x32, 0x08, 0x34, 0x32, 0xbb, 0x46, 0x7a, 0x9b, 0x1b, 0xb1, 0xcd, 0x15, 0xbf, 0x77, 0x84, 0xf4, 0xd3, 0x99, 0x7c, 0xa9, 0xf8, 0x3c, 0x8c, 0x72, 0xcd, 0x12, 0xab, 0x4c, 0x92, 0x35, 0x0e, 0x74, 0x91, 0x01, 0x12, 0x70, 0x39, 0x4f, 0x05, 0x30, 0x7a, 0xe1, 0x34, 0x17, 0xf6, 0x8c, 0x0d, 0x09, 0xb5, 0x50, 0x4b, 0xcc, 0xdc, 0xb5, 0x34, 0x38, 0xac, 0x5a, 0xc5, 0x6f, 0xc2, 0xb5, 0x42, 0x1f, 0x63, 0x6a, 0x3f, 0x60, 0x31, 0x62, 0xb6, 0x2a, 0x26, 0x97, 0x68, 0xe3, 0x47, 0x9b, 0xce, 0xb3, 0xac, 0xcb, 0xd6, 0x64, 0x25, 0xa5, 0xa2, 0x8e, 0x75, 0x18, 0x6e, 0x13, 0x82, 0x56, 0x2c, 0x4f, 0x75, 0x62, 0x1c, 0x97, 0x04, 0x02, 0x04, 0x97, 0x50, 0xe8, 0x4f, 0x33, 0xba, 0xf2, 0x2c, 0x18, 0xab, 0xb6, 0xe1, 0x91, 0xfb, 0xd8, 0xb6, 0xab, 0xd4, 0x81, 0x89, 0xc4, 0x20, 0xa6, 0xe5, 0x4e, 0x59, 0xc6, 0x17, 0x90, 0x79, 0x01, 0xc5, 0x55, 0x47, 0xde, 0x36, 0xdb, 0x87, 0x6d, 0x19, 0x08, 0x7e, 0x4a, 0x89, 0xe6, 0x86, 0x4c, 0x29, 0x98, 0xb0, 0xc3, 0x6d, 0x9d, 0xce, 0xf9, 0x58, 0xa5, 0x71, 0x91, 0xf6, 0xf7, 0xff, 0x48, 0x84, 0xba, 0x62, 0x9d, 0x01, 0x34, 0x30, 0x4b, 0x3e, 0x4a, 0x9f, 0x3f, 0xe7, 0x72, 0x63, 0x72, 0x35, 0x61, 0x76, 0xc7, 0x1b, 0x7e, 0xf3, 0xdb, 0xe9, 0x3d, 0xfe, 0xfe, 0xea, 0x76, 0x8d, 0xac, 0x58, 0x71, 0x43, 0xcf, 0x8f, 0x15, 0xf2, 0xac, 0xcf, 0x61, 0xe1, 0x8e, 0xdc, 0xc9, 0x33, 0x0a, 0x3f, 0xb2, 0x9a, 0x69, 0x34, 0x40, 0xef, 0x9d, 0xb8, 0x19, 0x9c, 0x4e, 0xee, 0x9d, 0x9f, 0xfc, 0xf8, 0xd9, 0x35, 0x9e, 0x92, 0x74, 0xa6, 0x63, 0x94, 0xe3, 0x20, 0x07, 0x68, 0x40, 0x6a, 0x43, 0xf2, 0xb7, 0xdd, 0x6c, 0xe1, 0xeb, 0xff, 0xad, 0x0a, 0x4c, 0xf3, 0xed, 0xb8, 0x04, 0x39, 0x0c, 0x02, 0x40, 0x66, 0xdf, 0x85, 0xb5, 0x3c, 0x2b, 0xf0, 0xa7, 0x99, 0x3b, 0x56, 0x9e, 0xa9, 0x8c, 0xed, 0x2d, 0x72, 0x33, 0x02, 0x4a, 0x39, 0x1d, 0xf1, 0xa4, 0x6c, 0xf6, 0x25, 0xc6, 0x16, 0x46, 0x0f, 0x81, 0xc9, 0x54, 0x6d, 0xe3, 0x16, 0xb1, 0x5a, 0xa6, 0x41, 0x84, 0x6a, 0xf9, 0x61, 0x6b, 0x5b, 0xc4, 0x3c, 0x65, 0xda, 0x93, 0xf3, 0x26, 0x86, 0xb3, 0x50, 0xe6, 0xe8, 0x65, 0x90, 0x15, 0x72, 0x36, 0x9b, 0xa6, 0x10, 0xa5, 0xc4, 0x2f, 0x97, 0x16, 0x1c, 0x2a, 0x1b, 0x26, 0x6b, 0x73, 0x44, 0x15, 0xd3, 0x20, 0x98, 0x7a, 0x03, 0xc4, 0xf7, 0x7b, 0xfe, 0x92, 0xd4, 0xbf, 0x14, 0x9b, 0x37, 0x72, 0x9f, 0x76, 0x75, 0xd7, 0x1b, 0x78, 0x46, 0x37, 0xb2, 0x62, 0x07, 0xd7, 0x5c, 0x98, 0xcb, 0x85, 0x0e, 0x9f, 0x3d, 0x49, 0x50, 0x25, 0xd7, 0x64, 0xa4, 0xfa, 0xa8, 0x48, 0x70, 0xd3, 0xcd, 0xb2, 0xba, 0xa3, 0x22, 0xe0, 0x52, 0x6c, 0x13, 0x26, 0xb3, 0x6c, 0x52, 0x54, 0xc9, 0x23, 0x57, 0x16, 0x95, 0xf7, 0x60, 0xd5, 0xa2, 0xdf])]
        output_tags = [bytes([0x53, 0xc2, 0xd0, 0xf7, 0xaf, 0x29, 0x3a, 0xad, 0xb6, 0x9b, 0x42, 0x5c, 0xdc, 0x20, 0x82, 0x6d]),
                       bytes([0x4c, 0x3d, 0x49, 0x1d, 0xab, 0xd1, 0xb2, 0xb0, 0xf9, 0x3c, 0x84, 0x89, 0x2b, 0xbb, 0x56, 0x98]),
                       bytes([0x60, 0x28, 0x7b, 0x7d, 0x52, 0xf4, 0xe1, 0xde, 0x6a, 0x2d, 0x24, 0x76, 0x7b, 0x70, 0x1a, 0xbf])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

    def test_kravatte_SAE_k_16_msg_1024_meta_64_nonce_32(self, test_workers):
        # performTestKravatte_SAE_OneInput(16*8, 32*8, 1024*8, 64*8, spongeChecksum);
        # keyLen   128, nonceLen   256, dataLen  8192, ADLen   512 (in bits)
        my_key = bytes([0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82])
        my_nonce = bytes([0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85, 0x76, 0x66, 0x57, 0x48, 0x39, 0x2a, 0x1b, 0x0c, 0xfd, 0xee, 0xdf, 0xd0, 0xc1, 0xb2, 0xa3, 0x94, 0x85])
        my_message = bytes([0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf0, 0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0, 0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71])
        my_metadata = bytes([0x8b, 0x0c, 0x8c, 0x0d, 0x8d, 0x0e, 0x8e, 0x0f, 0x8f, 0x10, 0x90, 0x11, 0x91, 0x12, 0x92, 0x13, 0x93, 0x14, 0x94, 0x15, 0x95, 0x16, 0x96, 0x17, 0x97, 0x18, 0x98, 0x19, 0x99, 0x1a, 0x9a, 0x1b, 0x9b, 0x1c, 0x9c, 0x1d, 0x9d, 0x1e, 0x9e, 0x1f, 0x9f, 0x20, 0xa0, 0x21, 0xa1, 0x22, 0xa2, 0x23, 0xa3, 0x24, 0xa4, 0x25, 0xa5, 0x26, 0xa6, 0x27, 0xa7, 0x28, 0xa8, 0x29, 0xa9, 0x2a, 0xaa, 0x2b])
        output_ciphertexts = [bytes([0xc9, 0x03, 0xaa, 0x23, 0x02, 0x81, 0x30, 0xaf, 0x80, 0x4f, 0xb3, 0x7e, 0xc1, 0xdf, 0x8e, 0xf0, 0x5c, 0xad, 0xc7, 0xec, 0x70, 0xf7, 0x25, 0xc7, 0x52, 0x74, 0x70, 0xf5, 0xe4, 0x8b, 0xe5, 0xf2, 0xcf, 0xa9, 0x10, 0xe1, 0x14, 0x5a, 0xb9, 0x2b, 0x0a, 0x2e, 0x9f, 0x33, 0x58, 0xa1, 0xf1, 0xd2, 0x57, 0xbb, 0xc2, 0x9a, 0x53, 0x3e, 0x9f, 0xf1, 0x9e, 0xc3, 0x9f, 0x79, 0x55, 0xff, 0xed, 0x78, 0x7b, 0x8f, 0x41, 0xa3, 0x17, 0xcb, 0xcc, 0x14, 0x2c, 0xc9, 0x8e, 0x5b, 0x17, 0x50, 0x4c, 0xa9, 0x7e, 0x6d, 0x2e, 0xa8, 0x11, 0xf8, 0xac, 0xda, 0x31, 0x43, 0xa6, 0x19, 0xed, 0x26, 0x18, 0x33, 0xa8, 0x94, 0x09, 0x63, 0x3f, 0x33, 0xbb, 0x98, 0xc3, 0xf1, 0x27, 0x48, 0xaa, 0x21, 0xff, 0x4f, 0x5e, 0xf0, 0x77, 0x6a, 0xe5, 0xcf, 0x62, 0xcc, 0xb8, 0x25, 0xe7, 0xaf, 0xc1, 0xbc, 0xe6, 0xac, 0xd3, 0xd8, 0x23, 0xc4, 0x63, 0xbb, 0xdf, 0x4e, 0x77, 0x18, 0xfc, 0x7e, 0xb9, 0xe5, 0x23, 0xb3, 0xdc, 0x30, 0x15, 0x4c, 0x42, 0x06, 0x19, 0x1c, 0x9e, 0xec, 0x5b, 0x57, 0xbd, 0xe8, 0x48, 0x2a, 0x42, 0xf7, 0x19, 0xad, 0x3a, 0x02, 0xa6, 0xf0, 0xa5, 0x25, 0xb7, 0x9c, 0x3b, 0x09, 0xa2, 0x60, 0x70, 0xe6, 0x99, 0xcb, 0x38, 0x6a, 0xcb, 0x26, 0x2f, 0xee, 0x6d, 0x5a, 0x72, 0xdd, 0x2e, 0x0e, 0x3f, 0x0a, 0xdf, 0x02, 0x6d, 0xc6, 0xa8, 0xc0, 0x96, 0x3d, 0xf8, 0x9d, 0x75, 0x6e, 0x5b, 0x3e, 0xa5, 0x8d, 0xe9, 0x18, 0xf3, 0xae, 0xd4, 0x77, 0x61, 0x75, 0x83, 0x95, 0x3b, 0x72, 0x96, 0xb6, 0xc5, 0x84, 0x58, 0x4f, 0x5d, 0x23, 0xc8, 0xd7, 0xc2, 0xd8, 0xed, 0x47, 0x76, 0x09, 0x28, 0xef, 0x1b, 0x1a, 0x89, 0x35, 0xa8, 0x82, 0x7d, 0xdf, 0x15, 0xa4, 0x91, 0x6b, 0x05, 0x2f, 0x1f, 0x3b, 0xb9, 0xc0, 0xf8, 0xce, 0xbd, 0x4b, 0x80, 0x93, 0xc8, 0xd5, 0xe6, 0x47, 0xd4, 0x57, 0x90, 0xb5, 0x17, 0xe2, 0xf2, 0x19, 0x08, 0x75, 0xc3, 0xb1, 0xdc, 0xa9, 0x07, 0xda, 0x28, 0x79, 0xb5, 0x1f, 0x26, 0xa6, 0x53, 0x6a, 0x62, 0xe8, 0x9a, 0x20, 0x43, 0xa9, 0xd7, 0x8b, 0xd4, 0xda, 0x1e, 0xec, 0xef, 0x11, 0x83, 0x03, 0xdf, 0xb8, 0x79, 0x6a, 0xa3, 0x56, 0xac, 0xd8, 0xef, 0xf4, 0x4d, 0xa1, 0x5b, 0xd4, 0xb5, 0x0d, 0xdf, 0xc9, 0x10, 0xf4, 0xb2, 0x7c, 0x78, 0x64, 0x82, 0x17, 0x0d, 0x5e, 0x05, 0xb4, 0x18, 0xa0, 0x9a, 0xa8, 0x9f, 0xe8, 0x31, 0x87, 0x03, 0x91, 0x6c, 0x0b, 0x1a, 0x37, 0x69, 0x9f, 0x4b, 0x7b, 0xb7, 0xdb, 0xd4, 0xca, 0x2b, 0x57, 0x96, 0xef, 0x12, 0x2f, 0x96, 0xa4, 0x56, 0x0b, 0xd5, 0x02, 0xbe, 0x25, 0x57, 0x2b, 0x4e, 0xf3, 0x04, 0x90, 0x1b, 0x1e, 0xf6, 0xa6, 0x02, 0x55, 0xf8, 0x47, 0x67, 0xc3, 0xcc, 0x7f, 0x35, 0xbb, 0x00, 0x89, 0x40, 0x89, 0x96, 0xc6, 0xe9, 0x1e, 0xfe, 0x8a, 0x0f, 0x29, 0x0e, 0x5d, 0xcd, 0x2a, 0xcd, 0x2b, 0xb1, 0xdb, 0x8e, 0xa6, 0xb9, 0x0a, 0xe7, 0xa5, 0x80, 0x0e, 0xa8, 0xf2, 0xcf, 0x23, 0x0b, 0x9c, 0x83, 0xbd, 0xf9, 0x44, 0x27, 0x72, 0x0b, 0xbf, 0x8c, 0x3c, 0x8e, 0xe3, 0xb0, 0x98, 0xbb, 0xd8, 0x17, 0x27, 0x3e, 0x68, 0xf9, 0xf3, 0x89, 0x00, 0xbf, 0x39, 0x14, 0xba, 0x34, 0x39, 0xd8, 0x22, 0x19, 0x4d, 0x91, 0xf9, 0xb7, 0x19, 0xe2, 0x2f, 0x66, 0xc8, 0xbc, 0x72, 0x84, 0x5f, 0xfb, 0x18, 0x17, 0xd8, 0xea, 0xa4, 0x4a, 0x17, 0x01, 0x01, 0x9e, 0xb3, 0x47, 0x95, 0x09, 0x2c, 0xf2, 0xe0, 0x68, 0xa2, 0xd8, 0x08, 0xcc, 0xd3, 0x95, 0xe2, 0x3a, 0x90, 0xa7, 0xfb, 0x08, 0xd1, 0x9e, 0x83, 0xf9, 0x5c, 0xa3, 0xa1, 0x2e, 0xa4, 0x1d, 0x32, 0xfb, 0x8e, 0xcf, 0xde, 0xaf, 0xf2, 0x54, 0x90, 0x82, 0x6c, 0x7f, 0x3c, 0x37, 0x21, 0x8f, 0xf8, 0x41, 0x88, 0x73, 0x27, 0xa5, 0x96, 0xff, 0x0c, 0xc6, 0x2d, 0xe5, 0x0f, 0xbc, 0x9b, 0xfe, 0xb2, 0x77, 0x45, 0x5a, 0x90, 0x14, 0x2b, 0x4b, 0x98, 0x44, 0xaa, 0x5f, 0xa0, 0x97, 0xb2, 0x33, 0x29, 0x3f, 0xdc, 0x8e, 0xe2, 0x4c, 0x88, 0xc8, 0xc6, 0xee, 0xf9, 0xe5, 0xc2, 0x71, 0xf2, 0xa1, 0xe6, 0x45, 0x8d, 0x79, 0x2b, 0x5d, 0xb9, 0x75, 0xc2, 0xf3, 0xfa, 0x83, 0x5c, 0x5e, 0x4e, 0x87, 0x11, 0xe5, 0xcd, 0xe2, 0x87, 0xde, 0xd0, 0x88, 0xc4, 0xf2, 0xbf, 0x79, 0xa0, 0x17, 0x98, 0x8c, 0xf8, 0xe3, 0x45, 0xd3, 0x72, 0xbf, 0x2b, 0xec, 0x27, 0x6c, 0xaf, 0xfd, 0x0d, 0xe2, 0xa2, 0x6c, 0x30, 0x46, 0x5b, 0xb2, 0x13, 0xe6, 0xfa, 0x92, 0x64, 0x80, 0x52, 0x54, 0x2f, 0x7b, 0x4d, 0xcd, 0x0d, 0x44, 0xee, 0x3b, 0xcb, 0xfb, 0xdd, 0xaf, 0x36, 0x2e, 0xff, 0xbe, 0x9c, 0x6c, 0x29, 0x4a, 0xeb, 0x19, 0x6a, 0x93, 0xe5, 0x50, 0xfa, 0x23, 0xf8, 0x70, 0xf1, 0x71, 0x58, 0xec, 0xd8, 0xb5, 0x18, 0x9a, 0xe1, 0xf9, 0x26, 0x27, 0x8a, 0x16, 0x5d, 0x29, 0x5f, 0xed, 0xbe, 0x28, 0x2d, 0x06, 0xf7, 0xb6, 0x8b, 0xe2, 0x66, 0xda, 0x93, 0x73, 0xaa, 0x05, 0xd0, 0xbc, 0xf1, 0x74, 0x7c, 0x30, 0x0a, 0x8d, 0x18, 0x68, 0x63, 0xee, 0xfc, 0x55, 0x8f, 0xa3, 0x20, 0x05, 0x1b, 0x18, 0xaf, 0x82, 0x99, 0xe5, 0x56, 0xc5, 0x91, 0x03, 0x12, 0xfc, 0x25, 0xd0, 0x81, 0xac, 0x60, 0x57, 0xd2, 0x1e, 0xde, 0xe6, 0x60, 0x56, 0x39, 0x44, 0x10, 0x3a, 0xc2, 0x7d, 0xbd, 0x9e, 0xf7, 0x8b, 0xe5, 0xe9, 0x02, 0x69, 0x69, 0x33, 0xf8, 0x61, 0xbf, 0xc1, 0xff, 0xda, 0x27, 0x7e, 0x79, 0x98, 0x5b, 0x15, 0x09, 0x46, 0x31, 0x3f, 0x0c, 0xdc, 0x0e, 0xef, 0x5f, 0xfb, 0x88, 0x0a, 0xd9, 0x03, 0x55, 0xdc, 0xbb, 0x1f, 0x4a, 0x99, 0x29, 0x3a, 0xd7, 0x44, 0x00, 0x76, 0x3d, 0xac, 0x82, 0xc4, 0x9a, 0xba, 0x77, 0xbc, 0x8c, 0xce, 0x6f, 0x3a, 0x9c, 0x59, 0x24, 0xfa, 0x72, 0xef, 0xa0, 0x3c, 0x6d, 0xb0, 0x93, 0x31, 0xb9, 0xa6, 0x8e, 0xc1, 0x8b, 0x94, 0x2b, 0x4c, 0x87, 0x63, 0xb2, 0xce, 0x92, 0x0a, 0x63, 0x42, 0x5e, 0xbd, 0xab, 0x6c, 0x5d, 0xa3, 0xb9, 0x58, 0x0f, 0xa8, 0x31, 0xc0, 0xaf, 0x5d, 0x90, 0x2f, 0xda, 0x5f, 0x40, 0x37, 0x6e, 0xf7, 0xb4, 0x39, 0x9e, 0x54, 0x6b, 0xee, 0xe4, 0x49, 0x94, 0x7f, 0x10, 0x83, 0x98, 0x96, 0xb1, 0xb9, 0xea, 0xe7, 0xe5, 0xc6, 0x95, 0x06, 0x81, 0xb1, 0x86, 0x3d, 0xb8, 0xfe, 0xf2, 0xcc, 0x8c, 0xbb, 0xe6, 0x17, 0x51, 0x2b, 0x8b, 0xb0, 0xa6, 0x5e, 0x46, 0xa3, 0x71, 0xd8, 0xee, 0x6b, 0xc5, 0x3f, 0x7a, 0x46, 0xd4, 0xf3, 0x1b, 0xe6, 0xae, 0x52, 0x5d, 0x04, 0x26, 0x81, 0x92, 0x85, 0x32, 0xb2, 0x9e, 0xfe, 0xd2, 0x0a, 0x66, 0xd4, 0xba, 0x04, 0x8f, 0xf8, 0x0a, 0x38, 0x0e, 0xdd, 0xf3, 0xb5, 0xea, 0x6c, 0xdf, 0xf7, 0xf4, 0xc2, 0xf7, 0x3c, 0xfc, 0xc7, 0x13, 0xc1, 0xd7, 0x10, 0xbf, 0x99, 0x23, 0x86, 0xc9, 0x54, 0xb8, 0x2d, 0x82, 0x7f, 0xca, 0x45, 0x25, 0xa6, 0x39, 0x8b, 0x78, 0x00, 0x65, 0x6e, 0x0e, 0x31, 0x64, 0x18, 0xea, 0xe1, 0x99, 0xdb, 0x37, 0x0b, 0x29, 0x18, 0x79, 0x0e, 0x05, 0xb9, 0xeb, 0x82, 0xe1, 0xea, 0x21, 0x87, 0xe0, 0x6f, 0xd9, 0x3e, 0xc6, 0x04, 0xc0, 0x1c, 0x11, 0x6d, 0xae, 0xd6, 0x69, 0x4c, 0xef, 0xa5, 0xb9, 0x7f, 0x2c, 0x6d, 0x01, 0xab, 0x0c, 0x3c, 0xec, 0x2f, 0x62, 0xd1, 0x85]),
                              bytes([0x19, 0x31, 0x16, 0x86, 0x7f, 0x3d, 0xa9, 0x35, 0x69, 0x52, 0x20, 0x50, 0x08, 0x9a, 0x53, 0x18, 0xb1, 0x15, 0x9e, 0x35, 0x0b, 0xe8, 0xfe, 0xbf, 0x5f, 0x3e, 0x60, 0x59, 0x0f, 0xbf, 0x9d, 0xc3, 0xa8, 0x56, 0x57, 0xed, 0x04, 0xb5, 0xee, 0xba, 0x6e, 0x3c, 0x52, 0xc7, 0x01, 0x21, 0x37, 0xcf, 0x11, 0x3d, 0x61, 0x73, 0x12, 0xa6, 0x75, 0x07, 0x16, 0x41, 0x48, 0x17, 0x9a, 0x0f, 0xea, 0xe7, 0x6b, 0xab, 0x86, 0x65, 0x75, 0x52, 0x4c, 0x9a, 0xc5, 0xd8, 0xa2, 0x39, 0xc8, 0x72, 0xb1, 0xec, 0x0b, 0xa7, 0xe8, 0x47, 0x2a, 0xcb, 0x4e, 0x20, 0x05, 0x59, 0xb1, 0xd6, 0x46, 0xde, 0xa5, 0xcc, 0x57, 0x25, 0xa6, 0xa3, 0x31, 0x80, 0xd3, 0x6e, 0xcd, 0x3e, 0x09, 0xce, 0x15, 0x5b, 0x27, 0x0b, 0x56, 0x5b, 0xaa, 0xa6, 0x3b, 0xd8, 0xe7, 0x03, 0x17, 0x16, 0xb5, 0xc2, 0xe4, 0x68, 0x4e, 0x68, 0xf0, 0x23, 0x87, 0x56, 0x55, 0x69, 0xcb, 0x0f, 0xd8, 0x09, 0x93, 0xcc, 0x71, 0xdf, 0x5a, 0x01, 0x63, 0xad, 0x98, 0xb6, 0xee, 0xf3, 0x17, 0x13, 0x68, 0x5b, 0x2d, 0x18, 0x6c, 0x5d, 0xa6, 0xec, 0x14, 0x6f, 0x0b, 0x68, 0x32, 0xe2, 0x96, 0x57, 0x00, 0x83, 0xfc, 0xe9, 0x21, 0x0c, 0xe0, 0x57, 0x67, 0x7b, 0x16, 0x2f, 0x6e, 0xed, 0xf3, 0x71, 0x0e, 0xa6, 0x09, 0x3f, 0xb8, 0xda, 0x32, 0x31, 0xb2, 0x81, 0x06, 0x6f, 0x6f, 0x32, 0xa2, 0x2d, 0xe0, 0x58, 0x1c, 0x07, 0x4e, 0x32, 0xf2, 0xc1, 0xee, 0x7d, 0x3e, 0x76, 0x36, 0x75, 0x22, 0xef, 0x16, 0xcc, 0x0c, 0x11, 0x55, 0xe6, 0x1d, 0x40, 0xcc, 0xaa, 0x91, 0x9c, 0x0e, 0xe0, 0x1c, 0xc3, 0xe0, 0x69, 0x3f, 0x2b, 0x38, 0x7f, 0x24, 0x2f, 0x6a, 0x60, 0x55, 0x7b, 0x5a, 0x81, 0x29, 0x28, 0xb6, 0x58, 0x91, 0x46, 0xb7, 0xab, 0x28, 0xd8, 0x42, 0xd1, 0x83, 0xaa, 0x41, 0xd1, 0x98, 0xad, 0x9c, 0x96, 0xb4, 0x05, 0xd5, 0x68, 0xeb, 0x0a, 0x46, 0x81, 0xe0, 0x42, 0xbd, 0xfd, 0x71, 0xdc, 0xda, 0xaf, 0xf7, 0x79, 0x74, 0x51, 0x44, 0x3a, 0x00, 0x13, 0xf0, 0xad, 0xb2, 0x73, 0xef, 0x1b, 0x03, 0x4c, 0xf4, 0x2e, 0x94, 0x62, 0x01, 0x97, 0xd0, 0xd2, 0x58, 0x62, 0x34, 0x5b, 0x22, 0x27, 0xf7, 0xc7, 0x64, 0x3c, 0xc3, 0xee, 0xb4, 0xab, 0x36, 0xcb, 0xc9, 0x6c, 0x6b, 0x04, 0x6e, 0x01, 0xe0, 0x3d, 0x84, 0xd3, 0x19, 0x84, 0x8c, 0xc0, 0x99, 0x5f, 0x53, 0x25, 0x5f, 0xb8, 0xcf, 0x09, 0xbd, 0xa0, 0xb4, 0xa7, 0x42, 0x24, 0xda, 0xfe, 0xf6, 0x8d, 0xb6, 0xa7, 0xd9, 0xb6, 0x43, 0xdd, 0xd9, 0xa8, 0x86, 0xf3, 0x18, 0xa2, 0xf4, 0xc1, 0xcd, 0x90, 0xaf, 0x91, 0xf5, 0x2e, 0x38, 0xb6, 0xd6, 0x99, 0x42, 0xca, 0xfc, 0x64, 0x75, 0xae, 0x6d, 0x80, 0xdc, 0xec, 0xa0, 0x9a, 0x3b, 0x25, 0x1c, 0xc9, 0x81, 0xc7, 0x5b, 0x56, 0xa5, 0xaa, 0x80, 0x98, 0x45, 0x93, 0x7f, 0x2a, 0x05, 0x1d, 0x30, 0x93, 0x55, 0x78, 0xbb, 0x4f, 0xf4, 0x2a, 0x48, 0x3a, 0x7d, 0x16, 0x01, 0xa7, 0x50, 0xf2, 0x5f, 0x64, 0x69, 0x35, 0x8b, 0x2e, 0xbc, 0x32, 0xdd, 0x61, 0xc6, 0x99, 0x6b, 0x27, 0x53, 0x3d, 0x21, 0x37, 0xe2, 0x87, 0x28, 0x8c, 0x38, 0x49, 0xfe, 0xb7, 0xf6, 0xbd, 0x87, 0x3e, 0x8a, 0x72, 0xd2, 0x80, 0xf9, 0xdb, 0xa8, 0xbc, 0xc5, 0x51, 0xae, 0x45, 0xc1, 0x10, 0x22, 0x98, 0x24, 0x49, 0x5a, 0x46, 0x90, 0x87, 0x86, 0x10, 0x8e, 0x78, 0x0a, 0x23, 0xfb, 0x83, 0xef, 0x88, 0x68, 0x0d, 0x81, 0x32, 0x5d, 0x0d, 0x69, 0xb8, 0x8e, 0xfd, 0x6d, 0x5a, 0xa4, 0x1d, 0xab, 0x62, 0x05, 0xc9, 0x7f, 0xe4, 0xb5, 0xd8, 0xdb, 0xdf, 0xeb, 0x0b, 0x0d, 0xd5, 0xc2, 0x5d, 0xdd, 0xed, 0xcf, 0x0b, 0x60, 0x25, 0x2a, 0x17, 0xec, 0x80, 0x8a, 0xff, 0x44, 0xb2, 0x6a, 0x11, 0x5e, 0xa2, 0x1e, 0x06, 0x4b, 0x31, 0xee, 0xc7, 0x47, 0xa4, 0xa6, 0x2a, 0x2c, 0x48, 0x51, 0xcf, 0x05, 0x13, 0x15, 0x87, 0xea, 0xd9, 0xf9, 0xec, 0xe8, 0xde, 0x32, 0xdd, 0x6e, 0xa4, 0x87, 0xbc, 0xe6, 0x27, 0xee, 0xe8, 0xdd, 0x46, 0x4e, 0xe2, 0xef, 0x98, 0x7b, 0x5a, 0x28, 0x8f, 0x30, 0x01, 0x70, 0xd8, 0xbd, 0xc5, 0x61, 0x18, 0xd2, 0xff, 0x26, 0x48, 0x20, 0x54, 0xfe, 0x06, 0xc2, 0xcc, 0x1e, 0x80, 0xb1, 0x24, 0x09, 0x85, 0xe3, 0xda, 0xc2, 0x1c, 0x0b, 0x38, 0xce, 0xd2, 0x85, 0xa6, 0x4a, 0x4c, 0x1b, 0x6d, 0x16, 0x00, 0x33, 0xda, 0x7b, 0x4a, 0x39, 0x20, 0xd4, 0x69, 0x91, 0x30, 0x03, 0xe1, 0xaf, 0x90, 0xba, 0x5e, 0xef, 0x16, 0x00, 0xac, 0x0d, 0xa4, 0x50, 0x84, 0x4b, 0x58, 0x2a, 0x70, 0xf5, 0x21, 0x23, 0xf7, 0x5f, 0x96, 0x0f, 0x90, 0x07, 0xf9, 0xa5, 0x1f, 0xca, 0xb4, 0xd4, 0xa6, 0x82, 0x69, 0x8a, 0xe0, 0xb2, 0x6a, 0x74, 0xc2, 0xee, 0x73, 0x06, 0xaf, 0x12, 0xff, 0x3c, 0xa7, 0xab, 0xd6, 0xc6, 0x9b, 0x4c, 0x53, 0xed, 0x62, 0x27, 0xa9, 0xe8, 0xb8, 0x99, 0x36, 0xf6, 0x5b, 0x0e, 0x56, 0xc1, 0x49, 0x85, 0x4b, 0x3e, 0x51, 0x15, 0xa4, 0x87, 0xfa, 0x0f, 0xc2, 0xf9, 0x30, 0x45, 0xbd, 0xa8, 0x54, 0x0f, 0xb5, 0x55, 0x26, 0x11, 0xcc, 0x10, 0xbd, 0x8c, 0xa7, 0x72, 0x84, 0x51, 0xbc, 0x8b, 0xad, 0x25, 0xe8, 0x5d, 0x36, 0xb1, 0x13, 0x6c, 0xd1, 0x1f, 0xa4, 0x69, 0x0b, 0xef, 0x3d, 0xef, 0xf8, 0xce, 0x50, 0xb8, 0xd2, 0x4d, 0xad, 0x97, 0xcc, 0x71, 0xeb, 0xf5, 0x9c, 0x4b, 0x0a, 0x6a, 0x11, 0x76, 0x32, 0x1e, 0xf8, 0x81, 0x7e, 0x36, 0x40, 0xa6, 0x5d, 0xc3, 0xc3, 0xf5, 0x9f, 0xac, 0xcd, 0x2c, 0x61, 0x77, 0x69, 0x23, 0x7f, 0xee, 0xc2, 0x9b, 0xb4, 0x15, 0x7a, 0x29, 0xb8, 0xca, 0x3a, 0x40, 0x7e, 0x50, 0x8d, 0xd5, 0xdd, 0x8c, 0x9c, 0x0a, 0x6f, 0x2f, 0xce, 0x91, 0x5b, 0x73, 0xea, 0xa8, 0x37, 0x7e, 0x43, 0xa6, 0x0d, 0xda, 0xad, 0xb6, 0xb9, 0xb0, 0xf1, 0x26, 0x7c, 0x1c, 0x72, 0x2b, 0x66, 0x27, 0x4a, 0x7c, 0x0d, 0x07, 0x1c, 0xcc, 0x03, 0x94, 0x40, 0xce, 0xe6, 0x2f, 0xae, 0xf0, 0xc8, 0x4c, 0xa2, 0xef, 0x58, 0x72, 0x14, 0xcd, 0x1c, 0x07, 0xfd, 0xaf, 0x1b, 0x8e, 0xeb, 0xdd, 0x7f, 0x71, 0x7f, 0xf1, 0x6c, 0x4e, 0xbc, 0xa5, 0x64, 0x67, 0xfb, 0xb7, 0x3c, 0x44, 0xc2, 0xfb, 0xa4, 0x80, 0x9c, 0x5d, 0xe9, 0x71, 0x9d, 0xaf, 0xf3, 0x7c, 0x35, 0x93, 0x48, 0x2e, 0x94, 0x13, 0xdd, 0xd4, 0xe4, 0x1c, 0xe3, 0x6f, 0x09, 0xa5, 0xaa, 0x0f, 0x16, 0x91, 0x1b, 0x5d, 0xc4, 0x13, 0x5d, 0xb2, 0xae, 0x64, 0x6f, 0x0b, 0xcd, 0xce, 0x50, 0x1b, 0xe4, 0x56, 0xfe, 0xe9, 0xd5, 0xa3, 0x42, 0x84, 0xb1, 0x4e, 0x06, 0xce, 0x6e, 0xdd, 0xcf, 0xa4, 0x0e, 0x8f, 0x8c, 0xba, 0xf3, 0x51, 0x9f, 0xea, 0x9d, 0x14, 0x30, 0x25, 0x01, 0x43, 0xe4, 0xb0, 0xf6, 0xa3, 0xe8, 0x91, 0x7e, 0xa4, 0xc0, 0x8f, 0xdc, 0x02, 0xae, 0xc8, 0x9e, 0x4e, 0x49, 0x23, 0x7f, 0x6f, 0x31, 0x90, 0xfc, 0xef, 0x78, 0xdc, 0x69, 0xd3, 0xc2, 0xae, 0x83, 0xe5, 0x98, 0x7b, 0x7c, 0x75, 0x1c, 0x0b, 0xcc, 0x57, 0x8a, 0x17, 0xe0, 0xdf, 0x43, 0xbd, 0x53, 0x07, 0x1e, 0x62, 0xfd, 0x03, 0xe7, 0xed, 0x38, 0x93, 0x07, 0x9a, 0xf8, 0x7a, 0xd5, 0x44, 0xb8, 0x3a, 0x29, 0xff, 0xdc, 0x6d, 0x0e, 0x94, 0xab, 0x72, 0x45, 0x00, 0x81, 0x96, 0x70]),
                              bytes([0xe3, 0xf7, 0x5e, 0xbe, 0xec, 0x9f, 0xf1, 0x49, 0x10, 0xd9, 0xad, 0x4d, 0xe3, 0x17, 0xa6, 0xe4, 0xc1, 0x94, 0x62, 0x40, 0xd4, 0x44, 0x48, 0x2f, 0xc5, 0xd4, 0x7d, 0xea, 0xbf, 0x1c, 0xb4, 0xe1, 0xe9, 0x2b, 0xa3, 0x5d, 0x89, 0xed, 0x0e, 0x7a, 0xc3, 0xb6, 0xc1, 0x69, 0x76, 0x68, 0x3c, 0x5a, 0x77, 0x8f, 0x49, 0xdc, 0xfc, 0xb2, 0x47, 0xbc, 0x5a, 0xd8, 0x1f, 0x91, 0x25, 0xdb, 0xaa, 0xd9, 0x32, 0xe0, 0x15, 0xe2, 0xdc, 0xb5, 0x86, 0xdf, 0xc7, 0x89, 0x26, 0x45, 0x43, 0xf5, 0xa2, 0xa6, 0x94, 0xd1, 0x20, 0x38, 0xb9, 0x6b, 0xef, 0x9a, 0x94, 0xba, 0x6f, 0x05, 0x06, 0x3f, 0x81, 0x0b, 0xd3, 0x1c, 0x54, 0xf7, 0x61, 0x02, 0x61, 0x4c, 0xf5, 0x58, 0x1d, 0xc9, 0x12, 0x18, 0x5f, 0x3d, 0x8c, 0x26, 0x31, 0x38, 0x91, 0xcc, 0x47, 0xe4, 0x06, 0xa0, 0xd8, 0x04, 0xb6, 0xd1, 0x0b, 0x65, 0x12, 0x73, 0x1f, 0x18, 0x02, 0x5c, 0xe0, 0xac, 0xb1, 0x75, 0xbe, 0xbc, 0xf8, 0xf0, 0x4f, 0xf4, 0x3b, 0x35, 0x8c, 0xff, 0x21, 0x2d, 0xc7, 0x31, 0xb4, 0xc9, 0x7a, 0xc7, 0x2e, 0xba, 0x98, 0x42, 0x4f, 0xd2, 0x02, 0x9c, 0xef, 0xd2, 0xdf, 0xb2, 0x2f, 0x09, 0x69, 0x81, 0x91, 0x68, 0x35, 0x50, 0xc7, 0x2b, 0xbb, 0xca, 0xba, 0xff, 0xe9, 0x15, 0xc5, 0xac, 0x48, 0x04, 0x25, 0xb4, 0xea, 0x55, 0x9f, 0xe6, 0x94, 0xd3, 0x54, 0xde, 0x09, 0x83, 0xa2, 0x84, 0xcb, 0x19, 0xd6, 0x6d, 0x3a, 0xd4, 0x9f, 0x47, 0xa6, 0x4f, 0xb5, 0x0b, 0x8b, 0x82, 0xfb, 0xb7, 0x3b, 0x73, 0x63, 0x6e, 0xa4, 0x90, 0x76, 0xe3, 0xda, 0xe7, 0x72, 0x87, 0x0a, 0xbf, 0xe1, 0x00, 0x4d, 0x9e, 0xc4, 0x46, 0xc0, 0x70, 0xde, 0x0e, 0x88, 0x85, 0x55, 0x1d, 0xd8, 0xc5, 0x3c, 0x59, 0xfa, 0x7b, 0x9a, 0xd8, 0x91, 0x87, 0xee, 0x38, 0x59, 0xf3, 0xe1, 0x46, 0x56, 0x5e, 0xb7, 0xfb, 0x80, 0x45, 0x4f, 0xc7, 0x7a, 0x53, 0x20, 0xfc, 0xd9, 0xfc, 0x80, 0x56, 0xd5, 0x0d, 0x55, 0x70, 0x0d, 0x58, 0x05, 0x8c, 0x9f, 0x82, 0x89, 0x25, 0xd1, 0x49, 0x02, 0x39, 0xbe, 0x0c, 0x99, 0x7a, 0x30, 0xca, 0x43, 0x09, 0x1d, 0x6f, 0xd2, 0x17, 0x97, 0xbf, 0x1c, 0x8b, 0x89, 0x4e, 0x5d, 0x61, 0xbe, 0x63, 0xe8, 0x1c, 0xf5, 0xa5, 0x1d, 0xff, 0x80, 0x2a, 0x6e, 0xe5, 0x1e, 0x5d, 0x22, 0x4d, 0xa4, 0x3e, 0xfe, 0xf9, 0x41, 0xcc, 0xca, 0x8d, 0xac, 0xb2, 0xc5, 0xfa, 0x17, 0xc6, 0xd2, 0xd0, 0x28, 0x7e, 0x9c, 0x49, 0x99, 0xda, 0x68, 0xa5, 0x9a, 0x58, 0xff, 0xee, 0xaa, 0x6e, 0x8f, 0x3f, 0x54, 0xfb, 0x9d, 0x5e, 0x56, 0x8f, 0xc2, 0x7a, 0x8a, 0x5b, 0xe1, 0xe3, 0x7e, 0x19, 0x59, 0xc0, 0xf1, 0x15, 0x90, 0x93, 0x8e, 0x9a, 0x91, 0x02, 0xf3, 0x30, 0x3f, 0x65, 0xf7, 0x8e, 0x7c, 0xbc, 0xa4, 0x4e, 0xf9, 0x24, 0xd3, 0x37, 0x08, 0x29, 0xc7, 0x8a, 0x02, 0xdb, 0xd2, 0x9e, 0x05, 0x0c, 0x17, 0x9b, 0xec, 0xfa, 0x3c, 0xc8, 0x6f, 0x49, 0xab, 0x31, 0xc5, 0x3d, 0x0f, 0xb0, 0x01, 0xcb, 0x64, 0x38, 0xba, 0xe3, 0xa4, 0x83, 0xc4, 0x76, 0x09, 0x1e, 0x56, 0x66, 0x5a, 0x9a, 0xb7, 0xf4, 0x38, 0x32, 0xbd, 0x75, 0x01, 0xc5, 0xe3, 0x86, 0x99, 0x1a, 0x2b, 0xda, 0x49, 0x00, 0x94, 0x95, 0xcd, 0x32, 0xe8, 0xe7, 0x95, 0xcc, 0xa9, 0x75, 0x35, 0x7d, 0xba, 0x76, 0xf0, 0x94, 0xd2, 0x55, 0x7a, 0x04, 0xe2, 0x10, 0xf7, 0x41, 0x99, 0xdd, 0xa6, 0xaa, 0x8a, 0x3c, 0xe8, 0x96, 0xe8, 0x8a, 0x75, 0x55, 0xe9, 0x4f, 0xc7, 0x7c, 0x0e, 0x3b, 0xf9, 0xd4, 0xa2, 0x18, 0x57, 0xaf, 0xeb, 0xfe, 0xdb, 0x40, 0xf5, 0x9b, 0x17, 0x8a, 0x04, 0x5d, 0xaf, 0x3e, 0x8f, 0x83, 0x81, 0xfa, 0xca, 0x8e, 0x03, 0x67, 0x4d, 0xc3, 0x72, 0xc4, 0x07, 0x31, 0xd2, 0x2a, 0x4d, 0x55, 0x0d, 0x40, 0x39, 0x50, 0x86, 0x19, 0x3a, 0xa1, 0x28, 0x45, 0x5c, 0xa2, 0xde, 0xcc, 0xd2, 0xd8, 0xc4, 0xb5, 0x55, 0x01, 0x01, 0x1b, 0x90, 0x58, 0x5b, 0xa9, 0xde, 0xff, 0xdd, 0x3b, 0xd7, 0xc5, 0x70, 0xfa, 0xf6, 0x14, 0xdc, 0x64, 0x49, 0xfd, 0x7c, 0x6a, 0x5f, 0x46, 0xf7, 0x91, 0xd4, 0x23, 0x09, 0x33, 0xe3, 0xe6, 0x20, 0xd7, 0x3e, 0xe5, 0x33, 0x18, 0x9d, 0x56, 0xb9, 0x31, 0xa1, 0xed, 0xfc, 0xd6, 0xc8, 0x56, 0xac, 0x6d, 0xda, 0xc6, 0x9b, 0x24, 0x14, 0xf6, 0x4d, 0x48, 0xd5, 0xad, 0xf1, 0xec, 0xf5, 0x29, 0x1f, 0x42, 0xbe, 0x69, 0x16, 0xec, 0xcf, 0x30, 0xdb, 0x14, 0xa6, 0x93, 0x2c, 0xa6, 0x73, 0x43, 0xf3, 0x32, 0x69, 0x7d, 0xe9, 0xd6, 0xfd, 0xf8, 0xbb, 0xc4, 0x5f, 0xad, 0x20, 0xc2, 0x92, 0xef, 0x8c, 0xe7, 0x17, 0xb3, 0x98, 0x3f, 0xe0, 0x83, 0xc2, 0x9a, 0xe3, 0x5c, 0x32, 0xe4, 0x69, 0x52, 0xe6, 0x5b, 0xf2, 0xcc, 0xd9, 0x92, 0x0b, 0xf6, 0xf9, 0x95, 0x9e, 0xf2, 0xbd, 0x2b, 0x93, 0xe6, 0x81, 0x77, 0xdc, 0x09, 0xa7, 0x80, 0xcd, 0xcc, 0x55, 0xd1, 0x47, 0x63, 0xc6, 0x7f, 0xba, 0x20, 0x3a, 0x69, 0x8e, 0xf9, 0xb9, 0xc9, 0xf2, 0x64, 0x22, 0xb6, 0xce, 0x80, 0x8a, 0xb4, 0x6e, 0x42, 0x87, 0x79, 0x1e, 0x3f, 0x5c, 0x2f, 0x67, 0x74, 0x15, 0xa9, 0x35, 0xd5, 0xe6, 0xc9, 0x18, 0x0c, 0xa7, 0x59, 0x6c, 0xe0, 0x49, 0x91, 0x56, 0x67, 0xe2, 0x7a, 0x38, 0xb0, 0xea, 0x26, 0x9e, 0xf2, 0x0a, 0xea, 0x45, 0x46, 0xaf, 0x5a, 0x0d, 0xf1, 0xd0, 0xc3, 0x66, 0x23, 0xd7, 0xe3, 0x83, 0xe8, 0x7f, 0xc3, 0x25, 0x1d, 0x59, 0x5e, 0x1a, 0xcf, 0x47, 0x2d, 0xd8, 0x03, 0x3c, 0x19, 0xd5, 0xad, 0xed, 0x58, 0x84, 0xa4, 0x39, 0x21, 0xe3, 0x5c, 0xf3, 0xac, 0x57, 0x1a, 0x69, 0xd3, 0x0c, 0x98, 0x89, 0xd9, 0x45, 0xb6, 0x45, 0x17, 0xb9, 0x1f, 0x1e, 0x32, 0x4a, 0x51, 0x3e, 0x0e, 0xeb, 0x06, 0x1b, 0xcf, 0xe6, 0x8e, 0x37, 0x33, 0xa8, 0xd7, 0x89, 0xfa, 0xf1, 0x4a, 0x8d, 0xfb, 0x23, 0x21, 0x1c, 0xcf, 0x49, 0xb0, 0x05, 0xc4, 0x1e, 0x1e, 0xba, 0x24, 0x43, 0x8a, 0x46, 0x9f, 0x67, 0xdc, 0x11, 0xc0, 0x00, 0x96, 0x1b, 0x3c, 0xcf, 0xad, 0x19, 0xb9, 0xf7, 0x87, 0x01, 0x3b, 0x34, 0x47, 0xe7, 0x53, 0xc2, 0x1a, 0xd9, 0xd6, 0x18, 0x0f, 0x04, 0x32, 0x62, 0xd6, 0xc1, 0xf7, 0x6e, 0xeb, 0xe3, 0xa6, 0x3c, 0x6e, 0x33, 0x02, 0x35, 0x21, 0x70, 0x5e, 0xad, 0x58, 0xed, 0x81, 0xc9, 0xd3, 0xf0, 0x62, 0xe6, 0x08, 0xbe, 0x07, 0x67, 0xa6, 0xa7, 0x41, 0x07, 0x4f, 0x55, 0x5b, 0x39, 0xe3, 0xe3, 0x12, 0x41, 0x09, 0xe5, 0xe5, 0x81, 0xa0, 0x34, 0x24, 0xb5, 0xdf, 0xa9, 0x78, 0x96, 0xbf, 0x83, 0x0b, 0xa5, 0xec, 0x12, 0x4e, 0x8b, 0x7c, 0x05, 0x22, 0xf4, 0x2f, 0x1b, 0x62, 0xb9, 0x30, 0x1c, 0x3f, 0x4c, 0x38, 0xe6, 0x03, 0x07, 0x88, 0xfe, 0xf1, 0xc6, 0x0f, 0x56, 0x77, 0x8e, 0xf3, 0x06, 0x12, 0xfa, 0x89, 0xcf, 0xae, 0x03, 0x67, 0x78, 0x47, 0xb7, 0x81, 0xf4, 0xbb, 0xd6, 0x54, 0xa5, 0xa9, 0x40, 0x63, 0xde, 0x51, 0x95, 0x18, 0xba, 0xe5, 0x2b, 0x35, 0xae, 0xc2, 0xbf, 0xae, 0x34, 0x50, 0x6c, 0xab, 0x06, 0x50, 0xbe, 0x74, 0x02, 0xdf, 0xde, 0xec, 0x02, 0x1a, 0xb9, 0xdd, 0xc1, 0x51, 0x53, 0x19, 0x52, 0x9f, 0xc2, 0x82, 0x84, 0xc3, 0x9f, 0x93, 0xe5, 0x31, 0xeb, 0xa8, 0xc7, 0x3b, 0x23, 0xbe, 0x9c, 0xf6])]
        output_tags = [bytes([0xb4, 0x67, 0x37, 0x7c, 0x1c, 0x57, 0xd3, 0xc7, 0x0a, 0xac, 0x82, 0x8b, 0xb4, 0x32, 0xaf, 0x47]),
                       bytes([0x3a, 0x06, 0xc9, 0xb8, 0x11, 0x78, 0x06, 0x10, 0x3b, 0xc6, 0xec, 0xc5, 0x3d, 0x87, 0x50, 0x3a]),
                       bytes([0x47, 0x33, 0x2d, 0x3e, 0x82, 0xc6, 0x86, 0x7d, 0x76, 0x07, 0xa5, 0x15, 0x55, 0xb8, 0xbf, 0xf8])]

        krav_sae_encrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)
        krav_sae_decrypt = KravatteSAE(my_nonce, my_key, workers=test_workers)

        # Encryption Message 1
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[0]
        assert real_tag == output_tags[0]
        # Decrypt Message 1
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 2
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[1]
        assert real_tag == output_tags[1]
        # Decrypt Message 2
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid

        # Encryption Message 3
        real_c_text, real_tag = krav_sae_encrypt.wrap(my_message, my_metadata)
        assert real_c_text == output_ciphertexts[2]
        assert real_tag == output_tags[2]
        # Decrypt Message 3
        real_p_text, tag_valid = krav_sae_decrypt.unwrap(real_c_text, my_metadata, real_tag)
        assert real_p_text == my_message
        assert tag_valid
